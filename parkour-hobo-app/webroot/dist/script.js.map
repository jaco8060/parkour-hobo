{"version":3,"file":"script.js","sources":["../node_modules/three/build/three.core.js","../node_modules/three/build/three.module.js","../src/blockFactory.ts","../src/player.ts","../src/script.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2010-2025 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '174';\n\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\nconst CullFaceNone = 0;\nconst CullFaceBack = 1;\nconst CullFaceFront = 2;\nconst CullFaceFrontBack = 3;\nconst BasicShadowMap = 0;\nconst PCFShadowMap = 1;\nconst PCFSoftShadowMap = 2;\nconst VSMShadowMap = 3;\nconst FrontSide = 0;\nconst BackSide = 1;\nconst DoubleSide = 2;\nconst NoBlending = 0;\nconst NormalBlending = 1;\nconst AdditiveBlending = 2;\nconst SubtractiveBlending = 3;\nconst MultiplyBlending = 4;\nconst CustomBlending = 5;\nconst AddEquation = 100;\nconst SubtractEquation = 101;\nconst ReverseSubtractEquation = 102;\nconst MinEquation = 103;\nconst MaxEquation = 104;\nconst ZeroFactor = 200;\nconst OneFactor = 201;\nconst SrcColorFactor = 202;\nconst OneMinusSrcColorFactor = 203;\nconst SrcAlphaFactor = 204;\nconst OneMinusSrcAlphaFactor = 205;\nconst DstAlphaFactor = 206;\nconst OneMinusDstAlphaFactor = 207;\nconst DstColorFactor = 208;\nconst OneMinusDstColorFactor = 209;\nconst SrcAlphaSaturateFactor = 210;\nconst ConstantColorFactor = 211;\nconst OneMinusConstantColorFactor = 212;\nconst ConstantAlphaFactor = 213;\nconst OneMinusConstantAlphaFactor = 214;\nconst NeverDepth = 0;\nconst AlwaysDepth = 1;\nconst LessDepth = 2;\nconst LessEqualDepth = 3;\nconst EqualDepth = 4;\nconst GreaterEqualDepth = 5;\nconst GreaterDepth = 6;\nconst NotEqualDepth = 7;\nconst MultiplyOperation = 0;\nconst MixOperation = 1;\nconst AddOperation = 2;\nconst NoToneMapping = 0;\nconst LinearToneMapping = 1;\nconst ReinhardToneMapping = 2;\nconst CineonToneMapping = 3;\nconst ACESFilmicToneMapping = 4;\nconst CustomToneMapping = 5;\nconst AgXToneMapping = 6;\nconst NeutralToneMapping = 7;\nconst AttachedBindMode = 'attached';\nconst DetachedBindMode = 'detached';\n\nconst UVMapping = 300;\nconst CubeReflectionMapping = 301;\nconst CubeRefractionMapping = 302;\nconst EquirectangularReflectionMapping = 303;\nconst EquirectangularRefractionMapping = 304;\nconst CubeUVReflectionMapping = 306;\nconst RepeatWrapping = 1000;\nconst ClampToEdgeWrapping = 1001;\nconst MirroredRepeatWrapping = 1002;\nconst NearestFilter = 1003;\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004;\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005;\nconst LinearFilter = 1006;\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007;\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008;\nconst UnsignedByteType = 1009;\nconst ByteType = 1010;\nconst ShortType = 1011;\nconst UnsignedShortType = 1012;\nconst IntType = 1013;\nconst UnsignedIntType = 1014;\nconst FloatType = 1015;\nconst HalfFloatType = 1016;\nconst UnsignedShort4444Type = 1017;\nconst UnsignedShort5551Type = 1018;\nconst UnsignedInt248Type = 1020;\nconst UnsignedInt5999Type = 35902;\nconst AlphaFormat = 1021;\nconst RGBFormat = 1022;\nconst RGBAFormat = 1023;\nconst LuminanceFormat = 1024;\nconst LuminanceAlphaFormat = 1025;\nconst DepthFormat = 1026;\nconst DepthStencilFormat = 1027;\nconst RedFormat = 1028;\nconst RedIntegerFormat = 1029;\nconst RGFormat = 1030;\nconst RGIntegerFormat = 1031;\nconst RGBIntegerFormat = 1032;\nconst RGBAIntegerFormat = 1033;\n\nconst RGB_S3TC_DXT1_Format = 33776;\nconst RGBA_S3TC_DXT1_Format = 33777;\nconst RGBA_S3TC_DXT3_Format = 33778;\nconst RGBA_S3TC_DXT5_Format = 33779;\nconst RGB_PVRTC_4BPPV1_Format = 35840;\nconst RGB_PVRTC_2BPPV1_Format = 35841;\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\nconst RGB_ETC1_Format = 36196;\nconst RGB_ETC2_Format = 37492;\nconst RGBA_ETC2_EAC_Format = 37496;\nconst RGBA_ASTC_4x4_Format = 37808;\nconst RGBA_ASTC_5x4_Format = 37809;\nconst RGBA_ASTC_5x5_Format = 37810;\nconst RGBA_ASTC_6x5_Format = 37811;\nconst RGBA_ASTC_6x6_Format = 37812;\nconst RGBA_ASTC_8x5_Format = 37813;\nconst RGBA_ASTC_8x6_Format = 37814;\nconst RGBA_ASTC_8x8_Format = 37815;\nconst RGBA_ASTC_10x5_Format = 37816;\nconst RGBA_ASTC_10x6_Format = 37817;\nconst RGBA_ASTC_10x8_Format = 37818;\nconst RGBA_ASTC_10x10_Format = 37819;\nconst RGBA_ASTC_12x10_Format = 37820;\nconst RGBA_ASTC_12x12_Format = 37821;\nconst RGBA_BPTC_Format = 36492;\nconst RGB_BPTC_SIGNED_Format = 36494;\nconst RGB_BPTC_UNSIGNED_Format = 36495;\nconst RED_RGTC1_Format = 36283;\nconst SIGNED_RED_RGTC1_Format = 36284;\nconst RED_GREEN_RGTC2_Format = 36285;\nconst SIGNED_RED_GREEN_RGTC2_Format = 36286;\nconst LoopOnce = 2200;\nconst LoopRepeat = 2201;\nconst LoopPingPong = 2202;\nconst InterpolateDiscrete = 2300;\nconst InterpolateLinear = 2301;\nconst InterpolateSmooth = 2302;\nconst ZeroCurvatureEnding = 2400;\nconst ZeroSlopeEnding = 2401;\nconst WrapAroundEnding = 2402;\nconst NormalAnimationBlendMode = 2500;\nconst AdditiveAnimationBlendMode = 2501;\nconst TrianglesDrawMode = 0;\nconst TriangleStripDrawMode = 1;\nconst TriangleFanDrawMode = 2;\nconst BasicDepthPacking = 3200;\nconst RGBADepthPacking = 3201;\nconst RGBDepthPacking = 3202;\nconst RGDepthPacking = 3203;\nconst TangentSpaceNormalMap = 0;\nconst ObjectSpaceNormalMap = 1;\n\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\nconst NoColorSpace = '';\nconst SRGBColorSpace = 'srgb';\nconst LinearSRGBColorSpace = 'srgb-linear';\n\nconst LinearTransfer = 'linear';\nconst SRGBTransfer = 'srgb';\n\nconst ZeroStencilOp = 0;\nconst KeepStencilOp = 7680;\nconst ReplaceStencilOp = 7681;\nconst IncrementStencilOp = 7682;\nconst DecrementStencilOp = 7683;\nconst IncrementWrapStencilOp = 34055;\nconst DecrementWrapStencilOp = 34056;\nconst InvertStencilOp = 5386;\n\nconst NeverStencilFunc = 512;\nconst LessStencilFunc = 513;\nconst EqualStencilFunc = 514;\nconst LessEqualStencilFunc = 515;\nconst GreaterStencilFunc = 516;\nconst NotEqualStencilFunc = 517;\nconst GreaterEqualStencilFunc = 518;\nconst AlwaysStencilFunc = 519;\n\nconst NeverCompare = 512;\nconst LessCompare = 513;\nconst EqualCompare = 514;\nconst LessEqualCompare = 515;\nconst GreaterCompare = 516;\nconst NotEqualCompare = 517;\nconst GreaterEqualCompare = 518;\nconst AlwaysCompare = 519;\n\nconst StaticDrawUsage = 35044;\nconst DynamicDrawUsage = 35048;\nconst StreamDrawUsage = 35040;\nconst StaticReadUsage = 35045;\nconst DynamicReadUsage = 35049;\nconst StreamReadUsage = 35041;\nconst StaticCopyUsage = 35046;\nconst DynamicCopyUsage = 35050;\nconst StreamCopyUsage = 35042;\n\nconst GLSL1 = '100';\nconst GLSL3 = '300 es';\n\nconst WebGLCoordinateSystem = 2000;\nconst WebGPUCoordinateSystem = 2001;\n\nconst TimestampQuery = {\n\tCOMPUTE: 'compute',\n\tRENDER: 'render'\n};\n\n/**\n * This modules allows to dispatch event objects on custom JavaScript objects.\n *\n * Main repository: [eventdispatcher.js]{@link https://github.com/mrdoob/eventdispatcher.js/}\n *\n * Code Example:\n * ```js\n * class Car extends EventDispatcher {\n * \tstart() {\n *\t\tthis.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );\n *\t}\n *};\n *\n * // Using events with the custom object\n * const car = new Car();\n * car.addEventListener( 'start', function ( event ) {\n * \talert( event.message );\n * } );\n *\n * car.start();\n * ```\n */\nclass EventDispatcher {\n\n\t/**\n\t * Adds the given event listener to the given event type.\n\t *\n\t * @param {string} type - The type of event to listen to.\n\t * @param {Function} listener - The function that gets called when the event is fired.\n\t */\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === -1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns `true` if the given event listener has been added to the given event type.\n\t *\n\t * @param {string} type - The type of event.\n\t * @param {Function} listener - The listener to check.\n\t * @return {boolean} Whether the given event listener has been added to the given event type.\n\t */\n\thasEventListener( type, listener ) {\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners === undefined ) return false;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== -1;\n\n\t}\n\n\t/**\n\t * Removes the given event listener from the given event type.\n\t *\n\t * @param {string} type - The type of event.\n\t * @param {Function} listener - The listener to remove.\n\t */\n\tremoveEventListener( type, listener ) {\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners === undefined ) return;\n\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== -1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Dispatches an event object.\n\t *\n\t * @param {Object} event - The event that gets fired.\n\t */\n\tdispatchEvent( event ) {\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners === undefined ) return;\n\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n/**\n * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n * (universally unique identifier).\n *\n * @return {string} The UUID.\n */\nfunction generateUUID() {\n\n\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\n/**\n * Clamps the given value between min and max.\n *\n * @param {number} value - The value to clamp.\n * @param {number} min - The min value.\n * @param {number} max - The max value.\n * @return {number} The clamped value.\n */\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n/**\n * Computes the Euclidean modulo of the given parameters that\n * is `( ( n % m ) + m ) % m`.\n *\n * @param {number} n - The first parameter.\n * @param {number} m - The second parameter.\n * @return {number} The Euclidean modulo.\n */\nfunction euclideanModulo( n, m ) {\n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n/**\n * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n * for the given value.\n *\n * @param {number} x - The value to be mapped.\n * @param {number} a1 - Minimum value for range A.\n * @param {number} a2 - Maximum value for range A.\n * @param {number} b1 - Minimum value for range B.\n * @param {number} b2 - Maximum value for range B.\n * @return {number} The mapped value.\n */\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n/**\n * Returns the percentage in the closed interval `[0, 1]` of the given value\n * between the start and end point.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} value - A value between start and end.\n * @return {number} The interpolation factor.\n */\nfunction inverseLerp( x, y, value ) {\n\n\t// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n/**\n * Returns a value linearly interpolated from two known points based on the given interval -\n * `t = 0` will return `x` and `t = 1` will return `y`.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n * @return {number} The interpolated value.\n */\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n/**\n * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n * time to maintain frame rate independent movement. For details, see\n * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n *\n * @param {number} x - The current point.\n * @param {number} y - The target point.\n * @param {number} lambda - A higher lambda value will make the movement more sudden,\n * and a lower value will make the movement more gradual.\n * @param {number} dt - Delta time in seconds.\n * @return {number} The interpolated value.\n */\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n/**\n * Returns a value that alternates between `0` and the given `length` parameter.\n *\n * @param {number} x - The value to pingpong.\n * @param {number} [length=1] - The positive value the function will pingpong to.\n * @return {number} The alternated value.\n */\nfunction pingpong( x, length = 1 ) {\n\n\t// https://www.desmos.com/calculator/vcsjnyz7x4\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n/**\n * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n * the `min` and `max`.\n *\n * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\n/**\n * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n/**\n * Returns a random integer from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random integer.\n */\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n/**\n * Returns a random float from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random float.\n */\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n/**\n * Returns a random integer from `<-range/2, range/2>` interval.\n *\n * @param {number} range - Defines the value range.\n * @return {number} A random float.\n */\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n/**\n * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n *\n * @param {number} [s] - The integer seed.\n * @return {number} A random float.\n */\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} degrees - A value in degrees.\n * @return {number} The converted value in radians.\n */\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\n/**\n * Converts radians to degrees.\n *\n * @param {number} radians - A value in radians.\n * @return {number} The converted value in degrees.\n */\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\n/**\n * Returns `true` if the given number is a power of two.\n *\n * @param {number} value - The value to check.\n * @return {boolean} Whether the given number is a power of two or not.\n */\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\n/**\n * Returns the smallest power of two that is greater than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The smallest power of two that is greater than or equal to the given number.\n */\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\n/**\n * Returns the largest power of two that is less than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The largest power of two that is less than or equal to the given number.\n */\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\n/**\n * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n * defined by the given angles and order.\n *\n * Rotations are applied to the axes in the order specified by order:\n * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n *\n * @param {Quaternion} q - The quaternion to set.\n * @param {number} a - The rotation applied to the first axis, in radians.\n * @param {number} b - The rotation applied to the second axis, in radians.\n * @param {number} c - The rotation applied to the third axis, in radians.\n * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n */\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\n/**\n * Denormalizes the given value according to the given typed array.\n *\n * @param {number} value - The value to denormalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The denormalize (float) value in the range `[0,1]`.\n */\nfunction denormalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn value / 4294967295.0;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.max( value / 2147483647.0, -1 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, -1 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, -1 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\n/**\n * Normalizes the given value according to the given typed array.\n *\n * @param {number} value - The float value in the range `[0,1]` to normalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The normalize value.\n */\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn Math.round( value * 4294967295.0 );\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.round( value * 2147483647.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nconst MathUtils = {\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\tgenerateUUID: generateUUID,\n\tclamp: clamp,\n\teuclideanModulo: euclideanModulo,\n\tmapLinear: mapLinear,\n\tinverseLerp: inverseLerp,\n\tlerp: lerp,\n\tdamp: damp,\n\tpingpong: pingpong,\n\tsmoothstep: smoothstep,\n\tsmootherstep: smootherstep,\n\trandInt: randInt,\n\trandFloat: randFloat,\n\trandFloatSpread: randFloatSpread,\n\tseededRandom: seededRandom,\n\tdegToRad: degToRad,\n\tradToDeg: radToDeg,\n\tisPowerOfTwo: isPowerOfTwo,\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\n\tnormalize: normalize,\n\tdenormalize: denormalize\n};\n\n/**\n * Class representing a 2D vector. A 2D vector is an ordered pair of numbers\n * (labeled x and y), which can be used to represent a number of things, such as:\n *\n * - A point in 2D space (i.e. a position on a plane).\n * - A direction and length across a plane. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0)` to `(x, y)`\n * and the direction is also measured from `(0, 0)` towards `(x, y)`.\n * - Any arbitrary ordered pair of numbers.\n *\n * There are other things a 2D vector can be used to represent, such as\n * momentum vectors, complex numbers and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector2( 0, 1 );\n *\n * //no arguments; will be initialised to (0, 0)\n * const b = new THREE.Vector2( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector2 {\n\n\t/**\n\t * Constructs a new 2D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t */\n\tconstructor( x = 0, y = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector2.prototype.isVector2 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector2#x}.\n\t *\n\t * @type {number}\n\t */\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector2#y}.\n\t *\n\t * @type {number}\n\t */\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n\t * @param {number} value - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to copy.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to add.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector2} a - The first vector.\n\t * @param {Vector2} b - The second vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector2} v - The vector to subtract.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector2} a - The first vector.\n\t * @param {Vector2} b - The second vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to multiply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector2} v - The vector to divide.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * Multiplies this vector (with an implicit 1 as the 3rd component) by\n\t * the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to apply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is greater than the given vector's x or y\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is less than the given vector's x or y\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is greater than the max vector's x or y\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x or y value is less than the min vector's x or y value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector2} min - The minimum x and y values.\n\t * @param {Vector2} max - The maximum x and y values in the desired range.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x or y values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x and y = -y.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the cross product with.\n\t * @return {number} The result of the cross product.\n\t */\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Computes the angle in radians of this vector with respect to the positive x-axis.\n\t *\n\t * @return {number} The angle in radians.\n\t */\n\tangle() {\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\t/**\n\t * Returns the angle between the given vector and this instance in radians.\n\t *\n\t * @param {Vector2} v - The vector to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, -1, 1 ) );\n\n\t}\n\n\t/**\n\t * Computes the distance from the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\t/**\n\t * Computes the squared distance from the given vector to this instance.\n\t * If you are just comparing the distance with another distance, you should compare\n\t * the distance squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @param {Vector2} v - The vector to compute the squared distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\t/**\n\t * Computes the Manhattan distance from the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the Manhattan distance to.\n\t * @return {number} The Manhattan distance.\n\t */\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector2} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector2} v1 - The first vector.\n\t * @param {Vector2} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector2} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]` and y\n\t * value to be `array[ offset + 1 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates this vector around the given center by the given angle.\n\t *\n\t * @param {Vector2} center - The point around which to rotate.\n\t * @param {number} angle - The angle to rotate, in radians.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\n/**\n * Represents a 3x3 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix();\n * m.set( 11, 12, 13,\n *        21, 22, 23,\n *        31, 32, 33 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31,\n *                12, 22, 32,\n *                13, 23, 33 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix3 {\n\n\t/**\n\t * Constructs a new 3x3 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t */\n\tconstructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tMatrix3.prototype.isMatrix3 = true;\n\n\t\t/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the 3x3 identity matrix.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given matrix to this instance.\n\t *\n\t * @param {Matrix3} m - The matrix to copy.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the basis of this matrix into the three axis vectors provided.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Post-multiplies this matrix by the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to multiply with.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this matrix by the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to multiply with.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\t/**\n\t * Multiples the given 3x3 matrices and stores the result\n\t * in this matrix.\n\t *\n\t * @param {Matrix3} a - The first matrix.\n\t * @param {Matrix3} b - The second matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies every component of the matrix by the given scalar.\n\t *\n\t * @param {number} s - The scalar.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes and returns the determinant of this matrix.\n\t *\n\t * @return {number} The determinant.\n\t */\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\t/**\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\n\t * a zero matrix instead.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Transposes this matrix in place.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the normal matrix which is the inverse transpose of the upper\n\t * left 3x3 portion of the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} matrix4 - The 4x4 matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\t/**\n\t * Transposes this matrix into the supplied array, and returns itself unchanged.\n\t *\n\t * @param {Array<number>} r - An array to store the transposed matrix elements.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the UV transform matrix from offset, repeat, rotation, and center.\n\t *\n\t * @param {number} tx - Offset x.\n\t * @param {number} ty - Offset y.\n\t * @param {number} sx - Repeat x.\n\t * @param {number} sy - Repeat y.\n\t * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.\n\t * @param {number} cx - Center x of rotation.\n\t * @param {number} cy - Center y of rotation\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Scales this matrix with the given scalar values.\n\t *\n\t * @param {number} sx - The amount to scale in the X axis.\n\t * @param {number} sy - The amount to scale in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tscale( sx, sy ) {\n\n\t\tthis.premultiply( _m3.makeScale( sx, sy ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates this matrix by the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\trotate( theta ) {\n\n\t\tthis.premultiply( _m3.makeRotation( - theta ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates this matrix by the given scalar values.\n\t *\n\t * @param {number} tx - The amount to translate in the X axis.\n\t * @param {number} ty - The amount to translate in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\ttranslate( tx, ty ) {\n\n\t\tthis.premultiply( _m3.makeTranslation( tx, ty ) );\n\n\t\treturn this;\n\n\t}\n\n\t// for 2D Transforms\n\n\t/**\n\t * Sets this matrix as a 2D translation transform.\n\t *\n\t * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.\n\t * @param {number} y - The amount to translate in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmakeTranslation( x, y ) {\n\n\t\tif ( x.isVector2 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, x.x,\n\t\t\t\t0, 1, x.y,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, x,\n\t\t\t\t0, 1, y,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a 2D rotational transformation.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmakeRotation( theta ) {\n\n\t\t// counterclockwise\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0,\n\t\t\ts, c, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a 2D scale transform.\n\t *\n\t * @param {number} x - The amount to scale in the X axis.\n\t * @param {number} y - The amount to scale in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmakeScale( x, y ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0,\n\t\t\t0, y, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this matrix is equal with the given one.\n\t *\n\t * @param {Matrix3} matrix - The matrix to test for equality.\n\t * @return {boolean} Whether this matrix is equal with the given one.\n\t */\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the elements of this matrix to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The matrix elements in column-major order.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Returns a matrix with copied values from this instance.\n\t *\n\t * @return {Matrix3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nconst _m3 = /*@__PURE__*/ new Matrix3();\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n\n\t}\n\n\treturn false;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nconst _cache = {};\n\nfunction warnOnce( message ) {\n\n\tif ( message in _cache ) return;\n\n\t_cache[ message ] = true;\n\n\tconsole.warn( message );\n\n}\n\nfunction probeAsync( gl, sync, interval ) {\n\n\treturn new Promise( function ( resolve, reject ) {\n\n\t\tfunction probe() {\n\n\t\t\tswitch ( gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 ) ) {\n\n\t\t\t\tcase gl.WAIT_FAILED:\n\t\t\t\t\treject();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.TIMEOUT_EXPIRED:\n\t\t\t\t\tsetTimeout( probe, interval );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tresolve();\n\n\t\t\t}\n\n\t\t}\n\n\t\tsetTimeout( probe, interval );\n\n\t} );\n\n}\n\nfunction toNormalizedProjectionMatrix( projectionMatrix ) {\n\n\tconst m = projectionMatrix.elements;\n\n\t// Convert [-1, 1] to [0, 1] projection matrix\n\tm[ 2 ] = 0.5 * m[ 2 ] + 0.5 * m[ 3 ];\n\tm[ 6 ] = 0.5 * m[ 6 ] + 0.5 * m[ 7 ];\n\tm[ 10 ] = 0.5 * m[ 10 ] + 0.5 * m[ 11 ];\n\tm[ 14 ] = 0.5 * m[ 14 ] + 0.5 * m[ 15 ];\n\n}\n\nfunction toReversedProjectionMatrix( projectionMatrix ) {\n\n\tconst m = projectionMatrix.elements;\n\tconst isPerspectiveMatrix = m[ 11 ] === -1;\n\n\t// Reverse [0, 1] projection matrix\n\tif ( isPerspectiveMatrix ) {\n\n\t\tm[ 10 ] = - m[ 10 ] - 1;\n\t\tm[ 14 ] = - m[ 14 ];\n\n\t} else {\n\n\t\tm[ 10 ] = - m[ 10 ];\n\t\tm[ 14 ] = - m[ 14 ] + 1;\n\n\t}\n\n}\n\nconst LINEAR_REC709_TO_XYZ = /*@__PURE__*/ new Matrix3().set(\n\t0.4123908, 0.3575843, 0.1804808,\n\t0.2126390, 0.7151687, 0.0721923,\n\t0.0193308, 0.1191948, 0.9505322\n);\n\nconst XYZ_TO_LINEAR_REC709 = /*@__PURE__*/ new Matrix3().set(\n\t3.2409699, -1.5373832, -0.4986108,\n\t-0.9692436, 1.8759675, 0.0415551,\n\t0.0556301, -0.203977, 1.0569715\n);\n\nfunction createColorManagement() {\n\n\tconst ColorManagement = {\n\n\t\tenabled: true,\n\n\t\tworkingColorSpace: LinearSRGBColorSpace,\n\n\t\t/**\n\t\t * Implementations of supported color spaces.\n\t\t *\n\t\t * Required:\n\t\t *\t- primaries: chromaticity coordinates [ rx ry gx gy bx by ]\n\t\t *\t- whitePoint: reference white [ x y ]\n\t\t *\t- transfer: transfer function (pre-defined)\n\t\t *\t- toXYZ: Matrix3 RGB to XYZ transform\n\t\t *\t- fromXYZ: Matrix3 XYZ to RGB transform\n\t\t *\t- luminanceCoefficients: RGB luminance coefficients\n\t\t *\n\t\t * Optional:\n\t\t *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }\n\t\t *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }\n\t\t *\n\t\t * Reference:\n\t\t * - https://www.russellcottrell.com/photo/matrixCalculator.htm\n\t\t */\n\t\tspaces: {},\n\n\t\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\n\n\t\t\tif ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\n\n\t\t\t\treturn color;\n\n\t\t\t}\n\n\t\t\tif ( this.spaces[ sourceColorSpace ].transfer === SRGBTransfer ) {\n\n\t\t\t\tcolor.r = SRGBToLinear( color.r );\n\t\t\t\tcolor.g = SRGBToLinear( color.g );\n\t\t\t\tcolor.b = SRGBToLinear( color.b );\n\n\t\t\t}\n\n\t\t\tif ( this.spaces[ sourceColorSpace ].primaries !== this.spaces[ targetColorSpace ].primaries ) {\n\n\t\t\t\tcolor.applyMatrix3( this.spaces[ sourceColorSpace ].toXYZ );\n\t\t\t\tcolor.applyMatrix3( this.spaces[ targetColorSpace ].fromXYZ );\n\n\t\t\t}\n\n\t\t\tif ( this.spaces[ targetColorSpace ].transfer === SRGBTransfer ) {\n\n\t\t\t\tcolor.r = LinearToSRGB( color.r );\n\t\t\t\tcolor.g = LinearToSRGB( color.g );\n\t\t\t\tcolor.b = LinearToSRGB( color.b );\n\n\t\t\t}\n\n\t\t\treturn color;\n\n\t\t},\n\n\t\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\n\n\t\t\treturn this.convert( color, this.workingColorSpace, targetColorSpace );\n\n\t\t},\n\n\t\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\n\n\t\t\treturn this.convert( color, sourceColorSpace, this.workingColorSpace );\n\n\t\t},\n\n\t\tgetPrimaries: function ( colorSpace ) {\n\n\t\t\treturn this.spaces[ colorSpace ].primaries;\n\n\t\t},\n\n\t\tgetTransfer: function ( colorSpace ) {\n\n\t\t\tif ( colorSpace === NoColorSpace ) return LinearTransfer;\n\n\t\t\treturn this.spaces[ colorSpace ].transfer;\n\n\t\t},\n\n\t\tgetLuminanceCoefficients: function ( target, colorSpace = this.workingColorSpace ) {\n\n\t\t\treturn target.fromArray( this.spaces[ colorSpace ].luminanceCoefficients );\n\n\t\t},\n\n\t\tdefine: function ( colorSpaces ) {\n\n\t\t\tObject.assign( this.spaces, colorSpaces );\n\n\t\t},\n\n\t\t// Internal APIs\n\n\t\t_getMatrix: function ( targetMatrix, sourceColorSpace, targetColorSpace ) {\n\n\t\t\treturn targetMatrix\n\t\t\t\t.copy( this.spaces[ sourceColorSpace ].toXYZ )\n\t\t\t\t.multiply( this.spaces[ targetColorSpace ].fromXYZ );\n\n\t\t},\n\n\t\t_getDrawingBufferColorSpace: function ( colorSpace ) {\n\n\t\t\treturn this.spaces[ colorSpace ].outputColorSpaceConfig.drawingBufferColorSpace;\n\n\t\t},\n\n\t\t_getUnpackColorSpace: function ( colorSpace = this.workingColorSpace ) {\n\n\t\t\treturn this.spaces[ colorSpace ].workingColorSpaceConfig.unpackColorSpace;\n\n\t\t}\n\n\t};\n\n\t/******************************************************************************\n\t * sRGB definitions\n\t */\n\n\tconst REC709_PRIMARIES = [ 0.640, 0.330, 0.300, 0.600, 0.150, 0.060 ];\n\tconst REC709_LUMINANCE_COEFFICIENTS = [ 0.2126, 0.7152, 0.0722 ];\n\tconst D65 = [ 0.3127, 0.3290 ];\n\n\tColorManagement.define( {\n\n\t\t[ LinearSRGBColorSpace ]: {\n\t\t\tprimaries: REC709_PRIMARIES,\n\t\t\twhitePoint: D65,\n\t\t\ttransfer: LinearTransfer,\n\t\t\ttoXYZ: LINEAR_REC709_TO_XYZ,\n\t\t\tfromXYZ: XYZ_TO_LINEAR_REC709,\n\t\t\tluminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n\t\t\tworkingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },\n\t\t\toutputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }\n\t\t},\n\n\t\t[ SRGBColorSpace ]: {\n\t\t\tprimaries: REC709_PRIMARIES,\n\t\t\twhitePoint: D65,\n\t\t\ttransfer: SRGBTransfer,\n\t\t\ttoXYZ: LINEAR_REC709_TO_XYZ,\n\t\t\tfromXYZ: XYZ_TO_LINEAR_REC709,\n\t\t\tluminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n\t\t\toutputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }\n\t\t},\n\n\t} );\n\n\treturn ColorManagement;\n\n}\n\nconst ColorManagement = /*@__PURE__*/ createColorManagement();\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\nlet _canvas;\n\n/**\n * A class containing utility functions for images.\n *\n * @hideconstructor\n */\nclass ImageUtils {\n\n\t/**\n\t * Returns a data URI containing a representation of the given image.\n\t *\n\t * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.\n\t * @return {string} The data URI.\n\t */\n\tstatic getDataURL( image ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement === 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\treturn canvas.toDataURL( 'image/png' );\n\n\t}\n\n\t/**\n\t * Converts the given sRGB image data to linear color space.\n\t *\n\t * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.\n\t * @return {HTMLCanvasElement|Object} The converted image.\n\t */\n\tstatic sRGBToLinear( image ) {\n\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\tconst canvas = createElementNS( 'canvas' );\n\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\n\t\t\tconst data = imageData.data;\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\n\n\t\t\t}\n\n\t\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\t\treturn canvas;\n\n\t\t} else if ( image.data ) {\n\n\t\t\tconst data = image.data.slice( 0 );\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\n\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assuming float\n\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\n\t\t\treturn image;\n\n\t\t}\n\n\t}\n\n}\n\nlet _sourceId = 0;\n\nclass Source {\n\n\tconstructor( data = null ) {\n\n\t\tthis.isSource = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _sourceId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.data = data;\n\t\tthis.dataReady = true;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.images[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\t\t\tuuid: this.uuid,\n\t\t\turl: ''\n\t\t};\n\n\t\tconst data = this.data;\n\n\t\tif ( data !== null ) {\n\n\t\t\tlet url;\n\n\t\t\tif ( Array.isArray( data ) ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\turl = [];\n\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// texture\n\n\t\t\t\turl = serializeImage( data );\n\n\t\t\t}\n\n\t\t\toutput.url = url;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.images[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.from( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nlet _textureId = 0;\n\n/**\n * Base class for all textures.\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments EventDispatcher\n */\nclass Texture extends EventDispatcher {\n\n\t/**\n\t * Constructs a new texture.\n\t *\n\t * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The min filter value.\n\t * @param {number} [type=UnsignedByteType] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The min filter value.\n\t * @param {string} [colorSpace=NoColorSpace] - The min filter value.\n\t */\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isTexture = true;\n\n\t\t/**\n\t\t * The ID of the texture.\n\t\t *\n\t\t * @name Texture#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _textureId ++ } );\n\n\t\t/**\n\t\t * The UUID of the material.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the material.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The data definition of a texture. A reference to the data source can be\n\t\t * shared across textures. This is often useful in context of spritesheets\n\t\t * where multiple textures render the same data but with different texture\n\t\t * transformations.\n\t\t *\n\t\t * @type {Source}\n\t\t */\n\t\tthis.source = new Source( image );\n\n\t\t/**\n\t\t * An array holding user-defined mipmaps.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.mipmaps = [];\n\n\t\t/**\n\t\t * How the texture is applied to the object. The value `UVMapping`\n\t\t * is the default, where texture or uv coordinates are used to apply the map.\n\t\t *\n\t\t * @type {(UVMapping|CubeReflectionMapping|CubeRefractionMapping|EquirectangularReflectionMapping|EquirectangularRefractionMapping|CubeUVReflectionMapping)}\n\t\t * @default UVMapping\n\t\t*/\n\t\tthis.mapping = mapping;\n\n\t\t/**\n\t\t * Lets you select the uv attribute to map the texture to. `0` for `uv`,\n\t\t * `1` for `uv1`, `2` for `uv2` and `3` for `uv3`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.channel = 0;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped horizontally and corresponds to\n\t\t * *U* in UV mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapS = wrapS;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped horizontally and corresponds to\n\t\t * *V* in UV mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapT = wrapT;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default LinearFilter\n\t\t */\n\t\tthis.magFilter = magFilter;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default LinearMipmapLinearFilter\n\t\t */\n\t\tthis.minFilter = minFilter;\n\n\t\t/**\n\t\t * The number of samples taken along the axis through the pixel that has the\n\t\t * highest density of texels. By default, this value is `1`. A higher value\n\t\t * gives a less blurry result than a basic mipmap, at the cost of more\n\t\t * texture samples being used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.anisotropy = anisotropy;\n\n\t\t/**\n\t\t * The format of the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default RGBAFormat\n\t\t */\n\t\tthis.format = format;\n\n\t\t/**\n\t\t * The default internal format is derived from {@link Texture#format} and {@link Texture#type} and\n\t\t * defines how the texture data is going to be stored on the GPU.\n\t\t *\n\t\t * This property allows to overwrite the default format.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.internalFormat = null;\n\n\t\t/**\n\t\t * The data type of the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default UnsignedByteType\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * How much a single repetition of the texture is offset from the beginning,\n\t\t * in each direction U and V. Typical range is `0.0` to `1.0`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0,0)\n\t\t */\n\t\tthis.offset = new Vector2( 0, 0 );\n\n\t\t/**\n\t\t * How many times the texture is repeated across the surface, in each\n\t\t * direction U and V. If repeat is set greater than `1` in either direction,\n\t\t * the corresponding wrap parameter should also be set to `RepeatWrapping`\n\t\t * or `MirroredRepeatWrapping` to achieve the desired tiling effect.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.repeat = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The point around which rotation occurs. A value of `(0.5, 0.5)` corresponds\n\t\t * to the center of the texture. Default is `(0, 0)`, the lower left.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0,0)\n\t\t */\n\t\tthis.center = new Vector2( 0, 0 );\n\n\t\t/**\n\t\t * How much the texture is rotated around the center point, in radians.\n\t\t * Positive values are counter-clockwise.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.rotation = 0;\n\n\t\t/**\n\t\t * Whether to update the texture's uv-transformation {@link Texture#matrix}\n\t\t * from the properties {@link Texture#offset}, {@link Texture#repeat},\n\t\t * {@link Texture#rotation}, and {@link Texture#center}.\n\t\t *\n\t\t * Set this to `false` if you are specifying the uv-transform matrix directly.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixAutoUpdate = true;\n\n\t\t/**\n\t\t * The uv-transformation matrix of the texture.\n\t\t *\n\t\t * @type {Matrix3}\n\t\t */\n\t\tthis.matrix = new Matrix3();\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Set this to `false` if you are creating mipmaps manually.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.generateMipmaps = true;\n\n\t\t/**\n\t\t * If set to `true`, the alpha channel, if present, is multiplied into the\n\t\t * color channels when the texture is uploaded to the GPU.\n\t\t *\n\t\t * Note that this property has no effect when using `ImageBitmap`. You need to\n\t\t * configure premultiply alpha on bitmap creation instead.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.premultiplyAlpha = false;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Note that this property has no effect when using `ImageBitmap`. You need to\n\t\t * configure the flip on bitmap creation instead.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.flipY = true;\n\n\t\t/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t * The allowable values are `1` (byte-alignment), `2` (rows aligned to even-numbered bytes),\n\t\t * `4` (word-alignment), and `8` (rows start on double-word boundaries).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 4\n\t\t */\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t/**\n\t\t * Textures containing color data should be annotated with `SRGBColorSpace` or `LinearSRGBColorSpace`.\n\t\t *\n\t\t * @type {string}\n\t\t * @default NoColorSpace\n\t\t */\n\t\tthis.colorSpace = colorSpace;\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the texture. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t\t/**\n\t\t * This starts at `0` and counts how many times {@link Texture#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * A callback function, called when the texture is updated (e.g., when\n\t\t * {@link Texture#needsUpdate} has been set to true and then the texture is used).\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis.onUpdate = null;\n\n\t\t/**\n\t\t * An optional back reference to the textures render target.\n\t\t *\n\t\t * @type {?(RenderTarget|WebGLRenderTarget)}\n\t\t * @default null\n\t\t */\n\t\tthis.renderTarget = null;\n\n\t\t/**\n\t\t * Indicates whether a texture belongs to a render target or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isRenderTargetTexture = false;\n\n\t\t/**\n\t\t * Indicates whether this texture should be processed by `PMREMGenerator` or not\n\t\t * (only relevant for render target textures).\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.pmremVersion = 0;\n\n\t}\n\n\t/**\n\t * The image object holding the texture data.\n\t *\n\t * @type {?Object}\n\t */\n\tget image() {\n\n\t\treturn this.source.data;\n\n\t}\n\n\tset image( value = null ) {\n\n\t\tthis.source.data = value;\n\n\t}\n\n\t/**\n\t * Updates the texture transformation matrix from the from the properties {@link Texture#offset},\n\t * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.\n\t */\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\t/**\n\t * Returns a new texture with copied values from this instance.\n\t *\n\t * @return {Texture} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given texture to this instance.\n\t *\n\t * @param {Texture} source - The texture to copy.\n\t * @return {Texture} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.source = source.source;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\t\tthis.channel = source.channel;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.colorSpace = source.colorSpace;\n\n\t\tthis.renderTarget = source.renderTarget;\n\t\tthis.isRenderTargetTexture = source.isRenderTargetTexture;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the texture into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized texture.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\timage: this.source.toJSON( meta ).uuid,\n\n\t\t\tmapping: this.mapping,\n\t\t\tchannel: this.channel,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\tinternalFormat: this.internalFormat,\n\t\t\ttype: this.type,\n\t\t\tcolorSpace: this.colorSpace,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tgenerateMipmaps: this.generateMipmaps,\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Texture#dispose\n\t */\n\tdispose() {\n\n\t\t/**\n\t\t * Fires when the texture has been disposed of.\n\t\t *\n\t\t * @event Texture#dispose\n\t\t * @type {Object}\n\t\t */\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Transforms the given uv vector with the textures uv transformation matrix.\n\t *\n\t * @param {Vector2} uv - The uv vector.\n\t * @return {Vector2} The transformed uv vector.\n\t */\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\t/**\n\t * Setting this property to `true` indicates the engine the texture\n\t * must be updated in the next render. This triggers a texture upload\n\t * to the GPU and ensures correct texture parameter configuration.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.version ++;\n\t\t\tthis.source.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setting this property to `true` indicates the engine the PMREM\n\t * must be regenerated.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsPMREMUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.pmremVersion ++;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * The default image for all textures.\n *\n * @static\n * @type {?Image}\n * @default null\n */\nTexture.DEFAULT_IMAGE = null;\n\n/**\n * The default mapping for all textures.\n *\n * @static\n * @type {number}\n * @default UVMapping\n */\nTexture.DEFAULT_MAPPING = UVMapping;\n\n/**\n * The default anisotropy value for all textures.\n *\n * @static\n * @type {number}\n * @default 1\n */\nTexture.DEFAULT_ANISOTROPY = 1;\n\n/**\n * Class representing a 4D vector. A 4D vector is an ordered quadruplet of numbers\n * (labeled x, y, z and w), which can be used to represent a number of things, such as:\n *\n * - A point in 4D space.\n * - A direction and length in 4D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0, 0)` to `(x, y, z, w)`\n * and the direction is also measured from `(0, 0, 0, 0)` towards `(x, y, z, w)`.\n * - Any arbitrary ordered quadruplet of numbers.\n *\n * There are other things a 4D vector can be used to represent, however these\n * are the most common uses in *three.js*.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector4( 0, 1, 0, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0, 1)\n * const b = new THREE.Vector4( );\n *\n * const d = a.dot( b );\n * ```\n */\nclass Vector4 {\n\n\t/**\n\t * Constructs a new 4D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t * @param {number} [z=0] - The z value of this vector.\n\t * @param {number} [w=1] - The w value of this vector.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector4.prototype.isVector4 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t\t/**\n\t\t * The z value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.z = z;\n\n\t\t/**\n\t\t * The w value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.w = w;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector4#z}.\n\t *\n\t * @type {number}\n\t */\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector4#w}.\n\t *\n\t * @type {number}\n\t */\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @param {number} z - The value of the z component.\n\t * @param {number} w - The value of the w component.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's z component to the given value\n\t *\n\t * @param {number} z - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's w component to the given value\n\t *\n\t * @param {number} w - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n\t * `2` equals to z, `3` equals to w.\n\t * @param {number} value - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n\t * `2` equals to z, `3` equals to w.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector4} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector3|Vector4} v - The vector to copy.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector4} v - The vector to add.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector4} a - The first vector.\n\t * @param {Vector4} b - The second vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector4} v - The vector to subtract.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector4} a - The first vector.\n\t * @param {Vector4} b - The second vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector4} v - The vector to multiply.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this vector with the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector4} v - The vector to divide.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\t\tthis.w /= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * Sets the x, y and z components of this\n\t * vector to the quaternion's axis and w to the angle.\n\t *\n\t * @param {Quaternion} q - The Quaternion to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y and z components of this\n\t * vector to the axis of rotation and w to the angle.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the position elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\t\tthis.w = e[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is less than the given vector's x, y, z or w\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector4} min - The minimum x, y and z values.\n\t * @param {Vector4} max - The maximum x, y and z values in the desired range.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\t\tthis.z = clamp( this.z, min.z, max.z );\n\t\tthis.w = clamp( this.w, min.w, max.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x, y, z or w values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\t\tthis.z = clamp( this.z, minVal, maxVal );\n\t\tthis.w = clamp( this.w, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\t\tthis.z = Math.trunc( this.z );\n\t\tthis.w = Math.trunc( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector4} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector4} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector4} v1 - The first vector.\n\t * @param {Vector4} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector4} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,\n\t * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nclass RenderTarget extends EventDispatcher {\n\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.isRenderTarget = true;\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = 1;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tconst image = { width: width, height: height, depth: 1 };\n\n\t\toptions = Object.assign( {\n\t\t\tgenerateMipmaps: false,\n\t\t\tinternalFormat: null,\n\t\t\tminFilter: LinearFilter,\n\t\t\tdepthBuffer: true,\n\t\t\tstencilBuffer: false,\n\t\t\tresolveDepthBuffer: true,\n\t\t\tresolveStencilBuffer: true,\n\t\t\tdepthTexture: null,\n\t\t\tsamples: 0,\n\t\t\tcount: 1\n\t\t}, options );\n\n\t\tconst texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\n\t\ttexture.flipY = false;\n\t\ttexture.generateMipmaps = options.generateMipmaps;\n\t\ttexture.internalFormat = options.internalFormat;\n\n\t\tthis.textures = [];\n\n\t\tconst count = options.count;\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.textures[ i ] = texture.clone();\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\n\t\t\tthis.textures[ i ].renderTarget = this;\n\n\t\t}\n\n\t\tthis.depthBuffer = options.depthBuffer;\n\t\tthis.stencilBuffer = options.stencilBuffer;\n\n\t\tthis.resolveDepthBuffer = options.resolveDepthBuffer;\n\t\tthis.resolveStencilBuffer = options.resolveStencilBuffer;\n\n\t\tthis._depthTexture = null;\n\t\tthis.depthTexture = options.depthTexture;\n\n\t\tthis.samples = options.samples;\n\n\t}\n\n\tget texture() {\n\n\t\treturn this.textures[ 0 ];\n\n\t}\n\n\tset texture( value ) {\n\n\t\tthis.textures[ 0 ] = value;\n\n\t}\n\n\tset depthTexture( current ) {\n\n\t\tif ( this._depthTexture !== null ) this._depthTexture.renderTarget = null;\n\t\tif ( current !== null ) current.renderTarget = this;\n\n\t\tthis._depthTexture = current;\n\n\t}\n\n\tget depthTexture() {\n\n\t\treturn this._depthTexture;\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.textures.length; i < il; i ++ ) {\n\n\t\t\t\tthis.textures[ i ].image.width = width;\n\t\t\t\tthis.textures[ i ].image.height = height;\n\t\t\t\tthis.textures[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.scissor.copy( source.scissor );\n\t\tthis.scissorTest = source.scissorTest;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.textures.length = 0;\n\n\t\tfor ( let i = 0, il = source.textures.length; i < il; i ++ ) {\n\n\t\t\tthis.textures[ i ] = source.textures[ i ].clone();\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\n\t\t\tthis.textures[ i ].renderTarget = this;\n\n\t\t\t// ensure image object is not shared, see #20328\n\n\t\t\tconst image = Object.assign( {}, source.textures[ i ].image );\n\t\t\tthis.textures[ i ].source = new Source( image );\n\n\t\t}\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tthis.resolveDepthBuffer = source.resolveDepthBuffer;\n\t\tthis.resolveStencilBuffer = source.resolveStencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nclass WebGLRenderTarget extends RenderTarget {\n\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isWebGLRenderTarget = true;\n\n\t}\n\n}\n\nclass DataArrayTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\tthis.isDataArrayTexture = true;\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.layerUpdates = new Set();\n\n\t}\n\n\taddLayerUpdate( layerIndex ) {\n\n\t\tthis.layerUpdates.add( layerIndex );\n\n\t}\n\n\tclearLayerUpdates() {\n\n\t\tthis.layerUpdates.clear();\n\n\t}\n\n}\n\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isWebGLArrayRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass Data3DTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in Data3DTexture directly.\n\t\t//\n\t\t//\tconst texture = new THREE.Data3DTexture( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\tthis.isData3DTexture = true;\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isWebGL3DRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\n/**\n * Class for representing a Quaternion. Quaternions are used in three.js to represent rotations.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n *\n * Note that three.js expects Quaternions to be normalized.\n * ```js\n * const quaternion = new THREE.Quaternion();\n * quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );\n *\n * const vector = new THREE.Vector3( 1, 0, 0 );\n * vector.applyQuaternion( quaternion );\n * ```\n */\nclass Quaternion {\n\n\t/**\n\t * Constructs a new quaternion.\n\t *\n\t * @param {number} [x=0] - The x value of this quaternion.\n\t * @param {number} [y=0] - The y value of this quaternion.\n\t * @param {number} [z=0] - The z value of this quaternion.\n\t * @param {number} [w=1] - The w value of this quaternion.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuaternion = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\t/**\n\t * Interpolates between two quaternions via SLERP. This implementation assumes the\n\t * quaternion data are managed  in flat arrays.\n\t *\n\t * @param {Array<number>} dst - The destination array.\n\t * @param {number} dstOffset - An offset into the destination array.\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\n\t * @param {number} srcOffset0 - An offset into the first source array.\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\n\t * @param {number} srcOffset1 - An offset into the second source array.\n\t * @param {number} t - The interpolation factor in the range `[0,1]`.\n\t * @see {@link Quaternion#slerp}\n\t */\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : -1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\t/**\n\t * Multiplies two quaternions. This implementation assumes the quaternion data are managed\n\t * in flat arrays.\n\t *\n\t * @param {Array<number>} dst - The destination array.\n\t * @param {number} dstOffset - An offset into the destination array.\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\n\t * @param {number} srcOffset0 - An offset into the first source array.\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\n\t * @param {number} srcOffset1 - An offset into the second source array.\n\t * @return {Array<number>} The destination array.\n\t * @see {@link Quaternion#multiplyQuaternions}.\n\t */\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\t/**\n\t * The x value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The y value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The z value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The w value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 1\n\t */\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * Sets the quaternion components.\n\t *\n\t * @param {number} x - The x value of this quaternion.\n\t * @param {number} y - The y value of this quaternion.\n\t * @param {number} z - The z value of this quaternion.\n\t * @param {number} w - The w value of this quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new quaternion with copied values from this instance.\n\t *\n\t * @return {Quaternion} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\t/**\n\t * Copies the values of the given quaternion to this instance.\n\t *\n\t * @param {Quaternion} quaternion - The quaternion to copy.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the rotation specified by the given\n\t * Euler angles.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromEuler( euler, update = true ) {\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the given axis and angle.\n\t *\n\t * @param {Vector3} axis - The normalized axis.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the given rotation matrix.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion to the rotation required to rotate the direction vector\n\t * `vFrom` to the direction vector `vTo`.\n\t *\n\t * @param {Vector3} vFrom - The first (normalized) direction vector.\n\t * @param {Vector3} vTo - The second (normalized) direction vector.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\t/**\n\t * Returns the angle between this quaternion and the given one in radians.\n\t *\n\t * @param {Quaternion} q - The quaternion to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), -1, 1 ) ) );\n\n\t}\n\n\t/**\n\t * Rotates this quaternion by a given angular step to the given quaternion.\n\t * The method ensures that the final quaternion will not overshoot `q`.\n\t *\n\t * @param {Quaternion} q - The target quaternion.\n\t * @param {number} step - The angular step in radians.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion to the identity quaternion; that is, to the\n\t * quaternion that represents \"no rotation\".\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\t/**\n\t * Inverts this quaternion via {@link Quaternion#conjugate}. The\n\t * quaternion is assumed to have unit length.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tinvert() {\n\n\t\treturn this.conjugate();\n\n\t}\n\n\t/**\n\t * Returns the rotational conjugate of this quaternion. The conjugate of a\n\t * quaternion represents the same rotation in the opposite direction about\n\t * the rotational axis.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tconjugate() {\n\n\t\tthis._x *= -1;\n\t\tthis._y *= -1;\n\t\tthis._z *= -1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of this quaternion and the given one.\n\t *\n\t * @param {Quaternion} v - The quaternion to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\t/**\n\t * Computes the squared Euclidean length (straight-line length) of this quaternion,\n\t * considered as a 4 dimensional vector. This can be useful if you are comparing the\n\t * lengths of two quaternions, as this is a slightly more efficient calculation than\n\t * {@link Quaternion#length}.\n\t *\n\t * @return {number} The squared Euclidean length.\n\t */\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\t/**\n\t * Computes the Euclidean length (straight-line length) of this quaternion,\n\t * considered as a 4 dimensional vector.\n\t *\n\t * @return {number} The Euclidean length.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\t/**\n\t * Normalizes this quaternion - that is, calculated the quaternion that performs\n\t * the same rotation as this one, but has a length equal to `1`.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this quaternion by the given one.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tmultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this quaternion by the given one.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\t/**\n\t * Multiplies the given quaternions and stores the result in this instance.\n\t *\n\t * @param {Quaternion} a - The first quaternion.\n\t * @param {Quaternion} b - The second quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs a spherical linear interpolation between quaternions.\n\t *\n\t * @param {Quaternion} qb - The target quaternion.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize(); // normalize calls _onChangeCallback()\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs a spherical linear interpolation between the given quaternions\n\t * and stores the result in this quaternion.\n\t *\n\t * @param {Quaternion} qa - The source quaternion.\n\t * @param {Quaternion} qb - The target quaternion.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\t/**\n\t * Sets this quaternion to a uniformly random, normalized quaternion.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\trandom() {\n\n\t\t// Ken Shoemake\n\t\t// Uniform random rotations\n\t\t// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\n\n\t\tconst theta1 = 2 * Math.PI * Math.random();\n\t\tconst theta2 = 2 * Math.PI * Math.random();\n\n\t\tconst x0 = Math.random();\n\t\tconst r1 = Math.sqrt( 1 - x0 );\n\t\tconst r2 = Math.sqrt( x0 );\n\n\t\treturn this.set(\n\t\t\tr1 * Math.sin( theta1 ),\n\t\t\tr1 * Math.cos( theta1 ),\n\t\t\tr2 * Math.sin( theta2 ),\n\t\t\tr2 * Math.cos( theta2 ),\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if this quaternion is equal with the given one.\n\t *\n\t * @param {Quaternion} quaternion - The quaternion to test for equality.\n\t * @return {boolean} Whether this quaternion is equal with the given one.\n\t */\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\t/**\n\t * Sets this quaternion's components from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the quaternion component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this quaternion to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the quaternion components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The quaternion components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this quaternion from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This methods defines the serialization result of this class. Returns the\n\t * numerical elements of this quaternion in an array of format `[x, y, z, w]`.\n\t *\n\t * @return {Array<number>} The serialized quaternion.\n\t */\n\ttoJSON() {\n\n\t\treturn this.toArray();\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._w;\n\n\t}\n\n}\n\n/**\n * Class representing a 3D vector. A 3D vector is an ordered triplet of numbers\n * (labeled x, y and z), which can be used to represent a number of things, such as:\n *\n * - A point in 3D space.\n * - A direction and length in 3D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0)` to `(x, y, z)`\n * and the direction is also measured from `(0, 0, 0)` towards `(x, y, z)`.\n * - Any arbitrary ordered triplet of numbers.\n *\n * There are other things a 3D vector can be used to represent, such as\n * momentum vectors and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y, z)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector3( 0, 1, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0)\n * const b = new THREE.Vector3( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector3 {\n\n\t/**\n\t * Constructs a new 3D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t * @param {number} [z=0] - The z value of this vector.\n\t */\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector3.prototype.isVector3 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t\t/**\n\t\t * The z value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.z = z;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @param {number} z - The value of the z component.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's z component to the given value\n\t *\n\t * @param {number} z - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n\t * @param {number} value - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to copy.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to add.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector3|Vector4} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector3} v - The vector to subtract.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to multiply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given Euler rotation to this vector.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyEuler( euler ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\t/**\n\t * Applies a rotation specified by an axis and an angle to this vector.\n\t *\n\t * @param {Vector3} axis - A normalized vector representing the rotation axis.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\t/**\n\t * Multiplies this vector with the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this vector by the given normal matrix and normalizes\n\t * the result.\n\t *\n\t * @param {Matrix3} m - The normal matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\t/**\n\t * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and\n\t * divides by perspective.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given Quaternion to this vector.\n\t *\n\t * @param {Quaternion} q - The Quaternion.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyQuaternion( q ) {\n\n\t\t// quaternion q is assumed to have unit length\n\n\t\tconst vx = this.x, vy = this.y, vz = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// t = 2 * cross( q.xyz, v );\n\t\tconst tx = 2 * ( qy * vz - qz * vy );\n\t\tconst ty = 2 * ( qz * vx - qx * vz );\n\t\tconst tz = 2 * ( qx * vy - qy * vx );\n\n\t\t// v + q.w * t + cross( q.xyz, t );\n\t\tthis.x = vx + qw * tx + qy * tz - qz * ty;\n\t\tthis.y = vy + qw * ty + qz * tx - qx * tz;\n\t\tthis.z = vz + qw * tz + qx * ty - qy * tx;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Projects this vector from world space into the camera's normalized\n\t * device coordinate (NDC) space.\n\t *\n\t * @param {Camera} camera - The camera.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\t/**\n\t * Unprojects this vector from the camera's normalized device coordinate (NDC)\n\t * space into world space.\n\t *\n\t * @param {Camera} camera - The camera.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\t/**\n\t * Transforms the direction of this vector by a matrix (the upper left 3 x 3\n\t * subset of the given 4x4 matrix and then normalizes the result.\n\t *\n\t * @param {Matrix4} m - The matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector3} v - The vector to divide.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is greater than the given vector's x, y or z\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is less than the given vector's x, y or z\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is greater than the max vector's x, y or z\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x, y or z value is less than the min vector's x, y or z value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector3} min - The minimum x, y and z values.\n\t * @param {Vector3} max - The maximum x, y and z values in the desired range.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\t\tthis.z = clamp( this.z, min.z, max.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x, y or z values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\t\tthis.z = clamp( this.z, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\t\tthis.z = Math.trunc( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector3} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector3} v1 - The first vector.\n\t * @param {Vector3} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the cross product with.\n\t * @return {Vector3} The result of the cross product.\n\t */\n\tcross( v ) {\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vectors and stores the result\n\t * in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Projects this vector onto the given one.\n\t *\n\t * @param {Vector3} v - The vector to project to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\t/**\n\t * Projects this vector onto a plane by subtracting this\n\t * vector projected onto the plane's normal from this vector.\n\t *\n\t * @param {Vector3} planeNormal - The plane normal.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$c.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$c );\n\n\t}\n\n\t/**\n\t * Reflects this vector off a plane orthogonal to the given normal vector.\n\t *\n\t * @param {Vector3} normal - The (normalized) normal vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\treflect( normal ) {\n\n\t\treturn this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\t/**\n\t * Returns the angle between the given vector and this instance in radians.\n\t *\n\t * @param {Vector3} v - The vector to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, -1, 1 ) );\n\n\t}\n\n\t/**\n\t * Computes the distance from the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\t/**\n\t * Computes the squared distance from the given vector to this instance.\n\t * If you are just comparing the distance with another distance, you should compare\n\t * the distance squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @param {Vector3} v - The vector to compute the squared distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\t/**\n\t * Computes the Manhattan distance from the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the Manhattan distance to.\n\t * @return {number} The Manhattan distance.\n\t */\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given spherical coordinates.\n\t *\n\t * @param {Spherical} s - The spherical coordinates.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given spherical coordinates.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} phi - The phi angle in radians.\n\t * @param {number} theta - The theta angle in radians.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given cylindrical coordinates.\n\t *\n\t * @param {Cylindrical} c - The cylindrical coordinates.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given cylindrical coordinates.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} theta - The theta angle in radians.\n\t * @param {number} y - The y value.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the position elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the scale elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the specified matrix column.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @param {number} index - The column index.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the specified matrix column.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @param {number} index - The column index.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given Euler angles.\n\t *\n\t * @param {Euler} e - The Euler angles to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromEuler( e ) {\n\n\t\tthis.x = e._x;\n\t\tthis.y = e._y;\n\t\tthis.z = e._z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the RGB components of the\n\t * given color.\n\t *\n\t * @param {Color} c - The color to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromColor( c ) {\n\n\t\tthis.x = c.r;\n\t\tthis.y = c.g;\n\t\tthis.z = c.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector3} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`\n\t * and z value to be `array[ offset + 2 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this vector to a uniformly random point on a unit sphere.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\trandomDirection() {\n\n\t\t// https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst theta = Math.random() * Math.PI * 2;\n\t\tconst u = Math.random() * 2 - 1;\n\t\tconst c = Math.sqrt( 1 - u * u );\n\n\t\tthis.x = c * Math.cos( theta );\n\t\tthis.y = u;\n\t\tthis.z = c * Math.sin( theta );\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nconst _vector$c = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 3D space.\n */\nclass Box3 {\n\n\t/**\n\t * Constructs a new bounding box.\n\t *\n\t * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.\n\t * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n\t */\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBox3 = true;\n\n\t\t/**\n\t\t * The lower boundary of the box.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.min = min;\n\n\t\t/**\n\t\t * The upper boundary of the box.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.max = max;\n\n\t}\n\n\t/**\n\t * Sets the lower and upper boundaries of this box.\n\t * Please note that this method only copies the values from the given objects.\n\t *\n\t * @param {Vector3} min - The lower boundary of the box.\n\t * @param {Vector3} max - The upper boundary of the box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<number>} array - An array holding 3D position data.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromArray( array ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\tthis.expandByPoint( _vector$b.fromArray( array, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( _vector$b.fromBufferAttribute( attribute, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Centers this box on the given center vector and sets this box's width, height and\n\t * depth to the given size values.\n\t *\n\t * @param {Vector3} center - The center of the box.\n\t * @param {Vector3} size - The x, y and z dimensions of the box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the world-axis-aligned bounding box for the given 3D object\n\t * (including its children), accounting for the object's, and children's,\n\t * world transforms. The function may result in a larger box than strictly necessary.\n\t *\n\t * @param {Object3D} object - The 3D object to compute the bounding box for.\n\t * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest\n\t * world-axis-aligned bounding box at the expense of more computation.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\t/**\n\t * Returns a new box with copied values from this instance.\n\t *\n\t * @return {Box3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given box to this instance.\n\t *\n\t * @param {Box3} box - The box to copy.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Makes this box empty which means in encloses a zero space in 3D.\n\t *\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns true if this box includes zero points within its bounds.\n\t * Note that a box with equal lower and upper bounds still includes one\n\t * point, the one both bounds share.\n\t *\n\t * @return {boolean} Whether this box is empty or not.\n\t */\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\t/**\n\t * Returns the center point of this box.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Returns the dimensions of this box.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The size.\n\t */\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this box to include the given point.\n\t *\n\t * @param {Vector3} point - The point that should be included by the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands this box equilaterally by the given vector. The width of this\n\t * box will be expanded by the x component of the vector in both\n\t * directions. The height of this box will be expanded by the y component of\n\t * the vector in both directions. The depth of this box will be\n\t * expanded by the z component of the vector in both directions.\n\t *\n\t * @param {Vector3} vector - The vector that should expand the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands each dimension of the box by the given scalar. If negative, the\n\t * dimensions of the box will be contracted.\n\t *\n\t * @param {number} scalar - The scalar value that should expand the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this box to include the given 3D object and\n\t * its children, accounting for the object's, and children's, world\n\t * transforms. The function may result in a larger box than strictly\n\t * necessary (unless the precise parameter is set to true).\n\t *\n\t * @param {Object3D} object - The 3D object that should expand the bounding box.\n\t * @param {boolean} precise - If set to `true`, the method expands the bounding box\n\t * as little as necessary at the expense of more computation.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\t\t// precise AABB computation based on vertex data requires at least a position attribute.\n\t\t\t// instancing isn't supported so far and uses the normal (conservative) code path.\n\n\t\t\tif ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {\n\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tif ( object.isMesh === true ) {\n\n\t\t\t\t\t\tobject.getVertexPosition( i, _vector$b );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_vector$b.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_vector$b.applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector$b );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( object.boundingBox !== undefined ) {\n\n\t\t\t\t\t// object-level bounding box\n\n\t\t\t\t\tif ( object.boundingBox === null ) {\n\n\t\t\t\t\t\tobject.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box$4.copy( object.boundingBox );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// geometry-level bounding box\n\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box$4.copy( geometry.boundingBox );\n\n\t\t\t\t}\n\n\t\t\t\t_box$4.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box$4 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within or on the boundaries of this box.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @return {boolean} Whether the bounding box contains the given point or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y &&\n\t\t\tpoint.z >= this.min.z && point.z <= this.max.z;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box includes the entirety of the given bounding box.\n\t * If this box and the given one are identical, this function also returns `true`.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box contains the given bounding box or not.\n\t */\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\t/**\n\t * Returns a point as a proportion of this box's width, height and depth.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} A point as a proportion of this box's width, height and depth.\n\t */\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with this bounding box.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with this bounding box.\n\t */\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y &&\n\t\t\tbox.max.z >= this.min.z && box.min.z <= this.max.z;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere intersects with this bounding box.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the given bounding sphere intersects with this bounding box.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$b );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given plane intersects with this bounding box.\n\t *\n\t * @param {Plane} plane - The plane to test.\n\t * @return {boolean} Whether the given plane intersects with this bounding box.\n\t */\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given triangle intersects with this bounding box.\n\t *\n\t * @param {Triangle} triangle - The triangle to test.\n\t * @return {boolean} Whether the given triangle intersects with this bounding box.\n\t */\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$4.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$4, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$4 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );\n\n\t}\n\n\t/**\n\t * Clamps the given point within the bounds of this box.\n\t *\n\t * @param {Vector3} point - The point to clamp.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The clamped point.\n\t */\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\t/**\n\t * Returns the euclidean distance from any edge of this box to the specified point. If\n\t * the given point lies inside of this box, the distance will be `0`.\n\t *\n\t * @param {Vector3} point - The point to compute the distance to.\n\t * @return {number} The euclidean distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$b ).distanceTo( point );\n\n\t}\n\n\t/**\n\t * Returns a bounding sphere that encloses this bounding box.\n\t *\n\t * @param {Sphere} target - The target sphere that is used to store the method's result.\n\t * @return {Sphere} The bounding sphere that encloses this bounding box.\n\t */\n\tgetBoundingSphere( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\ttarget.makeEmpty();\n\n\t\t} else {\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$b ).length() * 0.5;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Computes the intersection of this bounding box and the given one, setting the upper\n\t * bound of this box to the lesser of the two boxes' upper bounds and the\n\t * lower bound of this box to the greater of the two boxes' lower bounds. If\n\t * there's no overlap, makes this box empty.\n\t *\n\t * @param {Box3} box - The bounding box to intersect with.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the union of this box and another and the given one, setting the upper\n\t * bound of this box to the greater of the two boxes' upper bounds and the\n\t * lower bound of this box to the lesser of the two boxes' lower bounds.\n\t *\n\t * @param {Box3} box - The bounding box that will be unioned with this instance.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Transforms this bounding box by the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given offset to both the upper and lower bounds of this bounding box,\n\t * effectively moving it in 3D space.\n\t *\n\t * @param {Vector3} offset - The offset that should be used to translate the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box is equal with the given one.\n\t *\n\t * @param {Box3} box - The box to test for equality.\n\t * @return {boolean} Whether this bounding box is equal with the given one.\n\t */\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\n\nconst _box$4 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$4 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$3 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\n/**\n * An analytical 3D sphere defined by a center and radius. This class is mainly\n * used as a Bounding Sphere for 3D objects.\n */\nclass Sphere {\n\n\t/**\n\t * Constructs a new sphere.\n\t *\n\t * @param {Vector3} [center=(0,0,0)] - The center of the sphere\n\t * @param {number} [radius=-1] - The radius of the sphere.\n\t */\n\tconstructor( center = new Vector3(), radius = -1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSphere = true;\n\n\t\t/**\n\t\t * The center of the sphere\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.center = center;\n\n\t\t/**\n\t\t * The radius of the sphere.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.radius = radius;\n\n\t}\n\n\t/**\n\t * Sets the sphere's components by copying the given values.\n\t *\n\t * @param {Vector3} center - The center.\n\t * @param {number} radius - The radius.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the minimum bounding sphere for list of points.\n\t * If the optional center point is given, it is used as the sphere's\n\t * center. Otherwise, the center of the axis-aligned bounding box\n\t * encompassing the points is calculated.\n\t *\n\t * @param {Array<Vector3>} points - A list of points in 3D space.\n\t * @param {Vector3} [optionalCenter] - The center of the sphere.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$3.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given sphere to this instance.\n\t *\n\t * @param {Sphere} sphere - The sphere to copy.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the sphere is empty (the radius set to a negative number).\n\t *\n\t * Spheres with a radius of `0` contain only their center point and are not\n\t * considered to be empty.\n\t *\n\t * @return {boolean} Whether this sphere is empty or not.\n\t */\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\t/**\n\t * Makes this sphere empty which means in encloses a zero space in 3D.\n\t *\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = -1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere contains the given point inclusive of\n\t * the surface of the sphere.\n\t *\n\t * @param {Vector3} point - The point to check.\n\t * @return {boolean} Whether this sphere contains the given point or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\t/**\n\t * Returns the closest distance from the boundary of the sphere to the\n\t * given point. If the sphere contains the point, the distance will\n\t * be negative.\n\t *\n\t * @param {Vector3} point - The point to compute the distance to.\n\t * @return {number} The distance to the point.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere intersects with the given one.\n\t *\n\t * @param {Sphere} sphere - The sphere to test.\n\t * @return {boolean} Whether this sphere intersects with the given one or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to test.\n\t * @return {boolean} Whether this sphere intersects with the given box or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere intersects with the given plane.\n\t *\n\t * @param {Plane} plane - The plane to test.\n\t * @return {boolean} Whether this sphere intersects with the given plane or not.\n\t */\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\t/**\n\t * Clamps a point within the sphere. If the point is outside the sphere, it\n\t * will clamp it to the closest point on the edge of the sphere. Points\n\t * already inside the sphere will not be affected.\n\t *\n\t * @param {Vector3} point - The plane to clamp.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The clamped point.\n\t */\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a bounding box that encloses this sphere.\n\t *\n\t * @param {Box3} target - The target box that is used to store the method's result.\n\t * @return {Box3} The bounding box that encloses this sphere.\n\t */\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Transforms this sphere with the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates the sphere's center by the given offset.\n\t *\n\t * @param {Vector3} offset - The offset.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this sphere to include the given point.\n\t *\n\t * @param {Vector3} point - The point to include.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\texpandByPoint( point ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.center.copy( point );\n\n\t\t\tthis.radius = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t_v1$6.subVectors( point, this.center );\n\n\t\tconst lengthSq = _v1$6.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t// calculate the minimal sphere\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\n\t\t\tconst delta = ( length - this.radius ) * 0.5;\n\n\t\t\tthis.center.addScaledVector( _v1$6, delta / length );\n\n\t\t\tthis.radius += delta;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands this sphere to enclose both the original sphere and the given sphere.\n\t *\n\t * @param {Sphere} sphere - The sphere to include.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tunion( sphere ) {\n\n\t\tif ( sphere.isEmpty() ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.copy( sphere );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t this.radius = Math.max( this.radius, sphere.radius );\n\n\t\t} else {\n\n\t\t\t_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere is equal with the given one.\n\t *\n\t * @param {Sphere} sphere - The sphere to test for equality.\n\t * @return {boolean} Whether this bounding sphere is equal with the given one.\n\t */\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\t/**\n\t * Returns a new sphere with copied values from this instance.\n\t *\n\t * @return {Sphere} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * A ray that emits from an origin in a certain direction. The class is used by\n * {@link Raycaster} to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3D space the mouse is over)\n * amongst other things.\n */\nclass Ray {\n\n\t/**\n\t * Constructs a new ray.\n\t *\n\t * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.\n\t * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.\n\t */\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, -1 ) ) {\n\n\t\t/**\n\t\t * The origin of the ray.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.origin = origin;\n\n\t\t/**\n\t\t * The (normalized) direction of the ray.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.direction = direction;\n\n\t}\n\n\t/**\n\t * Sets the ray's components by copying the given values.\n\t *\n\t * @param {Vector3} origin - The origin.\n\t * @param {Vector3} direction - The direction.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given ray to this instance.\n\t *\n\t * @param {Ray} ray - The ray to copy.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a vector that is located at a given distance along this ray.\n\t *\n\t * @param {number} t - The distance along the ray to retrieve a position for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} A position on the ray.\n\t */\n\tat( t, target ) {\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, t );\n\n\t}\n\n\t/**\n\t * Adjusts the direction of the ray to point at the given vector in world space.\n\t *\n\t * @param {Vector3} v - The target position.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Shift the origin of this ray along its direction by the given distance.\n\t *\n\t * @param {number} t - The distance along the ray to interpolate.\n\t * @return {Ray} A reference to this ray.\n\t */\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$a ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the point along this ray that is closest to the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on this ray.\n\t */\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t}\n\n\t/**\n\t * Returns the distance of the closest approach between this ray and the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\t/**\n\t * Returns the squared distance of the closest approach between this ray and the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to compute the distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$a.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t\treturn _vector$a.distanceToSquared( point );\n\n\t}\n\n\t/**\n\t * Returns the squared distance between this ray and the given line segment.\n\t *\n\t * @param {Vector3} v0 - The start point of the line segment.\n\t * @param {Vector3} v1 - The end point of the line segment.\n\t * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.\n\t * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given sphere, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Sphere} sphere - The sphere to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$a.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$a.dot( this.direction );\n\t\tconst d2 = _vector$a.dot( _vector$a ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if t1 is behind the ray - if so, return null\n\t\tif ( t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray intersects with the given sphere.\n\t *\n\t * @param {Sphere} sphere - The sphere to intersect.\n\t * @return {boolean} Whether this ray intersects with the given sphere or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\t/**\n\t * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray\n\t * does not intersect with the plane.\n\t *\n\t * @param {Plane} plane - The plane to compute the distance to.\n\t * @return {?number} Whether this ray intersects with the given sphere or not.\n\t */\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given plane, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Plane} plane - The plane to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray intersects with the given plane.\n\t *\n\t * @param {Plane} plane - The plane to intersect.\n\t * @return {boolean} Whether this ray intersects with the given plane or not.\n\t */\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given bounding box, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\n\n\t\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @return {boolean} Whether this ray intersects with the given box or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$a ) !== null;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given triangle, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Vector3} a - The first vertex of the triangle.\n\t * @param {Vector3} b - The second vertex of the triangle.\n\t * @param {Vector3} c - The third vertex of the triangle.\n\t * @param {boolean} backfaceCulling - Whether to use backface culling or not.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = -1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\t/**\n\t * Transforms this ray with the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix4 - The transformation matrix.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray is equal with the given one.\n\t *\n\t * @param {Ray} ray - The ray to test for equality.\n\t * @return {boolean} Whether this ray is equal with the given one.\n\t */\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\t/**\n\t * Returns a new ray with copied values from this instance.\n\t *\n\t * @return {Ray} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Represents a 4x4 matrix.\n *\n * The most common use of a 4x4 matrix in 3D computer graphics is as a transformation matrix.\n * For an introduction to transformation matrices as used in WebGL, check out [this tutorial]{@link https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices}\n *\n * This allows a 3D vector representing a point in 3D space to undergo\n * transformations such as translation, rotation, shear, scale, reflection,\n * orthogonal or perspective projection and so on, by being multiplied by the\n * matrix. This is known as `applying` the matrix to the vector.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix4();\n * m.set( 11, 12, 13, 14,\n *        21, 22, 23, 24,\n *        31, 32, 33, 34,\n *        41, 42, 43, 44 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31, 41,\n *                12, 22, 32, 42,\n *                13, 23, 33, 43,\n *                14, 24, 34, 44 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix4 {\n\n\t/**\n\t * Constructs a new 4x4 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n14] - 1-4 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n24] - 2-4 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @param {number} [n34] - 3-4 matrix element.\n\t * @param {number} [n41] - 4-1 matrix element.\n\t * @param {number} [n42] - 4-2 matrix element.\n\t * @param {number} [n43] - 4-3 matrix element.\n\t * @param {number} [n44] - 4-4 matrix element.\n\t */\n\tconstructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tMatrix4.prototype.isMatrix4 = true;\n\n\t\t/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n14] - 1-4 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n24] - 2-4 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @param {number} [n34] - 3-4 matrix element.\n\t * @param {number} [n41] - 4-1 matrix element.\n\t * @param {number} [n42] - 4-2 matrix element.\n\t * @param {number} [n43] - 4-3 matrix element.\n\t * @param {number} [n44] - 4-4 matrix element.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the 4x4 identity matrix.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a matrix with copied values from this instance.\n\t *\n\t * @return {Matrix4} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\t/**\n\t * Copies the values of the given matrix to this instance.\n\t *\n\t * @param {Matrix4} m - The matrix to copy.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the translation component of the given matrix\n\t * into this matrix's translation component.\n\t *\n\t * @param {Matrix4} m - The matrix to copy the translation component.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the basis of this matrix into the three axis vectors provided.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given basis vectors to this matrix.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the rotation component of the given matrix\n\t * into this matrix's rotation component.\n\t *\n\t * Note: This method does not support reflection matrices.\n\t *\n\t * @param {Matrix4} m - The matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\textractRotation( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the rotation component (the upper left 3x3 matrix) of this matrix to\n\t * the rotation specified by the given Euler angles. The rest of\n\t * the matrix is set to the identity. Depending on the {@link Euler#order},\n\t * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}\n\t * for a complete list.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationFromEuler( euler ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the rotation component of this matrix to the rotation specified by\n\t * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}\n\t * The rest of the matrix is set to the identity.\n\t *\n\t * @param {Quaternion} q - The Quaternion.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\t/**\n\t * Sets the rotation component of the transformation matrix, looking from `eye` towards\n\t * `target`, and oriented by the up-direction.\n\t *\n\t * @param {Vector3} eye - The eye vector.\n\t * @param {Vector3} target - The target vector.\n\t * @param {Vector3} up - The up vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Post-multiplies this matrix by the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The matrix to multiply with.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this matrix by the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The matrix to multiply with.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\t/**\n\t * Multiples the given 4x4 matrices and stores the result\n\t * in this matrix.\n\t *\n\t * @param {Matrix4} a - The first matrix.\n\t * @param {Matrix4} b - The second matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies every component of the matrix by the given scalar.\n\t *\n\t * @param {number} s - The scalar.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes and returns the determinant of this matrix.\n\t *\n\t * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.\n\t *\n\t * @return {number} The determinant.\n\t */\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\t/**\n\t * Transposes this matrix in place.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the position component for this matrix from the given vector,\n\t * without affecting the rest of the matrix.\n\t *\n\t * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.\n\t * @param {number} y - The y component of the vector.\n\t * @param {number} z - The z component of the vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\n\t * a zero matrix instead.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the columns of this matrix by the given vector.\n\t *\n\t * @param {Vector3} v - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Gets the maximum scale value of the three axes.\n\t *\n\t * @return {number} The maximum scale.\n\t */\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\t/**\n\t * Sets this matrix as a translation transform from the given vector.\n\t *\n\t * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.\n\t * @param {number} y - The amount to translate in the Y axis.\n\t * @param {number} z - The amount to translate in the z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeTranslation( x, y, z ) {\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x.x,\n\t\t\t\t0, 1, 0, x.y,\n\t\t\t\t0, 0, 1, x.z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the X axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the Y axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the Z axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the given axis by\n\t * the given angle.\n\t *\n\t * This is a somewhat controversial but mathematically sound alternative to\n\t * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.\n\t *\n\t * @param {Vector3} axis - The normalized rotation axis.\n\t * @param {number} angle - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a scale transformation.\n\t *\n\t * @param {number} x - The amount to scale in the X axis.\n\t * @param {number} y - The amount to scale in the Y axis.\n\t * @param {number} z - The amount to scale in the Z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a shear transformation.\n\t *\n\t * @param {number} xy - The amount to shear X by Y.\n\t * @param {number} xz - The amount to shear X by Z.\n\t * @param {number} yx - The amount to shear Y by X.\n\t * @param {number} yz - The amount to shear Y by Z.\n\t * @param {number} zx - The amount to shear Z by X.\n\t * @param {number} zy - The amount to shear Z by Y.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the transformation composed of the given position,\n\t * rotation (Quaternion) and scale.\n\t *\n\t * @param {Vector3} position - The position vector.\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\n\t * @param {Vector3} scale - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Decomposes this matrix into its position, rotation and scale components\n\t * and provides the result in the given objects.\n\t *\n\t * Note: Not all matrices are decomposable in this way. For example, if an\n\t * object has a non-uniformly scaled parent, then the object's world matrix\n\t * may not be decomposable, and this method may not be appropriate.\n\t *\n\t * @param {Vector3} position - The position vector.\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\n\t * @param {Vector3} scale - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a perspective projection matrix. This is used internally by\n\t * {@link PerspectiveCamera#updateProjectionMatrix}.\n\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n\t * @param {number} near - The distance from the camera to the near plane.\n\t * @param {number} far - The distance from the camera to the far plane.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\n\t\tlet c, d;\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tc = - ( far + near ) / ( far - near );\n\t\t\td = ( -2 * far * near ) / ( far - near );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tc = - far / ( far - near );\n\t\t\td = ( - far * near ) / ( far - near );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a; \tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b; \tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c; \tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = -1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a orthographic projection matrix. This is used internally by\n\t * {@link OrthographicCamera#updateProjectionMatrix}.\n\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n\t * @param {number} near - The distance from the camera to the near plane.\n\t * @param {number} far - The distance from the camera to the far plane.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\n\t\tlet z, zInv;\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tz = ( far + near ) * p;\n\t\t\tzInv = -2 * p;\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tz = near * p;\n\t\t\tzInv = -1 * p;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\t\tte[ 8 ] = 0; \t\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0; \t\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0; \t\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0; \t\tte[ 6 ] = 0;\t\tte[ 10 ] = zInv;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0; \t\tte[ 7 ] = 0;\t\tte[ 11 ] = 0;\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this matrix is equal with the given one.\n\t *\n\t * @param {Matrix4} matrix - The matrix to test for equality.\n\t * @return {boolean} Whether this matrix is equal with the given one.\n\t */\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the elements of this matrix to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The matrix elements in column-major order.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix$2 = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\n/**\n * A class representing Euler angles.\n *\n * Euler angles describe a rotational transformation by rotating an object on\n * its various axes in specified amounts per axis, and a specified axis\n * order.\n *\n * Iterating through an instance will yield its components (x, y, z,\n * order) in the corresponding order.\n *\n * ```js\n * const a = new THREE.Euler( 0, 1, 1.57, 'XYZ' );\n * const b = new THREE.Vector3( 1, 0, 1 );\n * b.applyEuler(a);\n * ```\n */\nclass Euler {\n\n\t/**\n\t * Constructs a new euler instance.\n\t *\n\t * @param {number} [x=0] - The angle of the x axis in radians.\n\t * @param {number} [y=0] - The angle of the y axis in radians.\n\t * @param {number} [z=0] - The angle of the z axis in radians.\n\t * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isEuler = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\t/**\n\t * The angle of the x axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The angle of the y axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The angle of the z axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * A string representing the order that the rotations are applied.\n\t *\n\t * @type {string}\n\t * @default 'XYZ'\n\t */\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * Sets the Euler components.\n\t *\n\t * @param {number} x - The angle of the x axis in radians.\n\t * @param {number} y - The angle of the y axis in radians.\n\t * @param {number} z - The angle of the z axis in radians.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new Euler instance with copied values from this instance.\n\t *\n\t * @return {Euler} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\t/**\n\t * Copies the values of the given Euler instance to this instance.\n\t *\n\t * @param {Euler} euler - The Euler instance to copy.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from a pure rotation matrix.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from a normalized quaternion.\n\t *\n\t * @param {Quaternion} q - A normalized Quaternion.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix$2.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix$2, order, update );\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from the given vector.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\t/**\n\t * Resets the euler angle with a new order by creating a quaternion from this\n\t * euler angle and then setting this euler angle with the quaternion and the\n\t * new order.\n\t *\n\t * Warning: This discards revolution information.\n\t *\n\t * @param {string} [newOrder] - A string representing the new order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\treorder( newOrder ) {\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\t/**\n\t * Returns `true` if this Euler instance is equal with the given one.\n\t *\n\t * @param {Euler} euler - The Euler instance to test for equality.\n\t * @return {boolean} Whether this Euler instance is equal with the given one.\n\t */\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\t/**\n\t * Sets this Euler instance's components to values from the given array. The first three\n\t * entries of the array are assign to the x,y and z components. An optional fourth entry\n\t * defines the Euler order.\n\t *\n\t * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this Euler instance to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number,number,number,string>} The Euler components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._order;\n\n\t}\n\n}\n\n/**\n * The default Euler angle order.\n *\n * @static\n * @type {string}\n * @default 'XYZ'\n */\nEuler.DEFAULT_ORDER = 'XYZ';\n\nclass Layers {\n\n\tconstructor() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tset( channel ) {\n\n\t\tthis.mask = ( 1 << channel | 0 ) >>> 0;\n\n\t}\n\n\tenable( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t}\n\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\ttoggle( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t}\n\n\tdisable( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t}\n\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n\tisEnabled( channel ) {\n\n\t\treturn ( this.mask & ( 1 << channel | 0 ) ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\n/**\n * Fires when the object has been added to its parent object.\n *\n * @event Object3D#added\n * @type {Object}\n */\nconst _addedEvent = { type: 'added' };\n\n/**\n * Fires when the object has been removed from its parent object.\n *\n * @event Object3D#removed\n * @type {Object}\n */\nconst _removedEvent = { type: 'removed' };\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childadded\n * @type {Object}\n */\nconst _childaddedEvent = { type: 'childadded', child: null };\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childremoved\n * @type {Object}\n */\nconst _childremovedEvent = { type: 'childremoved', child: null };\n\n/**\n * This is the base class for most objects in three.js and provides a set of\n * properties and methods for manipulating objects in 3D space.\n *\n * @augments EventDispatcher\n */\nclass Object3D extends EventDispatcher {\n\n\t/**\n\t * Constructs a new 3D object.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isObject3D = true;\n\n\t\t/**\n\t\t * The ID of the 3D object.\n\t\t *\n\t\t * @name Object3D#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\t/**\n\t\t * The UUID of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Object3D';\n\n\t\t/**\n\t\t * A reference to the parent object.\n\t\t *\n\t\t * @type {?Object3D}\n\t\t * @default null\n\t\t */\n\t\tthis.parent = null;\n\n\t\t/**\n\t\t * An array holding the child 3D objects of this instance.\n\t\t *\n\t\t * @type {Array<Object3D>}\n\t\t */\n\t\tthis.children = [];\n\n\t\t/**\n\t\t * Defines the `up` direction of the 3D object which influences\n\t\t * the orientation via methods like {@link Object3D#lookAt}.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_UP`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\t/**\n\t\t\t * Represents the object's local position.\n\t\t\t *\n\t\t\t * @name Object3D#position\n\t\t\t * @type {Vector3}\n\t\t\t * @default (0,0,0)\n\t\t\t */\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local rotation as Euler angles, in radians.\n\t\t\t *\n\t\t\t * @name Object3D#rotation\n\t\t\t * @type {Euler}\n\t\t\t * @default (0,0,0)\n\t\t\t */\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local rotation as Quaternions.\n\t\t\t *\n\t\t\t * @name Object3D#quaternion\n\t\t\t * @type {Quaternion}\n\t\t\t */\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local scale.\n\t\t\t *\n\t\t\t * @name Object3D#scale\n\t\t\t * @type {Vector3}\n\t\t\t * @default (1,1,1)\n\t\t\t */\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's model-view matrix.\n\t\t\t *\n\t\t\t * @name Object3D#modelViewMatrix\n\t\t\t * @type {Matrix4}\n\t\t\t */\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's normal matrix.\n\t\t\t *\n\t\t\t * @name Object3D#normalMatrix\n\t\t\t * @type {Matrix3}\n\t\t\t */\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Represents the object's transformation matrix in local space.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrix = new Matrix4();\n\n\t\t/**\n\t\t * Represents the object's transformation matrix in world space.\n\t\t * If the 3D object has no parent, then it's identical to the local transformation matrix\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\t/**\n\t\t * When set to `true`, the engine automatically computes the local matrix from position,\n\t\t * rotation and scale every frame.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_AUTO_UPDATE`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n\n\t\t/**\n\t\t * When set to `true`, the engine automatically computes the world matrix from the current local\n\t\t * matrix and the object's transformation hierarchy.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n\n\t\t/**\n\t\t * When set to `true`, it calculates the world matrix in that frame and resets this property\n\t\t * to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t/**\n\t\t * The layer membership of the 3D object. The 3D object is only visible if it has\n\t\t * at least one layer in common with the camera in use. This property can also be\n\t\t * used to filter out unwanted objects in ray-intersection tests when using {@link Raycaster}.\n\t\t *\n\t\t * @type {Layers}\n\t\t */\n\t\tthis.layers = new Layers();\n\n\t\t/**\n\t\t * When set to `true`, the 3D object gets rendered.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.visible = true;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object gets rendered into shadow maps.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.castShadow = false;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object is affected by shadows in the scene.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.receiveShadow = false;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object is honored by view frustum culling.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.frustumCulled = true;\n\n\t\t/**\n\t\t * This value allows the default rendering order of scene graph objects to be\n\t\t * overridden although opaque and transparent objects remain sorted independently.\n\t\t * When this property is set for an instance of {@link Group},all descendants\n\t\t * objects will be sorted and rendered together. Sorting is from lowest to highest\n\t\t * render order.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.renderOrder = 0;\n\n\t\t/**\n\t\t * An array holding the animation clips of the 3D object.\n\t\t *\n\t\t * @type {Array<AnimationClip>}\n\t\t */\n\t\tthis.animations = [];\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the 3D object. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t}\n\n\t/**\n\t * A callback that is executed immediately before a 3D object is rendered to a shadow map.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Camera} shadowCamera - The shadow camera.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} depthMaterial - The depth material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately after a 3D object is rendered to a shadow map.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Camera} shadowCamera - The shadow camera.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} depthMaterial - The depth material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately before a 3D object is rendered.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately after a 3D object is rendered.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\t/**\n\t * Applies the given transformation matrix to the object and updates the object's position,\n\t * rotation and scale.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\t/**\n\t * Applies a rotation represented by given the quaternion to the 3D object.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as an axis/angle couple to the 3D object.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t */\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as Euler angles to the 3D object.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t */\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as rotation matrix to the 3D object.\n\t *\n\t * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be\n\t * a pure rotation matrix (i.e, unscaled).\n\t */\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as a Quaternion to the 3D object.\n\t *\n\t * @param {Quaternion} q - The Quaternion\n\t */\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object along an axis in local space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the 3D object along an axis in world space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its X axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its Y axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its Z axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along the given axis in local space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its X-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its Y-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its Z-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\t/**\n\t * Converts the given vector from this 3D object's local space to world space.\n\t *\n\t * @param {Vector3} vector - The vector to convert.\n\t * @return {Vector3} The converted vector.\n\t */\n\tlocalToWorld( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\t/**\n\t * Converts the given vector from this 3D object's word space to local space.\n\t *\n\t * @param {Vector3} vector - The vector to convert.\n\t * @return {Vector3} The converted vector.\n\t */\n\tworldToLocal( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\t/**\n\t * Rotates the object to face a point in world space.\n\t *\n\t * This method does not support objects having non-uniformly-scaled parent(s).\n\t *\n\t * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space\n\t * @param {number} [y] - The y coordinate in world space.\n\t * @param {number} [z] - The z coordinate in world space.\n\t */\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Adds the given 3D object as a child to this 3D object. An arbitrary number of\n\t * objects may be added. Any current parent on an object passed in here will be\n\t * removed, since an object can have at most one parent.\n\t *\n\t * @fires Object3D#added\n\t * @fires Object3D#childadded\n\t * @param {Object3D} object - The 3D object to add.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tobject.removeFromParent();\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t_childaddedEvent.child = object;\n\t\t\tthis.dispatchEvent( _childaddedEvent );\n\t\t\t_childaddedEvent.child = null;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes the given 3D object as child from this 3D object.\n\t * An arbitrary number of objects may be removed.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @param {Object3D} object - The 3D object to remove.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== -1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t_childremovedEvent.child = object;\n\t\t\tthis.dispatchEvent( _childremovedEvent );\n\t\t\t_childremovedEvent.child = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes this 3D object from its current parent.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes all child objects.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tclear() {\n\n\t\treturn this.remove( ... this.children );\n\n\t}\n\n\t/**\n\t * Adds the given 3D object as a child of this 3D object, while maintaining the object's world\n\t * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).\n\t *\n\t * @fires Object3D#added\n\t * @fires Object3D#childadded\n\t * @param {Object3D} object - The 3D object to attach.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tobject.removeFromParent();\n\t\tobject.parent = this;\n\t\tthis.children.push( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t_childaddedEvent.child = object;\n\t\tthis.dispatchEvent( _childaddedEvent );\n\t\t_childaddedEvent.child = null;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching ID.\n\t *\n\t * @param {number} id - The id.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching name.\n\t *\n\t * @param {string} name - The name.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching property value.\n\t *\n\t * @param {string} name - The name of the property.\n\t * @param {any} value - The value.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns all 3D objects with a matching property value.\n\t *\n\t * @param {string} name - The name of the property.\n\t * @param {any} value - The value.\n\t * @param {Array<Object3D>} result - The method stores the result in this array.\n\t * @return {Array<Object3D>} The found 3D objects.\n\t */\n\tgetObjectsByProperty( name, value, result = [] ) {\n\n\t\tif ( this[ name ] === value ) result.push( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].getObjectsByProperty( name, value, result );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the position of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's position in world space.\n\t */\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\t/**\n\t * Returns a Quaternion representing the position of the 3D object in world space.\n\t *\n\t * @param {Quaternion} target - The target Quaternion the result is stored to.\n\t * @return {Quaternion} The 3D object's rotation in world space.\n\t */\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the scale of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's scale in world space.\n\t */\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's direction in world space.\n\t */\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\t/**\n\t * Abstract method to get intersections between a casted ray and this\n\t * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}\n\t * implement this method in order to use raycasting.\n\t *\n\t * @abstract\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - An array holding the result of the method.\n\t */\n\traycast( /* raycaster, intersects */ ) {}\n\n\t/**\n\t * Executes the callback on this 3D object and all descendants.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.\n\t * Descendants of invisible 3D objects are not traversed.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the transformation matrix in local space by computing it from the current\n\t * position, rotation and scale values.\n\t */\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t/**\n\t * Updates the transformation matrix in world space of this 3D objects and its descendants.\n\t *\n\t * To ensure correct results, this method also recomputes the 3D object's transformation matrix in\n\t * local space. The computation of the local and world matrix can be controlled with the\n\t * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both\n\t * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.\n\t *\n\t * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even\n\t * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.matrixWorldAutoUpdate === true ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// make sure descendants are updated if required\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tchild.updateMatrixWorld( force );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the\n\t * update of ancestor and descendant nodes.\n\t *\n\t * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.\n\t * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.\n\t */\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldAutoUpdate === true ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// make sure descendants are updated\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = children[ i ];\n\n\t\t\t\tchild.updateWorldMatrix( false, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the 3D object into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized 3D object.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\t\tobject.up = this.up.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\tif ( this.isBatchedMesh ) {\n\n\t\t\tobject.type = 'BatchedMesh';\n\t\t\tobject.perObjectFrustumCulled = this.perObjectFrustumCulled;\n\t\t\tobject.sortObjects = this.sortObjects;\n\n\t\t\tobject.drawRanges = this._drawRanges;\n\t\t\tobject.reservedRanges = this._reservedRanges;\n\n\t\t\tobject.visibility = this._visibility;\n\t\t\tobject.active = this._active;\n\t\t\tobject.bounds = this._bounds.map( bound => ( {\n\t\t\t\tboxInitialized: bound.boxInitialized,\n\t\t\t\tboxMin: bound.box.min.toArray(),\n\t\t\t\tboxMax: bound.box.max.toArray(),\n\n\t\t\t\tsphereInitialized: bound.sphereInitialized,\n\t\t\t\tsphereRadius: bound.sphere.radius,\n\t\t\t\tsphereCenter: bound.sphere.center.toArray()\n\t\t\t} ) );\n\n\t\t\tobject.maxInstanceCount = this._maxInstanceCount;\n\t\t\tobject.maxVertexCount = this._maxVertexCount;\n\t\t\tobject.maxIndexCount = this._maxIndexCount;\n\n\t\t\tobject.geometryInitialized = this._geometryInitialized;\n\t\t\tobject.geometryCount = this._geometryCount;\n\n\t\t\tobject.matricesTexture = this._matricesTexture.toJSON( meta );\n\n\t\t\tif ( this._colorsTexture !== null ) object.colorsTexture = this._colorsTexture.toJSON( meta );\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tobject.boundingSphere = {\n\t\t\t\t\tcenter: object.boundingSphere.center.toArray(),\n\t\t\t\t\tradius: object.boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tobject.boundingBox = {\n\t\t\t\t\tmin: object.boundingBox.min.toArray(),\n\t\t\t\t\tmax: object.boundingBox.max.toArray()\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new 3D object with copied values from this instance.\n\t *\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.\n\t * @return {Object3D} A clone of this instance.\n\t */\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\t/**\n\t * Copies the values of the given 3D object to this instance.\n\t *\n\t * @param {Object3D} source - The 3D object to copy.\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.animations = source.animations.slice();\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * The default up direction for objects, also used as the default\n * position for {@link DirectionalLight} and {@link HemisphereLight}.\n *\n * @static\n * @type {Vector3}\n * @default (0,1,0)\n */\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\n\n/**\n * The default setting for {@link Object3D#matrixAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\n\n/**\n * The default setting for {@link Object3D#matrixWorldAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$2 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nconst _v40 = /*@__PURE__*/ new Vector4();\nconst _v41 = /*@__PURE__*/ new Vector4();\nconst _v42 = /*@__PURE__*/ new Vector4();\n\n/**\n * A geometric triangle as defined by three vectors representing its three corners.\n */\nclass Triangle {\n\n\t/**\n\t * Constructs a new triangle.\n\t *\n\t * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.\n\t * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.\n\t * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.\n\t */\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\t/**\n\t\t * The first corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.a = a;\n\n\t\t/**\n\t\t * The second corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.b = b;\n\n\t\t/**\n\t\t * The third corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.c = c;\n\n\t}\n\n\t/**\n\t * Computes the normal vector of a triangle.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's normal.\n\t */\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t/**\n\t * Computes a barycentric coordinates from the given vector.\n\t * Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The barycentric coordinates for the given point\n\t */\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\ttarget.set( 0, 0, 0 );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle.\n\t *\n\t * @param {Vector3} point - The point in 3D space to test.\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @return {boolean} Whether the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle or not.\n\t */\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\t// if the triangle is degenerate then we can't contain a point\n\t\tif ( this.getBarycoord( point, a, b, c, _v3$2 ) === null ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn ( _v3$2.x >= 0 ) && ( _v3$2.y >= 0 ) && ( ( _v3$2.x + _v3$2.y ) <= 1 );\n\n\t}\n\n\t/**\n\t * Computes the value barycentrically interpolated for the given point on the\n\t * triangle. Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - Position of interpolated point.\n\t * @param {Vector3} p1 - The first corner of the triangle.\n\t * @param {Vector3} p2 - The second corner of the triangle.\n\t * @param {Vector3} p3 - The third corner of the triangle.\n\t * @param {Vector3} v1 - Value to interpolate of first vertex.\n\t * @param {Vector3} v2 - Value to interpolate of second vertex.\n\t * @param {Vector3} v3 - Value to interpolate of third vertex.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The interpolated value.\n\t */\n\tstatic getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {\n\n\t\tif ( this.getBarycoord( point, p1, p2, p3, _v3$2 ) === null ) {\n\n\t\t\ttarget.x = 0;\n\t\t\ttarget.y = 0;\n\t\t\tif ( 'z' in target ) target.z = 0;\n\t\t\tif ( 'w' in target ) target.w = 0;\n\t\t\treturn null;\n\n\t\t}\n\n\t\ttarget.setScalar( 0 );\n\t\ttarget.addScaledVector( v1, _v3$2.x );\n\t\ttarget.addScaledVector( v2, _v3$2.y );\n\t\ttarget.addScaledVector( v3, _v3$2.z );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Computes the value barycentrically interpolated for the given attribute and indices.\n\t *\n\t * @param {BufferAttribute} attr - The attribute to interpolate.\n\t * @param {number} i1 - Index of first vertex.\n\t * @param {number} i2 - Index of second vertex.\n\t * @param {number} i3 - Index of third vertex.\n\t * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The interpolated attribute value.\n\t */\n\tstatic getInterpolatedAttribute( attr, i1, i2, i3, barycoord, target ) {\n\n\t\t_v40.setScalar( 0 );\n\t\t_v41.setScalar( 0 );\n\t\t_v42.setScalar( 0 );\n\n\t\t_v40.fromBufferAttribute( attr, i1 );\n\t\t_v41.fromBufferAttribute( attr, i2 );\n\t\t_v42.fromBufferAttribute( attr, i3 );\n\n\t\ttarget.setScalar( 0 );\n\t\ttarget.addScaledVector( _v40, barycoord.x );\n\t\ttarget.addScaledVector( _v41, barycoord.y );\n\t\ttarget.addScaledVector( _v42, barycoord.z );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns `true` if the triangle is oriented towards the given direction.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} direction - The (normalized) direction vector.\n\t * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n\t */\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\t/**\n\t * Sets the triangle's vertices by copying the given values.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the triangle's vertices by copying the given array values.\n\t *\n\t * @param {Array<Vector3>} points - An array with 3D points.\n\t * @param {number} i0 - The array index representing the first corner of the triangle.\n\t * @param {number} i1 - The array index representing the second corner of the triangle.\n\t * @param {number} i2 - The array index representing the third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the triangle's vertices by copying the given attribute values.\n\t *\n\t * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.\n\t * @param {number} i0 - The attribute index representing the first corner of the triangle.\n\t * @param {number} i1 - The attribute index representing the second corner of the triangle.\n\t * @param {number} i2 - The attribute index representing the third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new triangle with copied values from this instance.\n\t *\n\t * @return {Triangle} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given triangle to this instance.\n\t *\n\t * @param {Triangle} triangle - The triangle to copy.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the area of the triangle.\n\t *\n\t * @return {number} The triangle's area.\n\t */\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\t/**\n\t * Computes the midpoint of the triangle.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's midpoint.\n\t */\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\t/**\n\t * Computes the normal of the triangle.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's normal.\n\t */\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\t/**\n\t * Computes a plane the triangle lies within.\n\t *\n\t * @param {Plane} target - The target vector that is used to store the method's result.\n\t * @return {Plane} The plane the triangle lies within.\n\t */\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\t/**\n\t * Computes a barycentric coordinates from the given vector.\n\t * Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The barycentric coordinates for the given point\n\t */\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\t/**\n\t * Computes the value barycentrically interpolated for the given point on the\n\t * triangle. Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - Position of interpolated point.\n\t * @param {Vector3} v1 - Value to interpolate of first vertex.\n\t * @param {Vector3} v2 - Value to interpolate of second vertex.\n\t * @param {Vector3} v3 - Value to interpolate of third vertex.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The interpolated value.\n\t */\n\tgetInterpolation( point, v1, v2, v3, target ) {\n\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle.\n\t *\n\t * @param {Vector3} point - The point in 3D space to test.\n\t * @return {boolean} Whether the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\t/**\n\t * Returns `true` if the triangle is oriented towards the given direction.\n\t *\n\t * @param {Vector3} direction - The (normalized) direction vector.\n\t * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n\t */\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\t/**\n\t * Returns `true` if this triangle intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @return {boolean} Whether this triangle intersects with the given box or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\t/**\n\t * Returns the closest point on the triangle to the given point.\n\t *\n\t * @param {Vector3} p - The point to compute the closest point for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on the triangle.\n\t */\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\t/**\n\t * Returns `true` if this triangle is equal with the given one.\n\t *\n\t * @param {Triangle} triangle - The triangle to test for equality.\n\t * @return {boolean} Whether this triangle is equal with the given one.\n\t */\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\n/**\n * A Color instance is represented by RGB components in the linear <i>working\n * color space</i>, which defaults to `LinearSRGBColorSpace`. Inputs\n * conventionally using `SRGBColorSpace` (such as hexadecimals and CSS\n * strings) are converted to the working color space automatically.\n *\n * ```js\n * // converted automatically from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setHex( 0x112233 );\n * ```\n * Source color spaces may be specified explicitly, to ensure correct conversions.\n * ```js\n * // assumed already LinearSRGBColorSpace; no conversion\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5 );\n *\n * // converted explicitly from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5, SRGBColorSpace );\n * ```\n * If THREE.ColorManagement is disabled, no conversions occur. For details,\n * see <i>Color management</i>. Iterating through a Color instance will yield\n * its components (r, g, b) in the corresponding order. A Color can be initialised\n * in any of the following ways:\n * ```js\n * //empty constructor - will default white\n * const color1 = new THREE.Color();\n *\n * //Hexadecimal color (recommended)\n * const color2 = new THREE.Color( 0xff0000 );\n *\n * //RGB string\n * const color3 = new THREE.Color(\"rgb(255, 0, 0)\");\n * const color4 = new THREE.Color(\"rgb(100%, 0%, 0%)\");\n *\n * //X11 color name - all 140 color names are supported.\n * //Note the lack of CamelCase in the name\n * const color5 = new THREE.Color( 'skyblue' );\n * //HSL string\n * const color6 = new THREE.Color(\"hsl(0, 100%, 50%)\");\n *\n * //Separate RGB values between 0 and 1\n * const color7 = new THREE.Color( 1, 0, 0 );\n * ```\n */\nclass Color {\n\n\t/**\n\t * Constructs a new color.\n\t *\n\t * Note that standard method of specifying color in three.js is with a hexadecimal triplet,\n\t * and that method is used throughout the rest of the documentation.\n\t *\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n\t * @param {number} [g] - The green component.\n\t * @param {number} [b] - The blue component.\n\t */\n\tconstructor( r, g, b ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isColor = true;\n\n\t\t/**\n\t\t * The red component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.r = 1;\n\n\t\t/**\n\t\t * The green component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.g = 1;\n\n\t\t/**\n\t\t * The blue component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.b = 1;\n\n\t\treturn this.set( r, g, b );\n\n\t}\n\n\t/**\n\t * Sets the colors's components from the given values.\n\t *\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n\t * @param {number} [g] - The green component.\n\t * @param {number} [b] - The blue component.\n\t * @return {Color} A reference to this color.\n\t */\n\tset( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\n\t\t\tconst value = r;\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.setRGB( r, g, b );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the colors's components to the given scalar value.\n\t *\n\t * @param {number} scalar - The scalar value.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a hexadecimal value.\n\t *\n\t * @param {number} hex - The hexadecimal value.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from RGB values.\n\t *\n\t * @param {number} r - Red channel value between `0.0` and `1.0`.\n\t * @param {number} g - Green channel value between `0.0` and `1.0`.\n\t * @param {number} b - Blue channel value between `0.0` and `1.0`.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from RGB values.\n\t *\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,\n\t * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or\n\t * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -\n\t * all 140 color names are supported).\n\t *\n\t * @param {string} style - Color as a CSS-style string.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^(\\w+)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL(\n\t\t\t\t\t\t\tparseFloat( color[ 1 ] ) / 360,\n\t\t\t\t\t\t\tparseFloat( color[ 2 ] ) / 100,\n\t\t\t\t\t\t\tparseFloat( color[ 3 ] ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color model ' + style );\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\treturn this.setRGB(\n\t\t\t\t\tparseInt( hex.charAt( 0 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 1 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 2 ), 16 ) / 15,\n\t\t\t\t\tcolorSpace\n\t\t\t\t);\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\treturn this.setHex( parseInt( hex, 16 ), colorSpace );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Invalid hex color ' + style );\n\n\t\t\t}\n\n\t\t} else if ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style, colorSpace );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a color name. Faster than {@link Color#setStyle} if\n\t * you don't need the other CSS-style formats.\n\t *\n\t * For convenience, the list of names is exposed in `Color.NAMES` as a hash.\n\t * ```js\n\t * Color.NAMES.aliceblue // returns 0xF0F8FF\n\t * ```\n\t *\n\t * @param {string} style - The color name.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex, colorSpace );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new color with copied values from this instance.\n\t *\n\t * @return {Color} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\t/**\n\t * Copies the values of the given color to this instance.\n\t *\n\t * @param {Color} color - The color to copy.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given color into this color, and then converts this color from\n\t * `SRGBColorSpace` to `LinearSRGBColorSpace`.\n\t *\n\t * @param {Color} color - The color to copy/convert.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given color into this color, and then converts this color from\n\t * `LinearSRGBColorSpace` to `SRGBColorSpace`.\n\t *\n\t * @param {Color} color - The color to copy/convert.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.\n\t *\n\t * @return {Color} A reference to this color.\n\t */\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.\n\t *\n\t * @return {Color} A reference to this color.\n\t */\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the hexadecimal value of this color.\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {number} The hexadecimal value.\n\t */\n\tgetHex( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\treturn Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );\n\n\t}\n\n\t/**\n\t * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {string} The hexadecimal value as a string.\n\t */\n\tgetHexString( colorSpace = SRGBColorSpace ) {\n\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( -6 );\n\n\t}\n\n\t/**\n\t * Converts the colors RGB values into the HSL format and stores them into the\n\t * given target object.\n\t *\n\t * @param {{h:0,s:0,l:0}} target - The target object that is used to store the method's result.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {{h:number,s:number,l:number}} The HSL representation of this color.\n\t */\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the RGB values of this color and stores them into the given target object.\n\t *\n\t * @param {Color} target - The target color that is used to store the method's result.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} The RGB representation of this color.\n\t */\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\ttarget.r = _color.r;\n\t\ttarget.g = _color.g;\n\t\ttarget.b = _color.b;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {string} The CSS representation of this color.\n\t */\n\tgetStyle( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tif ( colorSpace !== SRGBColorSpace ) {\n\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n\t\t\treturn `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;\n\n\t\t}\n\n\t\treturn `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;\n\n\t}\n\n\t/**\n\t * Adds the given HSL values to this color's values.\n\t * Internally, this converts the color's RGB values to HSL, adds HSL\n\t * and then converts the color back to RGB.\n\t *\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\n\t * @return {Color} A reference to this color.\n\t */\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\treturn this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );\n\n\t}\n\n\t/**\n\t * Adds the RGB values of the given color to the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to add.\n\t * @return {Color} A reference to this color.\n\t */\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the RGB values of the given colors and stores the result in this instance.\n\t *\n\t * @param {Color} color1 - The first color.\n\t * @param {Color} color2 - The second color.\n\t * @return {Color} A reference to this color.\n\t */\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to the RGB values of this color.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Color} A reference to this color.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the RGB values of the given color from the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to subtract.\n\t * @return {Color} A reference to this color.\n\t */\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the RGB values of the given color with the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to multiply.\n\t * @return {Color} A reference to this color.\n\t */\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with the RGB values of this color.\n\t *\n\t * @param {number} s - The scalar to multiply.\n\t * @return {Color} A reference to this color.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates this color's RGB values toward the RGB values of the\n\t * given color. The alpha argument can be thought of as the ratio between\n\t * the two colors, where `0.0` is this color and `1.0` is the first argument.\n\t *\n\t * @param {Color} color - The color to converge on.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given colors and stores the result in this instance.\n\t * The alpha argument can be thought of as the ratio between the two colors, where `0.0`\n\t * is the first and `1.0` is the second color.\n\t *\n\t * @param {Color} color1 - The first color.\n\t * @param {Color} color2 - The second color.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates this color's HSL values toward the HSL values of the\n\t * given color. It differs from {@link Color#lerp} by not interpolating straight\n\t * from one color to the other, but instead going through all the hues in between\n\t * those two colors. The alpha argument can be thought of as the ratio between\n\t * the two colors, where 0.0 is this color and 1.0 is the first argument.\n\t *\n\t * @param {Color} color - The color to converge on.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the color's RGB components from the given 3D vector.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetFromVector3( v ) {\n\n\t\tthis.r = v.x;\n\t\tthis.g = v.y;\n\t\tthis.b = v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Transforms this color with the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix.\n\t * @return {Color} A reference to this color.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst r = this.r, g = this.g, b = this.b;\n\t\tconst e = m.elements;\n\n\t\tthis.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;\n\t\tthis.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;\n\t\tthis.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this color is equal with the given one.\n\t *\n\t * @param {Color} c - The color to test for equality.\n\t * @return {boolean} Whether this bounding color is equal with the given one.\n\t */\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\t/**\n\t * Sets this color's RGB components from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the RGB values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Color} A reference to this color.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the RGB components of this color to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the color components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The color components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this color from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding color data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Color} A reference to this color.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This methods defines the serialization result of this class. Returns the color\n\t * as a hexadecimal value.\n\t *\n\t * @return {number} The hexadecimal value.\n\t */\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.r;\n\t\tyield this.g;\n\t\tyield this.b;\n\n\t}\n\n}\n\nconst _color = /*@__PURE__*/ new Color();\n\n/**\n * A dictionary with X11 color names.\n *\n * Note that multiple words such as Dark Orange become the string 'darkorange'.\n *\n * @static\n * @type {Object}\n */\nColor.NAMES = _colorKeywords;\n\nlet _materialId = 0;\n\n/**\n * Abstract base class for materials.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Material extends EventDispatcher {\n\n\t/**\n\t * Constructs a new material.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMaterial = true;\n\n\t\t/**\n\t\t * The ID of the material.\n\t\t *\n\t\t * @name Material#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _materialId ++ } );\n\n\t\t/**\n\t\t * The UUID of the material.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the material.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Material';\n\n\t\t/**\n\t\t * Defines the blending type of the material.\n\t\t *\n\t\t * It must be set to `CustomBlending` if custom blending properties like\n\t\t * {@link Material#blendSrc}, {@link Material#blendDst} or {@link Material#blendEquation}\n\t\t * should have any effect.\n\t\t *\n\t\t * @type {(NoBlending|NormalBlending|AdditiveBlending|SubtractiveBlending|MultiplyBlending|CustomBlending)}\n\t\t * @default NormalBlending\n\t\t */\n\t\tthis.blending = NormalBlending;\n\n\t\t/**\n\t\t * Defines which side of faces will be rendered - front, back or both.\n\t\t *\n\t\t * @type {(FrontSide|BackSide|DoubleSide)}\n\t\t * @default FrontSide\n\t\t */\n\t\tthis.side = FrontSide;\n\n\t\t/**\n\t\t * If set to `true`, vertex colors should be used.\n\t\t *\n\t\t * The engine supports RGB and RGBA vertex colors depending on whether a three (RGB) or\n\t\t * four (RGBA) component color buffer attribute is used.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.vertexColors = false;\n\n\t\t/**\n\t\t * Defines how transparent the material is.\n\t\t * A value of `0.0` indicates fully transparent, `1.0` is fully opaque.\n\t\t *\n\t\t * If the {@link Material#transparent} is not set to `true`,\n\t\t * the material will remain fully opaque and this value will only affect its color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.opacity = 1;\n\n\t\t/**\n\t\t * Defines whether this material is transparent. This has an effect on\n\t\t * rendering as transparent objects need special treatment and are rendered\n\t\t * after non-transparent objects.\n\t\t *\n\t\t * When set to true, the extent to which the material is transparent is\n\t\t * controlled by {@link Material#opacity}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.transparent = false;\n\n\t\t/**\n\t\t * Enables alpha hashed transparency, an alternative to {@link Material#transparent} or\n\t\t * {@link Material#alphaTest}. The material will not be rendered if opacity is lower than\n\t\t * a random threshold. Randomization introduces some grain or noise, but approximates alpha\n\t\t * blending without the associated problems of sorting. Using TAA can reduce the resulting noise.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.alphaHash = false;\n\n\t\t/**\n\t\t * Defines the blending source factor.\n\t\t *\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default SrcAlphaFactor\n\t\t */\n\t\tthis.blendSrc = SrcAlphaFactor;\n\n\t\t/**\n\t\t * Defines the blending destination factor.\n\t\t *\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default OneMinusSrcAlphaFactor\n\t\t */\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\n\t\t/**\n\t\t * Defines the blending equation.\n\t\t *\n\t\t * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n\t\t * @default OneMinusSrcAlphaFactor\n\t\t */\n\t\tthis.blendEquation = AddEquation;\n\n\t\t/**\n\t\t * Defines the blending source alpha factor.\n\t\t *\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendSrcAlpha = null;\n\n\t\t/**\n\t\t * Defines the blending destination alpha factor.\n\t\t *\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendDstAlpha = null;\n\n\t\t/**\n\t\t * Defines the blending equation of the alpha channel.\n\t\t *\n\t\t * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n\t\t * @default OneMinusSrcAlphaFactor\n\t\t */\n\t\tthis.blendEquationAlpha = null;\n\n\t\t/**\n\t\t * Represents the RGB values of the constant blend color.\n\t\t *\n\t\t * This property has only an effect when using custom blending with `ConstantColor` or `OneMinusConstantColor`.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.blendColor = new Color( 0, 0, 0 );\n\n\t\t/**\n\t\t * Represents the alpha value of the constant blend color.\n\t\t *\n\t\t * This property has only an effect when using custom blending with `ConstantAlpha` or `OneMinusConstantAlpha`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.blendAlpha = 0;\n\n\t\t/**\n\t\t * Defines the depth function.\n\t\t *\n\t\t * @type {(NeverDepth|AlwaysDepth|LessDepth|LessEqualDepth|EqualDepth|GreaterEqualDepth|GreaterDepth|NotEqualDepth)}\n\t\t * @default LessEqualDepth\n\t\t */\n\t\tthis.depthFunc = LessEqualDepth;\n\n\t\t/**\n\t\t * Whether to have depth test enabled when rendering this material.\n\t\t * When the depth test is disabled, the depth write will also be implicitly disabled.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depthTest = true;\n\n\t\t/**\n\t\t * Whether rendering this material has any effect on the depth buffer.\n\t\t *\n\t\t * When drawing 2D overlays it can be useful to disable the depth writing in\n\t\t * order to layer several things together without creating z-index artifacts.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depthWrite = true;\n\n\t\t/**\n\t\t * The bit mask to use when writing to the stencil buffer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0xff\n\t\t */\n\t\tthis.stencilWriteMask = 0xff;\n\n\t\t/**\n\t\t * The stencil comparison function to use.\n\t\t *\n\t\t * @type {NeverStencilFunc|LessStencilFunc|EqualStencilFunc|LessEqualStencilFunc|GreaterStencilFunc|NotEqualStencilFunc|GreaterEqualStencilFunc|AlwaysStencilFunc}\n\t\t * @default AlwaysStencilFunc\n\t\t */\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\n\t\t/**\n\t\t * The value to use when performing stencil comparisons or stencil operations.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.stencilRef = 0;\n\n\t\t/**\n\t\t * The bit mask to use when comparing against the stencil buffer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0xff\n\t\t */\n\t\tthis.stencilFuncMask = 0xff;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns `false`.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilFail = KeepStencilOp;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns\n\t\t * `true` but the depth test fails.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilZFail = KeepStencilOp;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns\n\t\t * `true` and the depth test passes.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilZPass = KeepStencilOp;\n\n\t\t/**\n\t\t * Whether stencil operations are performed against the stencil buffer. In\n\t\t * order to perform writes or comparisons against the stencil buffer this\n\t\t * value must be `true`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.stencilWrite = false;\n\n\t\t/**\n\t\t * User-defined clipping planes specified as THREE.Plane objects in world\n\t\t * space. These planes apply to the objects this material is attached to.\n\t\t * Points in space whose signed distance to the plane is negative are clipped\n\t\t * (not rendered). This requires {@link WebGLRenderer#localClippingEnabled} to\n\t\t * be `true`.\n\t\t *\n\t\t * @type {?Array<Plane>}\n\t\t * @default null\n\t\t */\n\t\tthis.clippingPlanes = null;\n\n\t\t/**\n\t\t * Changes the behavior of clipping planes so that only their intersection is\n\t\t * clipped, rather than their union.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipIntersection = false;\n\n\t\t/**\n\t\t * Defines whether to clip shadows according to the clipping planes specified\n\t\t * on this material.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipShadows = false;\n\n\t\t/**\n\t\t * Defines which side of faces cast shadows. If `null`, the side casting shadows\n\t\t * is determined as follows:\n\t\t *\n\t\t * - When {@link Material#side} is set to `FrontSide`, the back side cast shadows.\n\t\t * - When {@link Material#side} is set to `BackSide`, the front side cast shadows.\n\t\t * - When {@link Material#side} is set to `DoubleSide`, both sides cast shadows.\n\t\t *\n\t\t * @type {?(FrontSide|BackSide|DoubleSide)}\n\t\t * @default null\n\t\t */\n\t\tthis.shadowSide = null;\n\n\t\t/**\n\t\t * Whether to render the material's color.\n\t\t *\n\t\t * This can be used in conjunction with {@link Object3D#renderOder} to create invisible\n\t\t * objects that occlude other objects.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.colorWrite = true;\n\n\t\t/**\n\t\t * Override the renderer's default precision for this material.\n\t\t *\n\t\t * @type {?('highp'|'mediump'|'lowp')}\n\t\t * @default null\n\t\t */\n\t\tthis.precision = null;\n\n\t\t/**\n\t\t * Whether to use polygon offset or not. When enabled, each fragment's depth value will\n\t\t * be offset after it is interpolated from the depth values of the appropriate vertices.\n\t\t * The offset is added before the depth test is performed and before the value is written\n\t\t * into the depth buffer.\n\t\t *\n\t\t * Can be useful for rendering hidden-line images, for applying decals to surfaces, and for\n\t\t * rendering solids with highlighted edges.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.polygonOffset = false;\n\n\t\t/**\n\t\t * Specifies a scale factor that is used to create a variable depth offset for each polygon.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.polygonOffsetFactor = 0;\n\n\t\t/**\n\t\t * Is multiplied by an implementation-specific value to create a constant depth offset.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\t/**\n\t\t * Whether to apply dithering to the color to remove the appearance of banding.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.dithering = false;\n\n\t\t/**\n\t\t * Whether alpha to coverage should be enabled or not. Can only be used with MSAA-enabled contexts\n\t\t * (meaning when the renderer was created with *antialias* parameter set to `true`). Enabling this\n\t\t * will smooth aliasing on clip plane edges and alphaTest-clipped edges.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.alphaToCoverage = false;\n\n\t\t/**\n\t\t * Whether to premultiply the alpha (transparency) value.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.premultipliedAlpha = false;\n\n\t\t/**\n\t\t * Whether double-sided, transparent objects should be rendered with a single pass or not.\n\t\t *\n\t\t * The engine renders double-sided, transparent objects with two draw calls (back faces first,\n\t\t * then front faces) to mitigate transparency artifacts. There are scenarios however where this\n\t\t * approach produces no quality gains but still doubles draw calls e.g. when rendering flat\n\t\t * vegetation like grass sprites. In these cases, set the `forceSinglePass` flag to `true` to\n\t\t * disable the two pass rendering to avoid performance issues.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.forceSinglePass = false;\n\n\t\t/**\n\t\t * Defines whether 3D objects using this material are visible.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.visible = true;\n\n\t\t/**\n\t\t * Defines whether this material is tone mapped according to the renderer's tone mapping setting.\n\t\t *\n\t\t * It is ignored when rendering to a render target or using post processing or when using\n\t\t * `WebGPURenderer`. In all these cases, all materials are honored by tone mapping.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.toneMapped = true;\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the Material. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t\t/**\n\t\t * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\t/**\n\t * Sets the alpha value to be used when running an alpha test. The material\n\t * will not be rendered if the opacity is lower than this value.\n\t *\n\t * @type {number}\n\t * @readonly\n\t * @default 0\n\t */\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\t/**\n\t * An optional callback that is executed immediately before the material is used to render a 3D object.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {Scene} scene - The scene.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\t/**\n\t * An optional callback that is executed immediately before the shader\n\t * program is compiled. This function is called with the shader source code\n\t * as a parameter. Useful for the modification of built-in materials.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}. The\n\t * recommended approach when customizing materials is to use `WebGPURenderer` with the new\n\t * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.\n\t *\n\t * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.\n\t * @param {WebGLRenderer} renderer - A reference to the renderer.\n\t */\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\t/**\n\t * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify\n\t * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached\n\t * shader or recompile the shader for this material as needed.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\n\t *\n\t * @return {string} The custom program cache key.\n\t */\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the material into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized material.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.dispersion !== undefined ) data.dispersion = this.dispersion;\n\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\n\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\n\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;\n\t\tif ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;\n\n\t\tif ( this.anisotropyMap && this.anisotropyMap.isTexture ) {\n\n\t\t\tdata.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors === true ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = true;\n\n\t\tif ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;\n\t\tif ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;\n\t\tif ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;\n\t\tif ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;\n\t\tif ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;\n\t\tif ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;\n\t\tif ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();\n\t\tif ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;\n\n\t\tif ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;\n\t\tif ( this.depthTest === false ) data.depthTest = this.depthTest;\n\t\tif ( this.depthWrite === false ) data.depthWrite = this.depthWrite;\n\t\tif ( this.colorWrite === false ) data.colorWrite = this.colorWrite;\n\n\t\tif ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;\n\t\tif ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;\n\t\tif ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;\n\t\tif ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;\n\t\tif ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;\n\t\tif ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;\n\t\tif ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;\n\t\tif ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaHash === true ) data.alphaHash = true;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = true;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;\n\t\tif ( this.forceSinglePass === true ) data.forceSinglePass = true;\n\n\t\tif ( this.wireframe === true ) data.wireframe = true;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = true;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( this.fog === false ) data.fog = false;\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Returns a new material with copied values from this instance.\n\t *\n\t * @return {Material} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given material to this instance.\n\t *\n\t * @param {Material} source - The material to copy.\n\t * @return {Material} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\tthis.blendColor.copy( source.blendColor );\n\t\tthis.blendAlpha = source.blendAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaHash = source.alphaHash;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\tthis.forceSinglePass = source.forceSinglePass;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Material#dispose\n\t */\n\tdispose() {\n\n\t\t/**\n\t\t * Fires when the material has been disposed of.\n\t\t *\n\t\t * @event Material#dispose\n\t\t * @type {Object}\n\t\t */\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Setting this property to `true` indicates the engine the material\n\t * needs to be recompiled.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {\n\n\t\tconsole.warn( 'Material: onBuild() has been removed.' ); // @deprecated, r166\n\n\t}\n\n}\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshBasicMaterial = true;\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapRotation = new Euler();\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/ _generateTables();\n\nfunction _generateTables() {\n\n\t// float32 to float16 helpers\n\n\tconst buffer = new ArrayBuffer( 4 );\n\tconst floatView = new Float32Array( buffer );\n\tconst uint32View = new Uint32Array( buffer );\n\n\tconst baseTable = new Uint32Array( 512 );\n\tconst shiftTable = new Uint32Array( 512 );\n\n\tfor ( let i = 0; i < 256; ++ i ) {\n\n\t\tconst e = i - 127;\n\n\t\t// very small number (0, -0)\n\n\t\tif ( e < -27 ) {\n\n\t\t\tbaseTable[ i ] = 0x0000;\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// small number (denorm)\n\n\t\t} else if ( e < -14 ) {\n\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\n\t\t\tshiftTable[ i ] = - e - 1;\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\n\n\t\t\t// normal number\n\n\t\t} else if ( e <= 15 ) {\n\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t\t// large number (Infinity, -Infinity)\n\n\t\t} else if ( e < 128 ) {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// stay (NaN, Infinity, -Infinity)\n\n\t\t} else {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t}\n\n\t}\n\n\t// float16 to float32 helpers\n\n\tconst mantissaTable = new Uint32Array( 2048 );\n\tconst exponentTable = new Uint32Array( 64 );\n\tconst offsetTable = new Uint32Array( 64 );\n\n\tfor ( let i = 1; i < 1024; ++ i ) {\n\n\t\tlet m = i << 13; // zero pad mantissa bits\n\t\tlet e = 0; // zero exponent\n\n\t\t// normalized\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\n\n\t\t\tm <<= 1;\n\t\t\te -= 0x00800000; // decrement exponent\n\n\t\t}\n\n\t\tm &= -8388609; // clear leading 1 bit\n\t\te += 0x38800000; // adjust bias\n\n\t\tmantissaTable[ i ] = m | e;\n\n\t}\n\n\tfor ( let i = 1024; i < 2048; ++ i ) {\n\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\n\n\t}\n\n\tfor ( let i = 1; i < 31; ++ i ) {\n\n\t\texponentTable[ i ] = i << 23;\n\n\t}\n\n\texponentTable[ 31 ] = 0x47800000;\n\texponentTable[ 32 ] = 0x80000000;\n\n\tfor ( let i = 33; i < 63; ++ i ) {\n\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\n\n\t}\n\n\texponentTable[ 63 ] = 0xc7800000;\n\n\tfor ( let i = 1; i < 64; ++ i ) {\n\n\t\tif ( i !== 32 ) {\n\n\t\t\toffsetTable[ i ] = 1024;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tfloatView: floatView,\n\t\tuint32View: uint32View,\n\t\tbaseTable: baseTable,\n\t\tshiftTable: shiftTable,\n\t\tmantissaTable: mantissaTable,\n\t\texponentTable: exponentTable,\n\t\toffsetTable: offsetTable\n\t};\n\n}\n\n/**\n * Returns a half precision floating point value (FP16) from the given single\n * precision floating point value (FP32).\n *\n * @param {number} val - A single precision floating point value.\n * @return {number} The FP16 value.\n */\nfunction toHalfFloat( val ) {\n\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\n\n\tval = clamp( val, -65504, 65504 );\n\n\t_tables.floatView[ 0 ] = val;\n\tconst f = _tables.uint32View[ 0 ];\n\tconst e = ( f >> 23 ) & 0x1ff;\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\n\n}\n\n/**\n * Returns a single precision floating point value (FP32) from the given half\n * precision floating point value (FP16).\n *\n * @param {number} val - A half precision floating point value.\n * @return {number} The FP32 value.\n */\nfunction fromHalfFloat( val ) {\n\n\tconst m = val >> 10;\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\n\treturn _tables.floatView[ 0 ];\n\n}\n\n/**\n * A class containing utility functions for data.\n *\n * @hideconstructor\n */\nclass DataUtils {\n\n\t/**\n\t * Returns a half precision floating point value (FP16) from the given single\n\t * precision floating point value (FP32).\n\t *\n\t * @param {number} val - A single precision floating point value.\n\t * @return {number} The FP16 value.\n\t */\n\tstatic toHalfFloat( val ) {\n\n\t\treturn toHalfFloat( val );\n\n\t}\n\n\t/**\n\t * Returns a single precision floating point value (FP32) from the given half\n\t * precision floating point value (FP16).\n\t *\n\t * @param {number} val - A half precision floating point value.\n\t * @return {number} The FP32 value.\n\t */\n\tstatic fromHalfFloat( val ) {\n\n\t\treturn fromHalfFloat( val );\n\n\t}\n\n}\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nlet _id$2 = 0;\n\nclass BufferAttribute {\n\n\tconstructor( array, itemSize, normalized = false ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.isBufferAttribute = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _id$2 ++ } );\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRanges = [];\n\t\tthis.gpuType = FloatType;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\taddUpdateRange( start, count ) {\n\n\t\tthis.updateRanges.push( { start, count } );\n\n\t}\n\n\tclearUpdateRanges() {\n\n\t\tthis.updateRanges.length = 0;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\t\tthis.gpuType = source.gpuType;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$9.fromBufferAttribute( this, i );\n\t\t\t\t_vector$9.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index, component ) {\n\n\t\tlet value = this.array[ index * this.itemSize + component ];\n\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\n\n\t\treturn value;\n\n\t}\n\n\tsetComponent( index, component, value ) {\n\n\t\tif ( this.normalized ) value = normalize( value, this.array );\n\n\t\tthis.array[ index * this.itemSize + component ] = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = this.array[ index * this.itemSize ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.from( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\n\t\treturn data;\n\n\t}\n\n}\n\n//\n\nclass Int8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t\tthis.isFloat16BufferAttribute = true;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = fromHalfFloat( this.array[ index * this.itemSize ] );\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = toHalfFloat( x );\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = fromHalfFloat( this.array[ index * this.itemSize + 1 ] );\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = fromHalfFloat( this.array[ index * this.itemSize + 2 ] );\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = fromHalfFloat( this.array[ index * this.itemSize + 3 ] );\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\t\tthis.array[ index + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n}\n\n\nclass Float32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id$1 = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$8 = /*@__PURE__*/ new Vector3();\n\nclass BufferGeometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBufferGeometry = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _id$1 ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.indirect = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetIndirect( indirect ) {\n\n\t\tthis.indirect = indirect;\n\n\t\treturn this;\n\n\t}\n\n\tgetIndirect() {\n\n\t\treturn this.indirect;\n\n\t}\n\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute === undefined ) {\n\n\t\t\tconst position = [];\n\n\t\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tconst point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t} else {\n\n\t\t\tconst l = Math.min( points.length, positionAttribute.count ); // make sure data do not exceed buffer size\n\n\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\tconst point = points[ i ];\n\t\t\t\tpositionAttribute.setXYZ( i, point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tif ( points.length > positionAttribute.count ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.' );\n\n\t\t\t}\n\n\t\t\tpositionAttribute.needsUpdate = true;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$2.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$2.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$2.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$8.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$8.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst positionAttribute = attributes.position;\n\t\tconst normalAttribute = attributes.normal;\n\t\tconst uvAttribute = attributes.uv;\n\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * positionAttribute.count ), 4 ) );\n\n\t\t}\n\n\t\tconst tangentAttribute = this.getAttribute( 'tangent' );\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromBufferAttribute( positionAttribute, a );\n\t\t\tvB.fromBufferAttribute( positionAttribute, b );\n\t\t\tvC.fromBufferAttribute( positionAttribute, c );\n\n\t\t\tuvA.fromBufferAttribute( uvAttribute, a );\n\t\t\tuvB.fromBufferAttribute( uvAttribute, b );\n\t\t\tuvC.fromBufferAttribute( uvAttribute, c );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: index.count\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindex.getX( j + 0 ),\n\t\t\t\t\tindex.getX( j + 1 ),\n\t\t\t\t\tindex.getX( j + 2 )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromBufferAttribute( normalAttribute, v );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? -1 : 1.0;\n\n\t\t\ttangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( index.getX( j + 0 ) );\n\t\t\t\thandleVertex( index.getX( j + 1 ) );\n\t\t\t\thandleVertex( index.getX( j + 2 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$8.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t}\n\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nconst _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();\nconst _ray$3 = /*@__PURE__*/ new Ray();\nconst _sphere$6 = /*@__PURE__*/ new Sphere();\nconst _sphereHitAt = /*@__PURE__*/ new Vector3();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _morphA = /*@__PURE__*/ new Vector3();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\n/**\n * Class representing triangular polygon mesh based objects.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments Object3D\n */\nclass Mesh extends Object3D {\n\n\t/**\n\t * Constructs a new mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMesh = true;\n\n\t\tthis.type = 'Mesh';\n\n\t\t/**\n\t\t * The mesh geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = geometry;\n\n\t\t/**\n\t\t * The mesh material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default MeshBasicMaterial\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetDictionary = undefined;\n\n\t\t/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetInfluences = undefined;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the local-space position of the vertex at the given index, taking into\n\t * account the current animation state of both morph targets and skinning.\n\t *\n\t * @param {number} index - The vertex index.\n\t * @param {Vector3} target - The target object that is used to store the method's result.\n\t * @return {Vector3} The vertex position in local space.\n\t */\n\tgetVertexPosition( index, target ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.attributes.position;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\n\t\ttarget.fromBufferAttribute( position, index );\n\n\t\tconst morphInfluences = this.morphTargetInfluences;\n\n\t\tif ( morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, index );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( target ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttarget.add( _morphA );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this line.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$6.copy( geometry.boundingSphere );\n\t\t_sphere$6.applyMatrix4( matrixWorld );\n\n\t\t// check distance from ray origin to bounding sphere\n\n\t\t_ray$3.copy( raycaster.ray ).recast( raycaster.near );\n\n\t\tif ( _sphere$6.containsPoint( _ray$3.origin ) === false ) {\n\n\t\t\tif ( _ray$3.intersectSphere( _sphere$6, _sphereHitAt ) === null ) return;\n\n\t\t\tif ( _ray$3.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;\n\n\t\t}\n\n\t\t// convert ray to local space of mesh\n\n\t\t_inverseMatrix$3.copy( matrixWorld ).invert();\n\t\t_ray$3.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3 );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$3.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray$3 );\n\n\t}\n\n\t_computeIntersections( raycaster, intersects, rayLocalSpace ) {\n\n\t\tlet intersection;\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\n\t\tconst index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\t\tconst uv = geometry.attributes.uv;\n\t\tconst uv1 = geometry.attributes.uv1;\n\t\tconst normal = geometry.attributes.normal;\n\t\tconst groups = geometry.groups;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\tif ( index !== null ) {\n\n\t\t\t// indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\t// non-indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = i;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection$1( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {\n\n\tobject.getVertexPosition( a, _vA$1 );\n\tobject.getVertexPosition( b, _vB$1 );\n\tobject.getVertexPosition( c, _vC$1 );\n\n\tconst intersection = checkIntersection$1( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tconst barycoord = new Vector3();\n\t\tTriangle.getBarycoord( _intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord );\n\n\t\tif ( uv ) {\n\n\t\t\tintersection.uv = Triangle.getInterpolatedAttribute( uv, a, b, c, barycoord, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv1 ) {\n\n\t\t\tintersection.uv1 = Triangle.getInterpolatedAttribute( uv1, a, b, c, barycoord, new Vector2() );\n\n\t\t}\n\n\t\tif ( normal ) {\n\n\t\t\tintersection.normal = Triangle.getInterpolatedAttribute( normal, a, b, c, barycoord, new Vector3() );\n\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\n\n\t\t\t\tintersection.normal.multiplyScalar( -1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\t\tintersection.barycoord = barycoord;\n\n\t}\n\n\treturn intersection;\n\n}\n\n/**\n * A geometry class for a rectangular cuboid with a given width, height, and depth.\n * On creation, the cuboid is centred on the origin, with each edge parallel to one\n * of the axes.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const cube = new THREE.Mesh( geometry, material );\n * scene.add( cube );\n * ```\n *\n * @augments BufferGeometry\n */\nclass BoxGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new box geometry.\n\t *\n\t * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.\n\t * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.\n\t * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.\n\t * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.\n\t * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.\n\t * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, -1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, -1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', -1, -1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : -1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {BoxGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n/**\n * Uniform Utilities\n */\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tif ( property.isRenderTargetTexture ) {\n\n\t\t\t\t\tconsole.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );\n\t\t\t\t\tdst[ u ][ p ] = null;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\nfunction cloneUniformsGroups( src ) {\n\n\tconst dst = [];\n\n\tfor ( let u = 0; u < src.length; u ++ ) {\n\n\t\tdst.push( src[ u ].clone() );\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction getUnlitUniformColorSpace( renderer ) {\n\n\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\tif ( currentRenderTarget === null ) {\n\n\t\t// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\n\t\treturn renderer.outputColorSpace;\n\n\t}\n\n\t// https://github.com/mrdoob/three.js/issues/27868\n\tif ( currentRenderTarget.isXRRenderTarget === true ) {\n\n\t\treturn currentRenderTarget.texture.colorSpace;\n\n\t}\n\n\treturn ColorManagement.workingColorSpace;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShaderMaterial = true;\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.uniformsGroups = [];\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.forceSinglePass = true;\n\n\t\tthis.extensions = {\n\t\t\tclipCullDistance: false, // set to use vertex shader clipping\n\t\t\tmultiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv1': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tdata.lights = this.lights;\n\t\tdata.clipping = this.clipping;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Abstract base class for cameras. This class should always be inherited\n * when you build a new camera.\n *\n * @abstract\n * @augments Object3D\n */\nclass Camera extends Object3D {\n\n\t/**\n\t * Constructs a new camera.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCamera = true;\n\n\t\tthis.type = 'Camera';\n\n\t\t/**\n\t\t * The inverse of the camera's world matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\t/**\n\t\t * The camera's projection matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.projectionMatrix = new Matrix4();\n\n\t\t/**\n\t\t * The inverse of the camera's projection matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t\t/**\n\t\t * The coordinate system in which the camera is used.\n\t\t *\n\t\t * @type {(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n\t\t */\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\tthis.coordinateSystem = source.coordinateSystem;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n\t *\n\t * This method is overwritten since cameras have a different forward vector compared to other\n\t * 3D objects. A camera looks down its local, negative z-axis by default.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's direction in world space.\n\t */\n\tgetWorldDirection( target ) {\n\n\t\treturn super.getWorldDirection( target ).negate();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _v3$1 = /*@__PURE__*/ new Vector3();\nconst _minTarget = /*@__PURE__*/ new Vector2();\nconst _maxTarget = /*@__PURE__*/ new Vector2();\n\n/**\n * Camera that uses [perspective projection]{@link https://en.wikipedia.org/wiki/Perspective_(graphical)}.\n *\n * This projection mode is designed to mimic the way the human eye sees. It\n * is the most common projection mode used for rendering a 3D scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass PerspectiveCamera extends Camera {\n\n\t/**\n\t * Constructs a new perspective camera.\n\t *\n\t * @param {number} [fov=50] - The vertical field of view.\n\t * @param {number} [aspect=1] - The aspect ratio.\n\t * @param {number} [near=0.1] - The camera's near plane.\n\t * @param {number} [far=2000] - The camera's far plane.\n\t */\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPerspectiveCamera = true;\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\t/**\n\t\t * The vertical field of view, from bottom to top of view,\n\t\t * in degrees.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 50\n\t\t */\n\t\tthis.fov = fov;\n\n\t\t/**\n\t\t * The zoom factor of the camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.zoom = 1;\n\n\t\t/**\n\t\t * The camera's near plane. The valid range is greater than `0`\n\t\t * and less than the current value of {@link PerspectiveCamera#far}.\n\t\t *\n\t\t * Note that, unlike for the {@link OrthographicCamera}, `0` is <em>not</em> a\n\t\t * valid value for a perspective camera's near plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The camera's far plane. Must be greater than the\n\t\t * current value of {@link PerspectiveCamera#near}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2000\n\t\t */\n\t\tthis.far = far;\n\n\t\t/**\n\t\t * Object distance used for stereoscopy and depth-of-field effects. This\n\t\t * parameter does not influence the projection matrix unless a\n\t\t * {@link StereoCamera} is being used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.focus = 10;\n\n\t\t/**\n\t\t * The aspect ratio, usually the canvas width / canvas height.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aspect = aspect;\n\n\t\t/**\n\t\t * Represents the frustum window specification. This property should not be edited\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.view = null;\n\n\t\t/**\n\t\t * Film size used for the larger axis. Default is `35` (millimeters). This\n\t\t * parameter does not influence the projection matrix unless {@link PerspectiveCamera#filmOffset}\n\t\t * is set to a nonzero value.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 35\n\t\t */\n\t\tthis.filmGauge = 35;\n\n\t\t/**\n\t\t * Horizontal off-center offset in the same unit as {@link PerspectiveCamera#filmGauge}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.filmOffset = 0;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * @param {number} focalLength - Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Returns the focal length from the current {@link PerspectiveCamera#fov} and\n\t * {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The computed focal length.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\t/**\n\t * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.\n\t *\n\t * @return {number} The effective FOV.\n\t */\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\t/**\n\t * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n\t * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The film width.\n\t */\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n\t * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The film width.\n\t */\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\n\t * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.\n\t *\n\t * @param {number} distance - The viewing distance.\n\t * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.\n\t * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.\n\t */\n\tgetViewBounds( distance, minTarget, maxTarget ) {\n\n\t\t_v3$1.set( -1, -1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\n\n\t\tminTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );\n\n\t\t_v3$1.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\n\n\t\tmaxTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );\n\n\t}\n\n\t/**\n\t * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\n\t *\n\t * @param {number} distance - The viewing distance.\n\t * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.\n\t * @returns {Vector2} The view size.\n\t */\n\tgetViewSize( distance, target ) {\n\n\t\tthis.getViewBounds( distance, _minTarget, _maxTarget );\n\n\t\treturn target.subVectors( _maxTarget, _minTarget );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *```\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *```\n\t * then for each monitor you would call it like this:\n\t *```js\n\t * const w = 1920;\n\t * const h = 1080;\n\t * const fullWidth = w * 3;\n\t * const fullHeight = h * 2;\n\t *\n\t * // --A--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t * // --B--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t * // --C--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t * // --D--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t * // --E--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t * // --F--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t * ```\n\t *\n\t * Note there is no reason monitors have to be the same size or in a grid.\n\t *\n\t * @param {number} fullWidth - The full width of multiview setup.\n\t * @param {number} fullHeight - The full height of multiview setup.\n\t * @param {number} x - The horizontal offset of the subcamera.\n\t * @param {number} y - The vertical offset of the subcamera.\n\t * @param {number} width - The width of subcamera.\n\t * @param {number} height - The height of subcamera.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Removes the view offset from the projection matrix.\n\t */\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Updates the camera's projection matrix. Must be called after any change of\n\t * camera properties.\n\t */\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = -0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst fov = -90; // negative fov is not an error\nconst aspect = 1;\n\n/**\n * A special type of camera that is positioned in 3D space to render its surroundings into a\n * cube render target. The render target can then be used as an environment map for rendering\n * realtime reflections in your scene.\n *\n * ```js\n * // Create cube render target\n * const cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 256, { generateMipmaps: true, minFilter: THREE.LinearMipmapLinearFilter } );\n *\n * // Create cube camera\n * const cubeCamera = new THREE.CubeCamera( 1, 100000, cubeRenderTarget );\n * scene.add( cubeCamera );\n *\n * // Create car\n * const chromeMaterial = new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: cubeRenderTarget.texture } );\n * const car = new THREE.Mesh( carGeometry, chromeMaterial );\n * scene.add( car );\n *\n * // Update the render target cube\n * car.visible = false;\n * cubeCamera.position.copy( car.position );\n * cubeCamera.update( renderer, scene );\n *\n * // Render the scene\n * car.visible = true;\n * renderer.render( scene, camera );\n * ```\n *\n * @augments Object3D\n */\nclass CubeCamera extends Object3D {\n\n\t/**\n\t * Constructs a new cube camera.\n\t *\n\t * @param {number} near - The camera's near plane.\n\t * @param {number} far - The camera's far plane.\n\t * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.\n\t */\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\t/**\n\t\t * A reference to the cube render target.\n\t\t *\n\t\t * @type {WebGLCubeRenderTarget}\n\t\t */\n\t\tthis.renderTarget = renderTarget;\n\n\t\t/**\n\t\t * The current active coordinate system.\n\t\t *\n\t\t * @type {?(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n\t\t * @default null\n\t\t */\n\t\tthis.coordinateSystem = null;\n\n\t\t/**\n\t\t * The current active mipmap level\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.activeMipmapLevel = 0;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\t/**\n\t * Must be called when the coordinate system of the cube camera is changed.\n\t */\n\tupdateCoordinateSystem() {\n\n\t\tconst coordinateSystem = this.coordinateSystem;\n\n\t\tconst cameras = this.children.concat();\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;\n\n\t\tfor ( const camera of cameras ) this.remove( camera );\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, 1, 0 );\n\t\t\tcameraPX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, 1, 0 );\n\t\t\tcameraNX.lookAt( -1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, -1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, 1 );\n\t\t\tcameraNY.lookAt( 0, -1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, 1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, 1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, -1 );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, -1, 0 );\n\t\t\tcameraPX.lookAt( -1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, -1, 0 );\n\t\t\tcameraNX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, 1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, -1 );\n\t\t\tcameraNY.lookAt( 0, -1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, -1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, -1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, -1 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tfor ( const camera of cameras ) {\n\n\t\t\tthis.add( camera );\n\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Calling this method will render the given scene with the given renderer\n\t * into the cube render target of the camera.\n\t *\n\t * @param {(Renderer|WebGLRenderer)} renderer - The renderer.\n\t * @param {Scene} scene - The scene to render.\n\t */\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst { renderTarget, activeMipmapLevel } = this;\n\n\t\tif ( this.coordinateSystem !== renderer.coordinateSystem ) {\n\n\t\t\tthis.coordinateSystem = renderer.coordinateSystem;\n\n\t\t\tthis.updateCoordinateSystem();\n\n\t\t}\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentActiveCubeFace = renderer.getActiveCubeFace();\n\t\tconst currentActiveMipmapLevel = renderer.getActiveMipmapLevel();\n\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\t// mipmaps are generated during the last call of render()\n\t\t// at this point, all sides of the cube render target are defined\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );\n\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\trenderTarget.texture.needsPMREMUpdate = true;\n\n\t}\n\n}\n\nclass CubeTexture extends Texture {\n\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( size = 1, options = {} ) {\n\n\t\tsuper( size, size, options );\n\n\t\tthis.isWebGLCubeRenderTarget = true;\n\n\t\tconst image = { width: size, height: size, depth: 1 };\n\t\tconst images = [ image, image, image, image, image, image ];\n\n\t\tthis.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.colorSpace = texture.colorSpace;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\tclear( renderer, color, depth, stencil ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\n/**\n * This is almost identical to an {@link Object3D}. Its purpose is to\n * make working with groups of objects syntactically clearer.\n *\n * ```js\n * // Create a group and add the two cubes.\n * // These cubes can now be rotated / scaled etc as a group.\n * const group = new THREE.Group();\n *\n * group.add( meshA );\n * group.add( meshB );\n *\n * scene.add( group );\n * ```\n *\n * @augments Object3D\n */\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isGroup = true;\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nconst _moveEvent = { type: 'move' };\n\nclass WebXRController {\n\n\tconstructor() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\n\t}\n\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tconnect( inputSource ) {\n\n\t\tif ( inputSource && inputSource.hand ) {\n\n\t\t\tconst hand = this._hand;\n\n\t\t\tif ( hand ) {\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Initialize hand with joints when connected\n\t\t\t\t\tthis._getHandJoint( hand, inputjoint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\tconst joint = this._getHandJoint( hand, inputjoint );\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.matrixWorldNeedsUpdate = true;\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\t\t\t\t\t\tgrip.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\n\t\t\t\tif ( inputPose === null && gripPose !== null ) {\n\n\t\t\t\t\tinputPose = gripPose;\n\n\t\t\t\t}\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\t\t\t\t\ttargetRay.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// private method\n\n\t_getHandJoint( hand, inputjoint ) {\n\n\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\tconst joint = new Group();\n\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\tjoint.visible = false;\n\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\n\t\t\thand.add( joint );\n\n\t\t}\n\n\t\treturn hand.joints[ inputjoint.jointName ];\n\n\t}\n\n}\n\n/**\n * This class can be used to define an exponential squared fog,\n * which gives a clear view near the camera and a faster than exponentially\n * densening fog farther from the camera.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n * ```\n */\nclass FogExp2 {\n\n\t/**\n\t * Constructs a new fog.\n\t *\n\t * @param {number|Color} color - The fog's color.\n\t * @param {number} [density=0.00025] - Defines how fast the fog will grow dense.\n\t */\n\tconstructor( color, density = 0.00025 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFogExp2 = true;\n\n\t\t/**\n\t\t * The name of the fog.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The fog's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color( color );\n\n\t\t/**\n\t\t *  Defines how fast the fog will grow dense.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.00025\n\t\t */\n\t\tthis.density = density;\n\n\t}\n\n\t/**\n\t * Returns a new fog with copied values from this instance.\n\t *\n\t * @return {FogExp2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t}\n\n\t/**\n\t * Serializes the fog into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized fog\n\t */\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tname: this.name,\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n}\n\n/**\n * This class can be used to define a linear fog that grows linearly denser\n * with the distance.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.Fog( 0xcccccc, 10, 15 );\n * ```\n */\nclass Fog {\n\n\t/**\n\t * Constructs a new fog.\n\t *\n\t * @param {number|Color} color - The fog's color.\n\t * @param {number} [near=1] - The minimum distance to start applying fog.\n\t * @param {number} [far=1000] - The maximum distance at which fog stops being calculated and applied.\n\t */\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFog = true;\n\n\t\t/**\n\t\t * The name of the fog.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The fog's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color( color );\n\n\t\t/**\n\t\t * The minimum distance to start applying fog. Objects that are less than\n\t\t * `near` units from the active camera won't be affected by fog.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The maximum distance at which fog stops being calculated and applied.\n\t\t * Objects that are more than `far` units away from the active camera won't\n\t\t * be affected by fog.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1000\n\t\t */\n\t\tthis.far = far;\n\n\t}\n\n\t/**\n\t * Returns a new fog with copied values from this instance.\n\t *\n\t * @return {Fog} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\t/**\n\t * Serializes the fog into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized fog\n\t */\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tname: this.name,\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\n/**\n * Scenes allow you to set up what is to be rendered and where by three.js.\n * This is where you place 3D objects like meshes, lines or lights.\n *\n * @augments Object3D\n */\nclass Scene extends Object3D {\n\n\t/**\n\t * Constructs a new scene.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isScene = true;\n\n\t\tthis.type = 'Scene';\n\n\t\t/**\n\t\t * Defines the background of the scene. Valid inputs are:\n\t\t *\n\t\t * - A color for defining a uniform colored background.\n\t\t * - A texture for defining a (flat) textured background.\n\t\t * - Cube textures or equirectangular textures for defining a skybox.\n\t\t *\n\t\t * @type {?(Color|Texture)}\n\t\t * @default null\n\t\t */\n\t\tthis.background = null;\n\n\t\t/**\n\t\t * Sets the environment map for all physical materials in the scene. However,\n\t\t * it's not possible to overwrite an existing texture assigned to the `envMap`\n\t\t * material property.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.environment = null;\n\n\t\t/**\n\t\t * A fog instance defining the type of fog that affects everything\n\t\t * rendered in the scene.\n\t\t *\n\t\t * @type {?(Fog|FogExp2)}\n\t\t * @default null\n\t\t */\n\t\tthis.fog = null;\n\n\t\t/**\n\t\t * Sets the blurriness of the background. Only influences environment maps\n\t\t * assigned to {@link Scene#background}. Valid input is a float between `0`\n\t\t * and `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.backgroundBlurriness = 0;\n\n\t\t/**\n\t\t * Attenuates the color of the background. Only applies to background textures.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.backgroundIntensity = 1;\n\n\t\t/**\n\t\t * The rotation of the background in radians. Only influences environment maps\n\t\t * assigned to {@link Scene#background}.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.backgroundRotation = new Euler();\n\n\t\t/**\n\t\t * Attenuates the color of the environment. Only influences environment maps\n\t\t * assigned to {@link Scene#environment}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.environmentIntensity = 1;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians. Only influences physical materials\n\t\t * in the scene when {@link Scene#environment} is used.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.environmentRotation = new Euler();\n\n\t\t/**\n\t\t * Forces everything in the scene to be rendered with the defined material.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */\n\t\tthis.overrideMaterial = null;\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tthis.backgroundBlurriness = source.backgroundBlurriness;\n\t\tthis.backgroundIntensity = source.backgroundIntensity;\n\t\tthis.backgroundRotation.copy( source.backgroundRotation );\n\n\t\tthis.environmentIntensity = source.environmentIntensity;\n\t\tthis.environmentRotation.copy( source.environmentRotation );\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\tif ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;\n\t\tif ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;\n\t\tdata.object.backgroundRotation = this.backgroundRotation.toArray();\n\n\t\tif ( this.environmentIntensity !== 1 ) data.object.environmentIntensity = this.environmentIntensity;\n\t\tdata.object.environmentRotation = this.environmentRotation.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass InterleavedBuffer {\n\n\tconstructor( array, stride ) {\n\n\t\tthis.isInterleavedBuffer = true;\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRanges = [];\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\taddUpdateRange( start, count ) {\n\n\t\tthis.updateRanges.push( { start, count } );\n\n\t}\n\n\tclearUpdateRanges() {\n\n\t\tthis.updateRanges.length = 0;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\nclass InterleavedBufferAttribute {\n\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n\n\t\tthis.isInterleavedBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized;\n\n\t}\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t}\n\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tthis.data.needsUpdate = value;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( this, i );\n\n\t\t\t_vector$7.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( this, i );\n\n\t\t\t_vector$7.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( this, i );\n\n\t\t\t_vector$7.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index, component ) {\n\n\t\tlet value = this.array[ index * this.data.stride + this.offset + component ];\n\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\n\n\t\treturn value;\n\n\t}\n\n\tsetComponent( index, component, value ) {\n\n\t\tif ( this.normalized ) value = normalize( value, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + component ] = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = this.data.array[ index * this.data.stride + this.offset ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t} else {\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t}\n\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t}\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// de-interleave data and save it as an ordinary buffer attribute for now\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t} else {\n\n\t\t\t// save as true interleaved attribute\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\tdata: this.data.uuid,\n\t\t\t\toffset: this.offset,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t}\n\n}\n\nclass SpriteMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteMaterial = true;\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\n/**\n * A sprite is a plane that always faces towards the camera, generally with a\n * partially transparent texture applied.\n *\n * Sprites do not cast shadows, setting {@link Object3D#castShadow} to `true` will\n * have no effect.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map } );\n *\n * const sprite = new THREE.Sprite( material );\n * scene.add( sprite );\n * ```\n *\n * @augments Object3D\n */\nclass Sprite extends Object3D {\n\n\t/**\n\t * Constructs a new sprite.\n\t *\n\t * @param {SpriteMaterial} [material] - The sprite material.\n\t */\n\tconstructor( material = new SpriteMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSprite = true;\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t-0.5, -0.5, 0, 0, 0,\n\t\t\t\t0.5, -0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t-0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\t/**\n\t\t * The sprite geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = _geometry;\n\n\t\t/**\n\t\t * The sprite material.\n\t\t *\n\t\t * @type {SpriteMaterial}\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * The sprite's anchor point, and the point around which the sprite rotates.\n\t\t * A value of `(0.5, 0.5)` corresponds to the midpoint of the sprite. A value\n\t\t * of `(0, 0)` corresponds to the lower left corner of the sprite.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0.5,0.5)\n\t\t */\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this sprite.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( -0.5, -0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, -0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( -0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getInterpolation( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nconst _v1$2 = /*@__PURE__*/ new Vector3();\nconst _v2$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * A component for providing a basic Level of Detail (LOD) mechanism.\n *\n * Every LOD level is associated with an object, and rendering can be switched\n * between them at the distances specified. Typically you would create, say,\n * three meshes, one for far away (low detail), one for mid range (medium\n * detail) and one for close up (high detail).\n *\n * ```js\n * const lod = new THREE.LOD();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n *\n * //Create spheres with 3 levels of detail and create new LOD levels for them\n * for( let i = 0; i < 3; i++ ) {\n *\n * \tconst geometry = new THREE.IcosahedronGeometry( 10, 3 - i );\n * \tconst mesh = new THREE.Mesh( geometry, material );\n * \tlod.addLevel( mesh, i * 75 );\n *\n * }\n *\n * scene.add( lod );\n * ```\n *\n * @augments Object3D\n */\nclass LOD extends Object3D {\n\n\t/**\n\t * Constructs a new LOD.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLOD = true;\n\n\t\t/**\n\t\t * The current LOD index.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\t/**\n\t\t\t * This array holds the LOD levels.\n\t\t\t *\n\t\t\t * @name LOD#levels\n\t\t\t * @type {Array<{object:Object3D,distance:number,hysteresis:number}>}\n\t\t\t */\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Whether the LOD object is updated automatically by the renderer per frame\n\t\t * or not. If set to `false`, you have to call {@link LOD#update} in the\n\t\t * render loop by yourself.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance, level.hysteresis );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a mesh that will display at a certain distance and greater. Typically\n\t * the further away the distance, the lower the detail on the mesh.\n\t *\n\t * @param {Object3D} object - The 3D object to display at this level.\n\t * @param {number} [distance=0] - The distance at which to display this level of detail.\n\t * @param {number} [hysteresis=0] - Threshold used to avoid flickering at LOD boundaries, as a fraction of distance.\n\t * @return {LOD} A reference to this instance.\n\t */\n\taddLevel( object, distance = 0, hysteresis = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, hysteresis: hysteresis, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes an existing level, based on the distance from the camera.\n\t * Returns `true` when the level has been removed. Otherwise `false`.\n\t *\n\t * @param {number} distance - Distance of the level to remove.\n\t * @return {boolean} Whether the level has been removed or not.\n\t */\n\tremoveLevel( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0; i < levels.length; i ++ ) {\n\n\t\t\tif ( levels[ i ].distance === distance ) {\n\n\t\t\t\tconst removedElements = levels.splice( i, 1 );\n\t\t\t\tthis.remove( removedElements[ 0 ].object );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns the currently active LOD level index.\n\t *\n\t * @return {number} The current active LOD level index.\n\t */\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\t/**\n\t * Returns a reference to the first 3D object that is greater than\n\t * the given distance.\n\t *\n\t * @param {number} distance - The LOD distance.\n\t * @return {Object3D|null} The found 3D object. `null` if no 3D object has been found.\n\t */\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance < levelDistance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this LOD.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1$2 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the LOD by computing which LOD level should be visible according\n\t * to the current distance of the given camera.\n\t *\n\t * @param {Camera} camera - The camera the scene is renderd with.\n\t */\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance >= levelDistance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance,\n\t\t\t\thysteresis: level.hysteresis\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector3 = /*@__PURE__*/ new Vector3();\nconst _matrix4 = /*@__PURE__*/ new Matrix4();\nconst _vertex = /*@__PURE__*/ new Vector3();\n\nconst _sphere$5 = /*@__PURE__*/ new Sphere();\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\n\n/**\n * A mesh that has a {@link Skeleton} that can then be used to animate the\n * vertices of the geometry with skinning/skeleton animation.\n *\n * Next to a valid skeleton, the skinned mesh requires skin indices and weights\n * as buffer attributes in its geometry. These attribute define which bones affect a single\n * vertex to a certain extend.\n *\n * Typically skinned meshes are not created manually but loaders like {@link GLTFLoader}\n * or {@link FBXLoader } import respective models.\n *\n * @augments Mesh\n */\nclass SkinnedMesh extends Mesh {\n\n\t/**\n\t * Constructs a new skinned mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSkinnedMesh = true;\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\t/**\n\t\t * `AttachedBindMode` means the skinned mesh shares the same world space as the skeleton.\n\t\t * This is not true when using `DetachedBindMode` which is useful when sharing a skeleton\n\t\t * across multiple skinned meshes.\n\t\t *\n\t\t * @type {(AttachedBindMode|DetachedBindMode)}\n\t\t * @default AttachedBindMode\n\t\t */\n\t\tthis.bindMode = AttachedBindMode;\n\n\t\t/**\n\t\t * The base matrix that is used for the bound bone transforms.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.bindMatrix = new Matrix4();\n\n\t\t/**\n\t\t * The base matrix that is used for resetting the bound bone transforms.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\t/**\n\t\t * The bounding box of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * The bounding sphere of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t}\n\n\t/**\n\t * Computes the bounding box of the skinned mesh, and updates {@link SkinnedMesh#boundingBox}.\n\t * The bounding box is not automatically computed by the engine; this method must be called by your app.\n\t * If the skinned mesh is animated, the bounding box should be recomputed per frame in order to reflect\n\t * the current animation state.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.makeEmpty();\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\tthis.getVertexPosition( i, _vertex );\n\t\t\tthis.boundingBox.expandByPoint( _vertex );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere of the skinned mesh, and updates {@link SkinnedMesh#boundingSphere}.\n\t * The bounding sphere is automatically computed by the engine once when it is needed, e.g., for ray casting\n\t * and view frustum culling. If the skinned mesh is animated, the bounding sphere should be recomputed\n\t * per frame in order to reflect the current animation state.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.makeEmpty();\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\tthis.getVertexPosition( i, _vertex );\n\t\t\tthis.boundingSphere.expandByPoint( _vertex );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\n\n\t\t_sphere$5.copy( this.boundingSphere );\n\t\t_sphere$5.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$5 ) === false ) return;\n\n\t\t// convert ray to local space of skinned mesh\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( this.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray$2 );\n\n\t}\n\n\tgetVertexPosition( index, target ) {\n\n\t\tsuper.getVertexPosition( index, target );\n\n\t\tthis.applyBoneTransform( index, target );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Binds the given skeleton to the skinned mesh.\n\t *\n\t * @param {Skeleton} skeleton - The skeleton to bind.\n\t * @param {Matrix4} [bindMatrix] - The bind matrix. If no bind matrix is provided,\n\t * the skinned mesh's world matrix will be used instead.\n\t */\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\t/**\n\t * This method sets the skinned mesh in the rest pose).\n\t */\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\t/**\n\t * Normalizes the skin weights which are defined as a buffer attribute\n\t * in the skinned mesh's geometry.\n\t */\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === AttachedBindMode ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === DetachedBindMode ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Applies the bone transform associated with the given index to the given\n\t * vertex position. Returns the updated vector.\n\t *\n\t * @param {number} index - The vertex index.\n\t * @param {Vector3} target - The target object that is used to store the method's result.\n\t * the skinned mesh's world matrix will be used instead.\n\t * @return {Vector3} The updated vertex position.\n\t */\n\tapplyBoneTransform( index, target ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( target ).applyMatrix4( this.bindMatrix );\n\n\t\ttarget.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix4.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\ttarget.addScaledVector( _vector3.copy( _basePosition ).applyMatrix4( _matrix4 ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n}\n\n/**\n * A bone which is part of a {@link Skeleton}. The skeleton in turn is used by\n * the {@link SkinnedMesh}.\n *\n * ```js\n * const root = new THREE.Bone();\n * const child = new THREE.Bone();\n *\n * root.add( child );\n * child.position.y = 5;\n * ```\n *\n * @augments Object3D\n */\nclass Bone extends Object3D {\n\n\t/**\n\t * Constructs a new bone.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBone = true;\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n}\n\nclass DataTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isDataTexture = true;\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\n\n/**\n * Class for representing the armatures in `three.js`. The skeleton\n * is defined by a hierarchy of bones.\n *\n * ```js\n * const bones = [];\n *\n * const shoulder = new THREE.Bone();\n * const elbow = new THREE.Bone();\n * const hand = new THREE.Bone();\n *\n * shoulder.add( elbow );\n * elbow.add( hand );\n *\n * bones.push( shoulder , elbow, hand);\n *\n * shoulder.position.y = -5;\n * elbow.position.y = 0;\n * hand.position.y = 5;\n *\n * const armSkeleton = new THREE.Skeleton( bones );\n * ```\n */\nclass Skeleton {\n\n\t/**\n\t * Constructs a new skeleton.\n\t *\n\t * @param {Array<Bone>} [bones] - An array of bones.\n\t * @param {Array<Matrix4>} [boneInverses] - An array of bone inverse matrices.\n\t * If not provided, these matrices will be computed automatically via {@link Skeleton#calculateInverses}.\n\t */\n\tconstructor( bones = [], boneInverses = [] ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * An array of bones defining the skeleton.\n\t\t *\n\t\t * @type {Array<Bone>}\n\t\t */\n\t\tthis.bones = bones.slice( 0 );\n\n\t\t/**\n\t\t * An array of bone inverse matrices.\n\t\t *\n\t\t * @type {Array<Matrix4>}\n\t\t */\n\t\tthis.boneInverses = boneInverses;\n\n\t\t/**\n\t\t * An array buffer holding the bone data.\n\t\t * Input data for {@link Skeleton#boneTexture}.\n\t\t *\n\t\t * @type {?Float32Array}\n\t\t * @default null\n\t\t */\n\t\tthis.boneMatrices = null;\n\n\t\t/**\n\t\t * A texture holding the bone data for use\n\t\t * in the vertex shader.\n\t\t *\n\t\t * @type {?DataTexture}\n\t\t * @default null\n\t\t */\n\t\tthis.boneTexture = null;\n\n\t\tthis.init();\n\n\t}\n\n\t/**\n\t * Initializes the skeleton. This method gets automatically called by the constructor\n\t * but depending on how the skeleton is created it might be necessary to call this method\n\t * manually.\n\t */\n\tinit() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\n\n\t\t// calculate inverse bone matrices if necessary\n\n\t\tif ( boneInverses.length === 0 ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\t// handle special case\n\n\t\t\tif ( bones.length !== boneInverses.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bone inverse matrices. This method resets {@link Skeleton#boneInverses}\n\t * and fills it with new matrices.\n\t */\n\tcalculateInverses() {\n\n\t\tthis.boneInverses.length = 0;\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resets the skeleton to the base pose.\n\t */\n\tpose() {\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resets the skeleton to the base pose.\n\t */\n\tupdate() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\t\tconst boneMatrices = this.boneMatrices;\n\t\tconst boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== null ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new skeleton with copied values from this instance.\n\t *\n\t * @return {Skeleton} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n\t/**\n\t * Computes a data texture for passing bone data to the vertex shader.\n\t *\n\t * @return {Skeleton} A reference of this instance.\n\t */\n\tcomputeBoneTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = Math.ceil( size / 4 ) * 4;\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\n\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\tboneTexture.needsUpdate = true;\n\n\t\tthis.boneMatrices = boneMatrices;\n\t\tthis.boneTexture = boneTexture;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Searches through the skeleton's bone array and returns the first with a\n\t * matching name.\n\t *\n\t * @param {string} name - The name of the bone.\n\t * @return {Bone|undefined} The found bone. `undefined` if no bone has been found.\n\t */\n\tgetBoneByName( name ) {\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose( ) {\n\n\t\tif ( this.boneTexture !== null ) {\n\n\t\t\tthis.boneTexture.dispose();\n\n\t\t\tthis.boneTexture = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setups the skeleton by the given JSON and bones.\n\t *\n\t * @param {Object} json - The skeleton as serialized JSON.\n\t * @param {Array<Bone>} bones - An array of bones.\n\t * @return {Skeleton} A reference of this instance.\n\t */\n\tfromJSON( json, bones ) {\n\n\t\tthis.uuid = json.uuid;\n\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n\n\t\t\tconst uuid = json.bones[ i ];\n\t\t\tlet bone = bones[ uuid ];\n\n\t\t\tif ( bone === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n\t\t\t\tbone = new Bone();\n\n\t\t\t}\n\n\t\t\tthis.bones.push( bone );\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n\n\t\t}\n\n\t\tthis.init();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the skeleton into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized skeleton.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Skeleton',\n\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t},\n\t\t\tbones: [],\n\t\t\tboneInverses: []\n\t\t};\n\n\t\tdata.uuid = this.uuid;\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tdata.bones.push( bone.uuid );\n\n\t\t\tconst boneInverse = boneInverses[ i ];\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\tthis.isInstancedBufferAttribute = true;\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _box3 = /*@__PURE__*/ new Box3();\nconst _identity = /*@__PURE__*/ new Matrix4();\nconst _mesh$1 = /*@__PURE__*/ new Mesh();\nconst _sphere$4 = /*@__PURE__*/ new Sphere();\n\n/**\n * A special version of a mesh with instanced rendering support. Use\n * this class if you have to render a large number of objects with the same\n * geometry and material(s) but with different world transformations. The usage\n * of 'InstancedMesh' will help you to reduce the number of draw calls and thus\n * improve the overall rendering performance in your application.\n *\n * @augments Mesh\n */\nclass InstancedMesh extends Mesh {\n\n\t/**\n\t * Constructs a new instanced mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t * @param {number} count - The number of instances.\n\t */\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInstancedMesh = true;\n\n\t\t/**\n\t\t * Represents the local transformation of all instances. You have to set its\n\t\t * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setMatrixAt}.\n\t\t *\n\t\t * @type {InstancedBufferAttribute}\n\t\t */\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\t/**\n\t\t * Represents the color of all instances. You have to set its\n\t\t * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setColorAt}.\n\t\t *\n\t\t * @type {?InstancedBufferAttribute}\n\t\t * @default null\n\t\t */\n\t\tthis.instanceColor = null;\n\n\t\t/**\n\t\t * Represents the morph target weights of all instances. You have to set its\n\t\t * {@link Texture#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setMorphAt}.\n\t\t *\n\t\t * @type {?InstancedBufferAttribute}\n\t\t * @default null\n\t\t */\n\t\tthis.morphTexture = null;\n\n\t\t/**\n\t\t * The number of instances.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * The bounding box of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * The bounding sphere of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.setMatrixAt( i, _identity );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding box of the instanced mesh, and updates {@link InstancedMesh#boundingBox}.\n\t * The bounding box is not automatically computed by the engine; this method must be called by your app.\n\t * You may need to recompute the bounding box if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst count = this.count;\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\tgeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tthis.boundingBox.makeEmpty();\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\n\n\t\t\t_box3.copy( geometry.boundingBox ).applyMatrix4( _instanceLocalMatrix );\n\n\t\t\tthis.boundingBox.union( _box3 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere of the instanced mesh, and updates {@link InstancedMesh#boundingSphere}\n\t * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n\t * You may need to recompute the bounding sphere if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst count = this.count;\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere === null ) {\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.makeEmpty();\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\n\n\t\t\t_sphere$4.copy( geometry.boundingSphere ).applyMatrix4( _instanceLocalMatrix );\n\n\t\t\tthis.boundingSphere.union( _sphere$4 );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.morphTexture !== null ) this.morphTexture = source.morphTexture.clone();\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Gets the color of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Color} color - The target object that is used to store the method's result.\n\t */\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\t/**\n\t * Gets the local transformation matrix of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Matrix4} matrix - The target object that is used to store the method's result.\n\t */\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\t/**\n\t * Gets the morph target weights of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Mesh} object - The target object that is used to store the method's result.\n\t */\n\tgetMorphAt( index, object ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tconst array = this.morphTexture.source.data.data;\n\n\t\tconst len = objectInfluences.length + 1; // All influences + the baseInfluenceSum\n\n\t\tconst dataIndex = index * len + 1; // Skip the baseInfluenceSum at the beginning\n\n\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\tobjectInfluences[ i ] = array[ dataIndex + i ];\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh$1.geometry = this.geometry;\n\t\t_mesh$1.material = this.material;\n\n\t\tif ( _mesh$1.material === undefined ) return;\n\n\t\t// test with bounding sphere first\n\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\n\n\t\t_sphere$4.copy( this.boundingSphere );\n\t\t_sphere$4.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$4 ) === false ) return;\n\n\t\t// now test each instance\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh$1.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh$1.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the given color to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#instanceColor} to `true` after updating all the colors.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Color} color - The instance color.\n\t */\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ).fill( 1 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\t/**\n\t * Sets the given local transformation matrix to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#instanceMatrix} to `true` after updating all the colors.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Matrix4} matrix - The the local transformation.\n\t */\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\t/**\n\t * Sets the morph target weights to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#morphTexture} to `true` after updating all the influences.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Mesh} object -  A mesh which `morphTargetInfluences` property containing the morph target weights\n\t * of a single instance.\n\t */\n\tsetMorphAt( index, object ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tconst len = objectInfluences.length + 1; // morphBaseInfluence + all influences\n\n\t\tif ( this.morphTexture === null ) {\n\n\t\t\tthis.morphTexture = new DataTexture( new Float32Array( len * this.count ), len, this.count, RedFormat, FloatType );\n\n\t\t}\n\n\t\tconst array = this.morphTexture.source.data.data;\n\n\t\tlet morphInfluencesSum = 0;\n\n\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t}\n\n\t\tconst morphBaseInfluence = this.geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\tconst dataIndex = len * index;\n\n\t\tarray[ dataIndex ] = morphBaseInfluence;\n\n\t\tarray.set( objectInfluences, dataIndex + 1 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\tif ( this.morphTexture !== null ) {\n\n\t\t\tthis.morphTexture.dispose();\n\t\t\tthis.morphTexture = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\n/**\n * A two dimensional surface that extends infinitely in 3D space, represented\n * in [Hessian normal form]{@link http://mathworld.wolfram.com/HessianNormalForm.html}\n * by a unit length normal vector and a constant.\n */\nclass Plane {\n\n\t/**\n\t * Constructs a new plane.\n\t *\n\t * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.\n\t * @param {number} [constant=0] - The signed distance from the origin to the plane.\n\t */\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPlane = true;\n\n\t\t/**\n\t\t * A unit length vector defining the normal of the plane.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.normal = normal;\n\n\t\t/**\n\t\t * The signed distance from the origin to the plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.constant = constant;\n\n\t}\n\n\t/**\n\t * Sets the plane components by copying the given values.\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {number} constant - The constant.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the plane components by defining `x`, `y`, `z` as the\n\t * plane normal and `w` as the constant.\n\t *\n\t * @param {number} x - The value for the normal's x component.\n\t * @param {number} y - The value for the normal's y component.\n\t * @param {number} z - The value for the normal's z component.\n\t * @param {number} w - The constant value.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the plane from the given normal and coplanar point (that is a point\n\t * that lies onto the plane).\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {Vector3} point - A coplanar point.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the plane from three coplanar points. The winding order is\n\t * assumed to be counter-clockwise, and determines the direction of\n\t * the plane normal.\n\t *\n\t * @param {Vector3} a - The first coplanar point.\n\t * @param {Vector3} b - The second coplanar point.\n\t * @param {Vector3} c - The third coplanar point.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given plane to this instance.\n\t *\n\t * @param {Plane} plane - The plane to copy.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Normalizes the plane normal and adjusts the constant accordingly.\n\t *\n\t * @return {Plane} A reference to this plane.\n\t */\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Negates both the plane normal and the constant.\n\t *\n\t * @return {Plane} A reference to this plane.\n\t */\n\tnegate() {\n\n\t\tthis.constant *= -1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the signed distance from the given point to this plane.\n\t *\n\t * @param {Vector3} point - The point to compute the distance for.\n\t * @return {number} The signed distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\t/**\n\t * Returns the signed distance from the given sphere to this plane.\n\t *\n\t * @param {Sphere} sphere - The sphere to compute the distance for.\n\t * @return {number} The signed distance.\n\t */\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\t/**\n\t * Projects a the given point onto the plane.\n\t *\n\t * @param {Vector3} point - The point to project.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The projected point on the plane.\n\t */\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );\n\n\t}\n\n\t/**\n\t * Returns the intersection point of the passed line and the plane. Returns\n\t * `null` if the line does not intersect. Returns the line's starting point if\n\t * the line is coplanar with the plane.\n\t *\n\t * @param {Line3} line - The line to compute the intersection for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( line.start ).addScaledVector( direction, t );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given line segment intersects with (passes through) the plane.\n\t *\n\t * @param {Line3} line - The line to test.\n\t * @return {boolean} Whether the given line segment intersects with the plane or not.\n\t */\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with the plane.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with the plane or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere intersects with the plane.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the given bounding sphere intersects with the plane or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\t/**\n\t * Returns a coplanar vector to the plane, by calculating the\n\t * projection of the normal at the origin onto the plane.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The coplanar point.\n\t */\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\t/**\n\t * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.\n\t *\n\t * The optional normal matrix can be pre-computed like so:\n\t * ```js\n\t * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\t * ```\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates the plane by the distance defined by the given offset vector.\n\t * Note that this only affects the plane constant and will not affect the normal vector.\n\t *\n\t * @param {Vector3} offset - The offset vector.\n\t * @return {Plane} A reference to this plane.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this plane is equal with the given one.\n\t *\n\t * @param {Plane} plane - The plane to test for equality.\n\t * @return {boolean} Whether this plane is equal with the given one.\n\t */\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\t/**\n\t * Returns a new plane with copied values from this instance.\n\t *\n\t * @return {Plane} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\nconst _vector$6 = /*@__PURE__*/ new Vector3();\n\n/**\n * Frustums are used to determine what is inside the camera's field of view.\n * They help speed up the rendering process - objects which lie outside a camera's\n * frustum can safely be excluded from rendering.\n *\n * This class is mainly intended for use internally by a renderer.\n */\nclass Frustum {\n\n\t/**\n\t * Constructs a new frustum.\n\t *\n\t * @param {Plane} [p0] - The first plane that encloses the frustum.\n\t * @param {Plane} [p1] - The second plane that encloses the frustum.\n\t * @param {Plane} [p2] - The third plane that encloses the frustum.\n\t * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n\t * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n\t * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n\t */\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\t/**\n\t\t * This array holds the planes that enclose the frustum.\n\t\t *\n\t\t * @type {Array<Plane>}\n\t\t */\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\t/**\n\t * Sets the frustum planes by copying the given planes.\n\t *\n\t * @param {Plane} [p0] - The first plane that encloses the frustum.\n\t * @param {Plane} [p1] - The second plane that encloses the frustum.\n\t * @param {Plane} [p2] - The third plane that encloses the frustum.\n\t * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n\t * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n\t * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n\t * @return {Frustum} A reference to this frustum.\n\t */\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given frustum to this instance.\n\t *\n\t * @param {Frustum} frustum - The frustum to copy.\n\t * @return {Frustum} A reference to this frustum.\n\t */\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the frustum planes from the given projection matrix.\n\t *\n\t * @param {Matrix4} m - The projection matrix.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.\n\t * @return {Frustum} A reference to this frustum.\n\t */\n\tsetFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.\n\t *\n\t * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.\n\t *\n\t * @param {Object3D} object - The 3D object to test.\n\t * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.\n\t */\n\tintersectsObject( object ) {\n\n\t\tif ( object.boundingSphere !== undefined ) {\n\n\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t} else {\n\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t}\n\n\t\treturn this.intersectsSphere( _sphere$3 );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given sprite is intersecting this frustum.\n\t *\n\t * @param {Sprite} sprite - The sprite to test.\n\t * @return {boolean} Whether the sprite is intersecting this frustum or not.\n\t */\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$3.center.set( 0, 0, 0 );\n\t\t_sphere$3.radius = 0.7071067811865476;\n\t\t_sphere$3.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$3 );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere is intersecting this frustum.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box is intersecting this frustum.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box is intersecting this frustum or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$6 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within the frustum.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @return {boolean} Whether the point lies within this frustum or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Returns a new frustum with copied values from this instance.\n\t *\n\t * @return {Frustum} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nfunction ascIdSort( a, b ) {\n\n\treturn a - b;\n\n}\n\nfunction sortOpaque( a, b ) {\n\n\treturn a.z - b.z;\n\n}\n\nfunction sortTransparent( a, b ) {\n\n\treturn b.z - a.z;\n\n}\n\nclass MultiDrawRenderList {\n\n\tconstructor() {\n\n\t\tthis.index = 0;\n\t\tthis.pool = [];\n\t\tthis.list = [];\n\n\t}\n\n\tpush( start, count, z, index ) {\n\n\t\tconst pool = this.pool;\n\t\tconst list = this.list;\n\t\tif ( this.index >= pool.length ) {\n\n\t\t\tpool.push( {\n\n\t\t\t\tstart: -1,\n\t\t\t\tcount: -1,\n\t\t\t\tz: -1,\n\t\t\t\tindex: -1,\n\n\t\t\t} );\n\n\t\t}\n\n\t\tconst item = pool[ this.index ];\n\t\tlist.push( item );\n\t\tthis.index ++;\n\n\t\titem.start = start;\n\t\titem.count = count;\n\t\titem.z = z;\n\t\titem.index = index;\n\n\t}\n\n\treset() {\n\n\t\tthis.list.length = 0;\n\t\tthis.index = 0;\n\n\t}\n\n}\n\nconst _matrix$1 = /*@__PURE__*/ new Matrix4();\nconst _whiteColor = /*@__PURE__*/ new Color( 1, 1, 1 );\nconst _frustum = /*@__PURE__*/ new Frustum();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\nconst _vector$5 = /*@__PURE__*/ new Vector3();\nconst _forward = /*@__PURE__*/ new Vector3();\nconst _temp = /*@__PURE__*/ new Vector3();\nconst _renderList = /*@__PURE__*/ new MultiDrawRenderList();\nconst _mesh = /*@__PURE__*/ new Mesh();\nconst _batchIntersects = [];\n\n// copies data from attribute \"src\" into \"target\" starting at \"targetOffset\"\nfunction copyAttributeData( src, target, targetOffset = 0 ) {\n\n\tconst itemSize = target.itemSize;\n\tif ( src.isInterleavedBufferAttribute || src.array.constructor !== target.array.constructor ) {\n\n\t\t// use the component getters and setters if the array data cannot\n\t\t// be copied directly\n\t\tconst vertexCount = src.count;\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\ttarget.setComponent( i + targetOffset, c, src.getComponent( i, c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// faster copy approach using typed array set function\n\t\ttarget.array.set( src.array, targetOffset * itemSize );\n\n\t}\n\n\ttarget.needsUpdate = true;\n\n}\n\n// safely copies array contents to a potentially smaller array\nfunction copyArrayContents( src, target ) {\n\n\tif ( src.constructor !== target.constructor ) {\n\n\t\t// if arrays are of a different type (eg due to index size increasing) then data must be per-element copied\n\t\tconst len = Math.min( src.length, target.length );\n\t\tfor ( let i = 0; i < len; i ++ ) {\n\n\t\t\ttarget[ i ] = src[ i ];\n\n\t\t}\n\n\t} else {\n\n\t\t// if the arrays use the same data layout we can use a fast block copy\n\t\tconst len = Math.min( src.length, target.length );\n\t\ttarget.set( new src.constructor( src.buffer, 0, len ) );\n\n\t}\n\n}\n\n/**\n * A special version of a mesh with multi draw batch rendering support. Use\n * this class if you have to render a large number of objects with the same\n * material but with different geometries or world transformations. The usage of\n * `BatchedMesh` will help you to reduce the number of draw calls and thus improve the overall\n * rendering performance in your application.\n *\n * ```js\n * const box = new THREE.BoxGeometry( 1, 1, 1 );\n * const sphere = new THREE.SphereGeometry( 1, 12, 12 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n *\n * // initialize and add geometries into the batched mesh\n * const batchedMesh = new BatchedMesh( 10, 5000, 10000, material );\n * const boxGeometryId = batchedMesh.addGeometry( box );\n * const sphereGeometryId = batchedMesh.addGeometry( sphere );\n *\n * // create instances of those geometries\n * const boxInstancedId1 = batchedMesh.addInstance( boxGeometryId );\n * const boxInstancedId2 = batchedMesh.addInstance( boxGeometryId );\n *\n * const sphereInstancedId1 = batchedMesh.addInstance( sphereGeometryId );\n * const sphereInstancedId2 = batchedMesh.addInstance( sphereGeometryId );\n *\n * // position the geometries\n * batchedMesh.setMatrixAt( boxInstancedId1, boxMatrix1 );\n * batchedMesh.setMatrixAt( boxInstancedId2, boxMatrix2 );\n *\n * batchedMesh.setMatrixAt( sphereInstancedId1, sphereMatrix1 );\n * batchedMesh.setMatrixAt( sphereInstancedId2, sphereMatrix2 );\n *\n * scene.add( batchedMesh );\n * ```\n *\n * @augments Mesh\n */\nclass BatchedMesh extends Mesh {\n\n\t/**\n\t * Constructs a new batched mesh.\n\t *\n\t * @param {number} maxInstanceCount - The maximum number of individual instances planned to be added and rendered.\n\t * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries.\n\t * @param {number} [maxIndexCount=maxVertexCount*2] - The maximum number of indices to be used by all unique geometries\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( maxInstanceCount, maxVertexCount, maxIndexCount = maxVertexCount * 2, material ) {\n\n\t\tsuper( new BufferGeometry(), material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBatchedMesh = true;\n\n\t\t/**\n\t\t * When set ot `true`, the individual objects of a batch are frustum culled.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.perObjectFrustumCulled = true;\n\n\t\t/**\n\t\t * When set to `true`, the individual objects of a batch are sorted to improve overdraw-related artifacts.\n\t\t * If the material is marked as \"transparent\" objects are rendered back to front and if not then they are\n\t\t * rendered front to back.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sortObjects = true;\n\n\t\t/**\n\t\t * The bounding box of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * The bounding sphere of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t\t/**\n\t\t * Takes a sort a function that is run before render. The function takes a list of instances to\n\t\t * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered\n\t\t * sort with.\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis.customSort = null;\n\n\t\t// stores visible, active, and geometry id per instance and reserved buffer ranges for geometries\n\t\tthis._instanceInfo = [];\n\t\tthis._geometryInfo = [];\n\n\t\t// instance, geometry ids that have been set as inactive, and are available to be overwritten\n\t\tthis._availableInstanceIds = [];\n\t\tthis._availableGeometryIds = [];\n\n\t\t// used to track where the next point is that geometry should be inserted\n\t\tthis._nextIndexStart = 0;\n\t\tthis._nextVertexStart = 0;\n\t\tthis._geometryCount = 0;\n\n\t\t// flags\n\t\tthis._visibilityChanged = true;\n\t\tthis._geometryInitialized = false;\n\n\t\t// cached user options\n\t\tthis._maxInstanceCount = maxInstanceCount;\n\t\tthis._maxVertexCount = maxVertexCount;\n\t\tthis._maxIndexCount = maxIndexCount;\n\n\t\t// buffers for multi draw\n\t\tthis._multiDrawCounts = new Int32Array( maxInstanceCount );\n\t\tthis._multiDrawStarts = new Int32Array( maxInstanceCount );\n\t\tthis._multiDrawCount = 0;\n\t\tthis._multiDrawInstances = null;\n\n\t\t// Local matrix per geometry by using data texture\n\t\tthis._matricesTexture = null;\n\t\tthis._indirectTexture = null;\n\t\tthis._colorsTexture = null;\n\n\t\tthis._initMatricesTexture();\n\t\tthis._initIndirectTexture();\n\n\t}\n\n\t/**\n\t * The maximum number of individual instances that can be stored in the batch.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget maxInstanceCount() {\n\n\t\treturn this._maxInstanceCount;\n\n\t}\n\n\t/**\n\t * The instance count.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget instanceCount() {\n\n\t\treturn this._instanceInfo.length - this._availableInstanceIds.length;\n\n\t}\n\n\t/**\n\t * The number of unused vertices.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget unusedVertexCount() {\n\n\t\treturn this._maxVertexCount - this._nextVertexStart;\n\n\t}\n\n\t/**\n\t * The number of unused indices.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget unusedIndexCount() {\n\n\t\treturn this._maxIndexCount - this._nextIndexStart;\n\n\t}\n\n\t_initMatricesTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 matrices * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 matrices * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 matrices * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 matrices * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this._maxInstanceCount * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = Math.ceil( size / 4 ) * 4;\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst matricesArray = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tconst matricesTexture = new DataTexture( matricesArray, size, size, RGBAFormat, FloatType );\n\n\t\tthis._matricesTexture = matricesTexture;\n\n\t}\n\n\t_initIndirectTexture() {\n\n\t\tlet size = Math.sqrt( this._maxInstanceCount );\n\t\tsize = Math.ceil( size );\n\n\t\tconst indirectArray = new Uint32Array( size * size );\n\t\tconst indirectTexture = new DataTexture( indirectArray, size, size, RedIntegerFormat, UnsignedIntType );\n\n\t\tthis._indirectTexture = indirectTexture;\n\n\t}\n\n\t_initColorsTexture() {\n\n\t\tlet size = Math.sqrt( this._maxInstanceCount );\n\t\tsize = Math.ceil( size );\n\n\t\t// 4 floats per RGBA pixel initialized to white\n\t\tconst colorsArray = new Float32Array( size * size * 4 ).fill( 1 );\n\t\tconst colorsTexture = new DataTexture( colorsArray, size, size, RGBAFormat, FloatType );\n\t\tcolorsTexture.colorSpace = ColorManagement.workingColorSpace;\n\n\t\tthis._colorsTexture = colorsTexture;\n\n\t}\n\n\t_initializeGeometry( reference ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst maxVertexCount = this._maxVertexCount;\n\t\tconst maxIndexCount = this._maxIndexCount;\n\t\tif ( this._geometryInitialized === false ) {\n\n\t\t\tfor ( const attributeName in reference.attributes ) {\n\n\t\t\t\tconst srcAttribute = reference.getAttribute( attributeName );\n\t\t\t\tconst { array, itemSize, normalized } = srcAttribute;\n\n\t\t\t\tconst dstArray = new array.constructor( maxVertexCount * itemSize );\n\t\t\t\tconst dstAttribute = new BufferAttribute( dstArray, itemSize, normalized );\n\n\t\t\t\tgeometry.setAttribute( attributeName, dstAttribute );\n\n\t\t\t}\n\n\t\t\tif ( reference.getIndex() !== null ) {\n\n\t\t\t\t// Reserve last u16 index for primitive restart.\n\t\t\t\tconst indexArray = maxVertexCount > 65535\n\t\t\t\t\t? new Uint32Array( maxIndexCount )\n\t\t\t\t\t: new Uint16Array( maxIndexCount );\n\n\t\t\t\tgeometry.setIndex( new BufferAttribute( indexArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tthis._geometryInitialized = true;\n\n\t\t}\n\n\t}\n\n\t// Make sure the geometry is compatible with the existing combined geometry attributes\n\t_validateGeometry( geometry ) {\n\n\t\t// check to ensure the geometries are using consistent attributes and indices\n\t\tconst batchGeometry = this.geometry;\n\t\tif ( Boolean( geometry.getIndex() ) !== Boolean( batchGeometry.getIndex() ) ) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: All geometries must consistently have \"index\".' );\n\n\t\t}\n\n\t\tfor ( const attributeName in batchGeometry.attributes ) {\n\n\t\t\tif ( ! geometry.hasAttribute( attributeName ) ) {\n\n\t\t\t\tthrow new Error( `THREE.BatchedMesh: Added geometry missing \"${ attributeName }\". All geometries must have consistent attributes.` );\n\n\t\t\t}\n\n\t\t\tconst srcAttribute = geometry.getAttribute( attributeName );\n\t\t\tconst dstAttribute = batchGeometry.getAttribute( attributeName );\n\t\t\tif ( srcAttribute.itemSize !== dstAttribute.itemSize || srcAttribute.normalized !== dstAttribute.normalized ) {\n\n\t\t\t\tthrow new Error( 'THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Validates the instance defined by the given ID.\n\t *\n\t * @param {number} instanceId - The the instance to validate.\n\t */\n\tvalidateInstanceId( instanceId ) {\n\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tif ( instanceId < 0 || instanceId >= instanceInfo.length || instanceInfo[ instanceId ].active === false ) {\n\n\t\t\tthrow new Error( `THREE.BatchedMesh: Invalid instanceId ${instanceId}. Instance is either out of range or has been deleted.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Validates the geometry defined by the given ID.\n\t *\n\t * @param {number} geometryId - The the geometry to validate.\n\t */\n\tvalidateGeometryId( geometryId ) {\n\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tif ( geometryId < 0 || geometryId >= geometryInfoList.length || geometryInfoList[ geometryId ].active === false ) {\n\n\t\t\tthrow new Error( `THREE.BatchedMesh: Invalid geometryId ${geometryId}. Geometry is either out of range or has been deleted.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Takes a sort a function that is run before render. The function takes a list of instances to\n\t * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered sort with.\n\t *\n\t * @param {Function} func - The custom sort function.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetCustomSort( func ) {\n\n\t\tthis.customSort = func;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the bounding box, updating {@link BatchedMesh#boundingBox}.\n\t * Bounding boxes aren't computed by default. They need to be explicitly computed,\n\t * otherwise they are `null`.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst boundingBox = this.boundingBox;\n\t\tconst instanceInfo = this._instanceInfo;\n\n\t\tboundingBox.makeEmpty();\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( instanceInfo[ i ].active === false ) continue;\n\n\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\tthis.getBoundingBoxAt( geometryId, _box$1 ).applyMatrix4( _matrix$1 );\n\t\t\tboundingBox.union( _box$1 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere, updating {@link BatchedMesh#boundingSphere}.\n\t * Bounding spheres aren't computed by default. They need to be explicitly computed,\n\t * otherwise they are `null`.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\t\tconst instanceInfo = this._instanceInfo;\n\n\t\tboundingSphere.makeEmpty();\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( instanceInfo[ i ].active === false ) continue;\n\n\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\tthis.getBoundingSphereAt( geometryId, _sphere$2 ).applyMatrix4( _matrix$1 );\n\t\t\tboundingSphere.union( _sphere$2 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Adds a new instance to the batch using the geometry of the given ID and returns\n\t * a new id referring to the new instance to be used by other functions.\n\t *\n\t * @param {number} geometryId - The ID of a previously added geometry via {@link BatchedMesh#addGeometry}.\n\t * @return {number} The instance ID.\n\t */\n\taddInstance( geometryId ) {\n\n\t\tconst atCapacity = this._instanceInfo.length >= this.maxInstanceCount;\n\n\t\t// ensure we're not over geometry\n\t\tif ( atCapacity && this._availableInstanceIds.length === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Maximum item count reached.' );\n\n\t\t}\n\n\t\tconst instanceInfo = {\n\t\t\tvisible: true,\n\t\t\tactive: true,\n\t\t\tgeometryIndex: geometryId,\n\t\t};\n\n\t\tlet drawId = null;\n\n\t\t// Prioritize using previously freed instance ids\n\t\tif ( this._availableInstanceIds.length > 0 ) {\n\n\t\t\tthis._availableInstanceIds.sort( ascIdSort );\n\n\t\t\tdrawId = this._availableInstanceIds.shift();\n\t\t\tthis._instanceInfo[ drawId ] = instanceInfo;\n\n\t\t} else {\n\n\t\t\tdrawId = this._instanceInfo.length;\n\t\t\tthis._instanceInfo.push( instanceInfo );\n\n\t\t}\n\n\t\tconst matricesTexture = this._matricesTexture;\n\t\t_matrix$1.identity().toArray( matricesTexture.image.data, drawId * 16 );\n\t\tmatricesTexture.needsUpdate = true;\n\n\t\tconst colorsTexture = this._colorsTexture;\n\t\tif ( colorsTexture ) {\n\n\t\t\t_whiteColor.toArray( colorsTexture.image.data, drawId * 4 );\n\t\t\tcolorsTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tthis._visibilityChanged = true;\n\t\treturn drawId;\n\n\t}\n\n\t/**\n\t * Adds the given geometry to the batch and returns the associated\n\t * geometry id referring to it to be used in other functions.\n\t *\n\t * @param {BufferGeometry} geometry - The geometry to add.\n\t * @param {number} [reservedVertexCount=-1] - Optional parameter specifying the amount of\n\t * vertex buffer space to reserve for the added geometry. This is necessary if it is planned\n\t * to set a new geometry at this index at a later time that is larger than the original geometry.\n\t * Defaults to the length of the given geometry vertex buffer.\n\t * @param {number} [reservedIndexCount=-1] - Optional parameter specifying the amount of index\n\t * buffer space to reserve for the added geometry. This is necessary if it is planned to set a\n\t * new geometry at this index at a later time that is larger than the original geometry. Defaults to\n\t * the length of the given geometry index buffer.\n\t * @return {number} The geometry ID.\n\t */\n\taddGeometry( geometry, reservedVertexCount = -1, reservedIndexCount = -1 ) {\n\n\t\tthis._initializeGeometry( geometry );\n\n\t\tthis._validateGeometry( geometry );\n\n\t\tconst geometryInfo = {\n\t\t\t// geometry information\n\t\t\tvertexStart: -1,\n\t\t\tvertexCount: -1,\n\t\t\treservedVertexCount: -1,\n\n\t\t\tindexStart: -1,\n\t\t\tindexCount: -1,\n\t\t\treservedIndexCount: -1,\n\n\t\t\t// draw range information\n\t\t\tstart: -1,\n\t\t\tcount: -1,\n\n\t\t\t// state\n\t\t\tboundingBox: null,\n\t\t\tboundingSphere: null,\n\t\t\tactive: true,\n\t\t};\n\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tgeometryInfo.vertexStart = this._nextVertexStart;\n\t\tgeometryInfo.reservedVertexCount = reservedVertexCount === -1 ? geometry.getAttribute( 'position' ).count : reservedVertexCount;\n\n\t\tconst index = geometry.getIndex();\n\t\tconst hasIndex = index !== null;\n\t\tif ( hasIndex ) {\n\n\t\t\tgeometryInfo.indexStart = this._nextIndexStart;\n\t\t\tgeometryInfo.reservedIndexCount = reservedIndexCount === -1 ? index.count : reservedIndexCount;\n\n\t\t}\n\n\t\tif (\n\t\t\tgeometryInfo.indexStart !== -1 &&\n\t\t\tgeometryInfo.indexStart + geometryInfo.reservedIndexCount > this._maxIndexCount ||\n\t\t\tgeometryInfo.vertexStart + geometryInfo.reservedVertexCount > this._maxVertexCount\n\t\t) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.' );\n\n\t\t}\n\n\t\t// update id\n\t\tlet geometryId;\n\t\tif ( this._availableGeometryIds.length > 0 ) {\n\n\t\t\tthis._availableGeometryIds.sort( ascIdSort );\n\n\t\t\tgeometryId = this._availableGeometryIds.shift();\n\t\t\tgeometryInfoList[ geometryId ] = geometryInfo;\n\n\n\t\t} else {\n\n\t\t\tgeometryId = this._geometryCount;\n\t\t\tthis._geometryCount ++;\n\t\t\tgeometryInfoList.push( geometryInfo );\n\n\t\t}\n\n\t\t// update the geometry\n\t\tthis.setGeometryAt( geometryId, geometry );\n\n\t\t// increment the next geometry position\n\t\tthis._nextIndexStart = geometryInfo.indexStart + geometryInfo.reservedIndexCount;\n\t\tthis._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n\n\t\treturn geometryId;\n\n\t}\n\n\t/**\n\t * Replaces the geometry at the given ID with the provided geometry. Throws an error if there\n\t * is not enough space reserved for geometry. Calling this will change all instances that are\n\t * rendering that geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geomtry that should be replaced with the given geometry.\n\t * @param {BufferGeometry} geometry - The new geometry.\n\t * @return {number} The geometry ID.\n\t */\n\tsetGeometryAt( geometryId, geometry ) {\n\n\t\tif ( geometryId >= this._geometryCount ) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Maximum geometry count reached.' );\n\n\t\t}\n\n\t\tthis._validateGeometry( geometry );\n\n\t\tconst batchGeometry = this.geometry;\n\t\tconst hasIndex = batchGeometry.getIndex() !== null;\n\t\tconst dstIndex = batchGeometry.getIndex();\n\t\tconst srcIndex = geometry.getIndex();\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\tif (\n\t\t\thasIndex &&\n\t\t\tsrcIndex.count > geometryInfo.reservedIndexCount ||\n\t\t\tgeometry.attributes.position.count > geometryInfo.reservedVertexCount\n\t\t) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Reserved space not large enough for provided geometry.' );\n\n\t\t}\n\n\t\t// copy geometry buffer data over\n\t\tconst vertexStart = geometryInfo.vertexStart;\n\t\tconst reservedVertexCount = geometryInfo.reservedVertexCount;\n\t\tgeometryInfo.vertexCount = geometry.getAttribute( 'position' ).count;\n\n\t\tfor ( const attributeName in batchGeometry.attributes ) {\n\n\t\t\t// copy attribute data\n\t\t\tconst srcAttribute = geometry.getAttribute( attributeName );\n\t\t\tconst dstAttribute = batchGeometry.getAttribute( attributeName );\n\t\t\tcopyAttributeData( srcAttribute, dstAttribute, vertexStart );\n\n\t\t\t// fill the rest in with zeroes\n\t\t\tconst itemSize = srcAttribute.itemSize;\n\t\t\tfor ( let i = srcAttribute.count, l = reservedVertexCount; i < l; i ++ ) {\n\n\t\t\t\tconst index = vertexStart + i;\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\t\tdstAttribute.setComponent( index, c, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdstAttribute.needsUpdate = true;\n\t\t\tdstAttribute.addUpdateRange( vertexStart * itemSize, reservedVertexCount * itemSize );\n\n\t\t}\n\n\t\t// copy index\n\t\tif ( hasIndex ) {\n\n\t\t\tconst indexStart = geometryInfo.indexStart;\n\t\t\tconst reservedIndexCount = geometryInfo.reservedIndexCount;\n\t\t\tgeometryInfo.indexCount = geometry.getIndex().count;\n\n\t\t\t// copy index data over\n\t\t\tfor ( let i = 0; i < srcIndex.count; i ++ ) {\n\n\t\t\t\tdstIndex.setX( indexStart + i, vertexStart + srcIndex.getX( i ) );\n\n\t\t\t}\n\n\t\t\t// fill the rest in with zeroes\n\t\t\tfor ( let i = srcIndex.count, l = reservedIndexCount; i < l; i ++ ) {\n\n\t\t\t\tdstIndex.setX( indexStart + i, vertexStart );\n\n\t\t\t}\n\n\t\t\tdstIndex.needsUpdate = true;\n\t\t\tdstIndex.addUpdateRange( indexStart, geometryInfo.reservedIndexCount );\n\n\t\t}\n\n\t\t// update the draw range\n\t\tgeometryInfo.start = hasIndex ? geometryInfo.indexStart : geometryInfo.vertexStart;\n\t\tgeometryInfo.count = hasIndex ? geometryInfo.indexCount : geometryInfo.vertexCount;\n\n\t\t// store the bounding boxes\n\t\tgeometryInfo.boundingBox = null;\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tgeometryInfo.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tgeometryInfo.boundingSphere = null;\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tgeometryInfo.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tthis._visibilityChanged = true;\n\t\treturn geometryId;\n\n\t}\n\n\t/**\n\t * Deletes the geometry defined by the given ID from this batch. Any instances referencing\n\t * this geometry will also be removed as a side effect.\n\t *\n\t * @param {number} geometryId - The ID of the geomtry to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tdeleteGeometry( geometryId ) {\n\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tif ( geometryId >= geometryInfoList.length || geometryInfoList[ geometryId ].active === false ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t// delete any instances associated with this geometry\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( instanceInfo[ i ].active && instanceInfo[ i ].geometryIndex === geometryId ) {\n\n\t\t\t\tthis.deleteInstance( i );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometryInfoList[ geometryId ].active = false;\n\t\tthis._availableGeometryIds.push( geometryId );\n\t\tthis._visibilityChanged = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deletes an existing instance from the batch using the given ID.\n\t *\n\t * @param {number} instanceId - The ID of the instance to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tdeleteInstance( instanceId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tthis._instanceInfo[ instanceId ].active = false;\n\t\tthis._availableInstanceIds.push( instanceId );\n\t\tthis._visibilityChanged = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Repacks the sub geometries in [name] to remove any unused space remaining from\n\t * previously deleted geometry, freeing up space to add new geometry.\n\t *\n\t * @param {number} instanceId - The ID of the instance to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\toptimize() {\n\n\t\t// track the next indices to copy data to\n\t\tlet nextVertexStart = 0;\n\t\tlet nextIndexStart = 0;\n\n\t\t// Iterate over all geometry ranges in order sorted from earliest in the geometry buffer to latest\n\t\t// in the geometry buffer. Because draw range objects can be reused there is no guarantee of their order.\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tconst indices = geometryInfoList\n\t\t\t.map( ( e, i ) => i )\n\t\t\t.sort( ( a, b ) => {\n\n\t\t\t\treturn geometryInfoList[ a ].vertexStart - geometryInfoList[ b ].vertexStart;\n\n\t\t\t} );\n\n\t\tconst geometry = this.geometry;\n\t\tfor ( let i = 0, l = geometryInfoList.length; i < l; i ++ ) {\n\n\t\t\t// if a geometry range is inactive then don't copy anything\n\t\t\tconst index = indices[ i ];\n\t\t\tconst geometryInfo = geometryInfoList[ index ];\n\t\t\tif ( geometryInfo.active === false ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// if a geometry contains an index buffer then shift it, as well\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\tif ( geometryInfo.indexStart !== nextIndexStart ) {\n\n\t\t\t\t\tconst { indexStart, vertexStart, reservedIndexCount } = geometryInfo;\n\t\t\t\t\tconst index = geometry.index;\n\t\t\t\t\tconst array = index.array;\n\n\t\t\t\t\t// shift the index pointers based on how the vertex data will shift\n\t\t\t\t\t// adjusting the index must happen first so the original vertex start value is available\n\t\t\t\t\tconst elementDelta = nextVertexStart - vertexStart;\n\t\t\t\t\tfor ( let j = indexStart; j < indexStart + reservedIndexCount; j ++ ) {\n\n\t\t\t\t\t\tarray[ j ] = array[ j ] + elementDelta;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tindex.array.copyWithin( nextIndexStart, indexStart, indexStart + reservedIndexCount );\n\t\t\t\t\tindex.addUpdateRange( nextIndexStart, reservedIndexCount );\n\n\t\t\t\t\tgeometryInfo.indexStart = nextIndexStart;\n\n\t\t\t\t}\n\n\t\t\t\tnextIndexStart += geometryInfo.reservedIndexCount;\n\n\t\t\t}\n\n\t\t\t// if a geometry needs to be moved then copy attribute data to overwrite unused space\n\t\t\tif ( geometryInfo.vertexStart !== nextVertexStart ) {\n\n\t\t\t\tconst { vertexStart, reservedVertexCount } = geometryInfo;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tfor ( const key in attributes ) {\n\n\t\t\t\t\tconst attribute = attributes[ key ];\n\t\t\t\t\tconst { array, itemSize } = attribute;\n\t\t\t\t\tarray.copyWithin( nextVertexStart * itemSize, vertexStart * itemSize, ( vertexStart + reservedVertexCount ) * itemSize );\n\t\t\t\t\tattribute.addUpdateRange( nextVertexStart * itemSize, reservedVertexCount * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tgeometryInfo.vertexStart = nextVertexStart;\n\n\t\t\t}\n\n\t\t\tnextVertexStart += geometryInfo.reservedVertexCount;\n\t\t\tgeometryInfo.start = geometry.index ? geometryInfo.indexStart : geometryInfo.vertexStart;\n\n\t\t\t// step the next geometry points to the shifted position\n\t\t\tthis._nextIndexStart = geometry.index ? geometryInfo.indexStart + geometryInfo.reservedIndexCount : 0;\n\t\t\tthis._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the bounding box for the given geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to return the bounding box for.\n\t * @param {Box3} target - The target object that is used to store the method's result.\n\t * @return {Box3|null} The geometry's bounding box. Returns `null` if no geometry has been found for the given ID.\n\t */\n\tgetBoundingBoxAt( geometryId, target ) {\n\n\t\tif ( geometryId >= this._geometryCount ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// compute bounding box\n\t\tconst geometry = this.geometry;\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\tif ( geometryInfo.boundingBox === null ) {\n\n\t\t\tconst box = new Box3();\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\t\t\tfor ( let i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i ++ ) {\n\n\t\t\t\tlet iv = i;\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tiv = index.getX( iv );\n\n\t\t\t\t}\n\n\t\t\t\tbox.expandByPoint( _vector$5.fromBufferAttribute( position, iv ) );\n\n\t\t\t}\n\n\t\t\tgeometryInfo.boundingBox = box;\n\n\t\t}\n\n\t\ttarget.copy( geometryInfo.boundingBox );\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the bounding sphere for the given geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to return the bounding sphere for.\n\t * @param {Sphere} target - The target object that is used to store the method's result.\n\t * @return {Sphere|null} The geometry's bounding sphere. Returns `null` if no geometry has been found for the given ID.\n\t */\n\tgetBoundingSphereAt( geometryId, target ) {\n\n\t\tif ( geometryId >= this._geometryCount ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// compute bounding sphere\n\t\tconst geometry = this.geometry;\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\tif ( geometryInfo.boundingSphere === null ) {\n\n\t\t\tconst sphere = new Sphere();\n\t\t\tthis.getBoundingBoxAt( geometryId, _box$1 );\n\t\t\t_box$1.getCenter( sphere.center );\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\n\t\t\tlet maxRadiusSq = 0;\n\t\t\tfor ( let i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i ++ ) {\n\n\t\t\t\tlet iv = i;\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tiv = index.getX( iv );\n\n\t\t\t\t}\n\n\t\t\t\t_vector$5.fromBufferAttribute( position, iv );\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, sphere.center.distanceToSquared( _vector$5 ) );\n\n\t\t\t}\n\n\t\t\tsphere.radius = Math.sqrt( maxRadiusSq );\n\t\t\tgeometryInfo.boundingSphere = sphere;\n\n\t\t}\n\n\t\ttarget.copy( geometryInfo.boundingSphere );\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Sets the given local transformation matrix to the defined instance.\n\t * Negatively scaled matrices are not supported.\n\t *\n\t * @param {number} instanceId - The ID of an instance to set the matrix of.\n\t * @param {Matrix4} matrix - A 4x4 matrix representing the local transformation of a single instance.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetMatrixAt( instanceId, matrix ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tconst matricesTexture = this._matricesTexture;\n\t\tconst matricesArray = this._matricesTexture.image.data;\n\t\tmatrix.toArray( matricesArray, instanceId * 16 );\n\t\tmatricesTexture.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the local transformation matrix of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the matrix of.\n\t * @param {Matrix4} matrix - The target object that is used to store the method's result.\n\t * @return {Matrix4} The instance's local transformation matrix.\n\t */\n\tgetMatrixAt( instanceId, matrix ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\t\treturn matrix.fromArray( this._matricesTexture.image.data, instanceId * 16 );\n\n\t}\n\n\t/**\n\t * Sets the given color to the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to set the color of.\n\t * @param {Color} color - The color to set the instance to.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetColorAt( instanceId, color ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tif ( this._colorsTexture === null ) {\n\n\t\t\tthis._initColorsTexture();\n\n\t\t}\n\n\t\tcolor.toArray( this._colorsTexture.image.data, instanceId * 4 );\n\t\tthis._colorsTexture.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the color of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the color of.\n\t * @param {Color} color - The target object that is used to store the method's result.\n\t * @return {Color} The instance's color.\n\t */\n\tgetColorAt( instanceId, color ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\t\treturn color.fromArray( this._colorsTexture.image.data, instanceId * 4 );\n\n\t}\n\n\t/**\n\t * Sets the visibility of the instance.\n\t *\n\t * @param {number} instanceId - The id of the instance to set the visibility of.\n\t * @param {boolean} visible - Whether the instance is visible or not.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetVisibleAt( instanceId, visible ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tif ( this._instanceInfo[ instanceId ].visible === visible ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis._instanceInfo[ instanceId ].visible = visible;\n\t\tthis._visibilityChanged = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the visibility state of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the visibility state of.\n\t * @return {boolean} Whether the instance is visible or not.\n\t */\n\tgetVisibleAt( instanceId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\treturn this._instanceInfo[ instanceId ].visible;\n\n\t}\n\n\t/**\n\t * Sets the geometry ID of the instance at the given index.\n\t *\n\t * @param {number} instanceId - The ID of the instance to set the geometry ID of.\n\t * @param {number} geometryId - The geometry ID to be use by the instance.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetGeometryIdAt( instanceId, geometryId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\t\tthis.validateGeometryId( geometryId );\n\n\t\tthis._instanceInfo[ instanceId ].geometryIndex = geometryId;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the geometry ID of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the geometry ID of.\n\t * @return {number} The instance's geometry ID.\n\t */\n\tgetGeometryIdAt( instanceId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\treturn this._instanceInfo[ instanceId ].geometryIndex;\n\n\t}\n\n\t/**\n\t * Get the range representing the subset of triangles related to the attached geometry,\n\t * indicating the starting offset and count, or `null` if invalid.\n\t *\n\t * @param {number} geometryId - The id of the geometry to get the range of.\n\t * @param {Object} [target] - The target object that is used to store the method's result.\n\t * @return {{\n\t * \tvertexStart:number,vertexCount:number,reservedVertexCount:number,\n\t * \tindexStart:number,indexCount:number,reservedIndexCount:number,\n\t * \tstart:number,count:number\n\t * }} The result object with range data.\n\t */\n\tgetGeometryRangeAt( geometryId, target = {} ) {\n\n\t\tthis.validateGeometryId( geometryId );\n\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\ttarget.vertexStart = geometryInfo.vertexStart;\n\t\ttarget.vertexCount = geometryInfo.vertexCount;\n\t\ttarget.reservedVertexCount = geometryInfo.reservedVertexCount;\n\n\t\ttarget.indexStart = geometryInfo.indexStart;\n\t\ttarget.indexCount = geometryInfo.indexCount;\n\t\ttarget.reservedIndexCount = geometryInfo.reservedIndexCount;\n\n\t\ttarget.start = geometryInfo.start;\n\t\ttarget.count = geometryInfo.count;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Resizes the necessary buffers to support the provided number of instances.\n\t * If the provided arguments shrink the number of instances but there are not enough\n\t * unused Ids at the end of the list then an error is thrown.\n\t *\n\t * @param {number} maxInstanceCount - The max number of individual instances that can be added and rendered by the batch.\n\t*/\n\tsetInstanceCount( maxInstanceCount ) {\n\n\t\t// shrink the available instances as much as possible\n\t\tconst availableInstanceIds = this._availableInstanceIds;\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tavailableInstanceIds.sort( ascIdSort );\n\t\twhile ( availableInstanceIds[ availableInstanceIds.length - 1 ] === instanceInfo.length ) {\n\n\t\t\tinstanceInfo.pop();\n\t\t\tavailableInstanceIds.pop();\n\n\t\t}\n\n\t\t// throw an error if it can't be shrunk to the desired size\n\t\tif ( maxInstanceCount < instanceInfo.length ) {\n\n\t\t\tthrow new Error( `BatchedMesh: Instance ids outside the range ${ maxInstanceCount } are being used. Cannot shrink instance count.` );\n\n\t\t}\n\n\t\t// copy the multi draw counts\n\t\tconst multiDrawCounts = new Int32Array( maxInstanceCount );\n\t\tconst multiDrawStarts = new Int32Array( maxInstanceCount );\n\t\tcopyArrayContents( this._multiDrawCounts, multiDrawCounts );\n\t\tcopyArrayContents( this._multiDrawStarts, multiDrawStarts );\n\n\t\tthis._multiDrawCounts = multiDrawCounts;\n\t\tthis._multiDrawStarts = multiDrawStarts;\n\t\tthis._maxInstanceCount = maxInstanceCount;\n\n\t\t// update texture data for instance sampling\n\t\tconst indirectTexture = this._indirectTexture;\n\t\tconst matricesTexture = this._matricesTexture;\n\t\tconst colorsTexture = this._colorsTexture;\n\n\t\tindirectTexture.dispose();\n\t\tthis._initIndirectTexture();\n\t\tcopyArrayContents( indirectTexture.image.data, this._indirectTexture.image.data );\n\n\t\tmatricesTexture.dispose();\n\t\tthis._initMatricesTexture();\n\t\tcopyArrayContents( matricesTexture.image.data, this._matricesTexture.image.data );\n\n\t\tif ( colorsTexture ) {\n\n\t\t\tcolorsTexture.dispose();\n\t\t\tthis._initColorsTexture();\n\t\t\tcopyArrayContents( colorsTexture.image.data, this._colorsTexture.image.data );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resizes the available space in the batch's vertex and index buffer attributes to the provided sizes.\n\t * If the provided arguments shrink the geometry buffers but there is not enough unused space at the\n\t * end of the geometry attributes then an error is thrown.\n\t *\n\t * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries to resize to.\n\t * @param {number} maxIndexCount - The maximum number of indices to be used by all unique geometries to resize to.\n\t*/\n\tsetGeometrySize( maxVertexCount, maxIndexCount ) {\n\n\t\t// Check if we can shrink to the requested vertex attribute size\n\t\tconst validRanges = [ ...this._geometryInfo ].filter( info => info.active );\n\t\tconst requiredVertexLength = Math.max( ...validRanges.map( range => range.vertexStart + range.reservedVertexCount ) );\n\t\tif ( requiredVertexLength > maxVertexCount ) {\n\n\t\t\tthrow new Error( `BatchedMesh: Geometry vertex values are being used outside the range ${ maxIndexCount }. Cannot shrink further.` );\n\n\t\t}\n\n\t\t// Check if we can shrink to the requested index attribute size\n\t\tif ( this.geometry.index ) {\n\n\t\t\tconst requiredIndexLength = Math.max( ...validRanges.map( range => range.indexStart + range.reservedIndexCount ) );\n\t\t\tif ( requiredIndexLength > maxIndexCount ) {\n\n\t\t\t\tthrow new Error( `BatchedMesh: Geometry index values are being used outside the range ${ maxIndexCount }. Cannot shrink further.` );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\t// dispose of the previous geometry\n\t\tconst oldGeometry = this.geometry;\n\t\toldGeometry.dispose();\n\n\t\t// recreate the geometry needed based on the previous variant\n\t\tthis._maxVertexCount = maxVertexCount;\n\t\tthis._maxIndexCount = maxIndexCount;\n\n\t\tif ( this._geometryInitialized ) {\n\n\t\t\tthis._geometryInitialized = false;\n\t\t\tthis.geometry = new BufferGeometry();\n\t\t\tthis._initializeGeometry( oldGeometry );\n\n\t\t}\n\n\t\t// copy data from the previous geometry\n\t\tconst geometry = this.geometry;\n\t\tif ( oldGeometry.index ) {\n\n\t\t\tcopyArrayContents( oldGeometry.index.array, geometry.index.array );\n\n\t\t}\n\n\t\tfor ( const key in oldGeometry.attributes ) {\n\n\t\t\tcopyArrayContents( oldGeometry.attributes[ key ].array, geometry.attributes[ key ].array );\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst batchGeometry = this.geometry;\n\n\t\t// iterate over each geometry\n\t\t_mesh.material = this.material;\n\t\t_mesh.geometry.index = batchGeometry.index;\n\t\t_mesh.geometry.attributes = batchGeometry.attributes;\n\t\tif ( _mesh.geometry.boundingBox === null ) {\n\n\t\t\t_mesh.geometry.boundingBox = new Box3();\n\n\t\t}\n\n\t\tif ( _mesh.geometry.boundingSphere === null ) {\n\n\t\t\t_mesh.geometry.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( ! instanceInfo[ i ].visible || ! instanceInfo[ i ].active ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\t\t\tconst geometryInfo = geometryInfoList[ geometryId ];\n\t\t\t_mesh.geometry.setDrawRange( geometryInfo.start, geometryInfo.count );\n\n\t\t\t// get the intersects\n\t\t\tthis.getMatrixAt( i, _mesh.matrixWorld ).premultiply( matrixWorld );\n\t\t\tthis.getBoundingBoxAt( geometryId, _mesh.geometry.boundingBox );\n\t\t\tthis.getBoundingSphereAt( geometryId, _mesh.geometry.boundingSphere );\n\t\t\t_mesh.raycast( raycaster, _batchIntersects );\n\n\t\t\t// add batch id to the intersects\n\t\t\tfor ( let j = 0, l = _batchIntersects.length; j < l; j ++ ) {\n\n\t\t\t\tconst intersect = _batchIntersects[ j ];\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersect.batchId = i;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_batchIntersects.length = 0;\n\n\t\t}\n\n\t\t_mesh.material = null;\n\t\t_mesh.geometry.index = null;\n\t\t_mesh.geometry.attributes = {};\n\t\t_mesh.geometry.setDrawRange( 0, Infinity );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.geometry = source.geometry.clone();\n\t\tthis.perObjectFrustumCulled = source.perObjectFrustumCulled;\n\t\tthis.sortObjects = source.sortObjects;\n\t\tthis.boundingBox = source.boundingBox !== null ? source.boundingBox.clone() : null;\n\t\tthis.boundingSphere = source.boundingSphere !== null ? source.boundingSphere.clone() : null;\n\n\t\tthis._geometryInfo = source._geometryInfo.map( info => ( {\n\t\t\t...info,\n\n\t\t\tboundingBox: info.boundingBox !== null ? info.boundingBox.clone() : null,\n\t\t\tboundingSphere: info.boundingSphere !== null ? info.boundingSphere.clone() : null,\n\t\t} ) );\n\t\tthis._instanceInfo = source._instanceInfo.map( info => ( { ...info } ) );\n\n\t\tthis._maxInstanceCount = source._maxInstanceCount;\n\t\tthis._maxVertexCount = source._maxVertexCount;\n\t\tthis._maxIndexCount = source._maxIndexCount;\n\n\t\tthis._geometryInitialized = source._geometryInitialized;\n\t\tthis._geometryCount = source._geometryCount;\n\t\tthis._multiDrawCounts = source._multiDrawCounts.slice();\n\t\tthis._multiDrawStarts = source._multiDrawStarts.slice();\n\n\t\tthis._matricesTexture = source._matricesTexture.clone();\n\t\tthis._matricesTexture.image.data = this._matricesTexture.image.data.slice();\n\n\t\tif ( this._colorsTexture !== null ) {\n\n\t\t\tthis._colorsTexture = source._colorsTexture.clone();\n\t\t\tthis._colorsTexture.image.data = this._colorsTexture.image.data.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\t// Assuming the geometry is not shared with other meshes\n\t\tthis.geometry.dispose();\n\n\t\tthis._matricesTexture.dispose();\n\t\tthis._matricesTexture = null;\n\n\t\tthis._indirectTexture.dispose();\n\t\tthis._indirectTexture = null;\n\n\t\tif ( this._colorsTexture !== null ) {\n\n\t\t\tthis._colorsTexture.dispose();\n\t\t\tthis._colorsTexture = null;\n\n\t\t}\n\n\t}\n\n\tonBeforeRender( renderer, scene, camera, geometry, material/*, _group*/ ) {\n\n\t\t// if visibility has not changed and frustum culling and object sorting is not required\n\t\t// then skip iterating over all items\n\t\tif ( ! this._visibilityChanged && ! this.perObjectFrustumCulled && ! this.sortObjects ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// the indexed version of the multi draw function requires specifying the start\n\t\t// offset in bytes.\n\t\tconst index = geometry.getIndex();\n\t\tconst bytesPerElement = index === null ? 1 : index.array.BYTES_PER_ELEMENT;\n\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tconst multiDrawStarts = this._multiDrawStarts;\n\t\tconst multiDrawCounts = this._multiDrawCounts;\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tconst perObjectFrustumCulled = this.perObjectFrustumCulled;\n\t\tconst indirectTexture = this._indirectTexture;\n\t\tconst indirectArray = indirectTexture.image.data;\n\n\t\t// prepare the frustum in the local frame\n\t\tif ( perObjectFrustumCulled ) {\n\n\t\t\t_matrix$1\n\t\t\t\t.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse )\n\t\t\t\t.multiply( this.matrixWorld );\n\t\t\t_frustum.setFromProjectionMatrix(\n\t\t\t\t_matrix$1,\n\t\t\t\trenderer.coordinateSystem\n\t\t\t);\n\n\t\t}\n\n\t\tlet multiDrawCount = 0;\n\t\tif ( this.sortObjects ) {\n\n\t\t\t// get the camera position in the local frame\n\t\t\t_matrix$1.copy( this.matrixWorld ).invert();\n\t\t\t_vector$5.setFromMatrixPosition( camera.matrixWorld ).applyMatrix4( _matrix$1 );\n\t\t\t_forward.set( 0, 0, -1 ).transformDirection( camera.matrixWorld ).transformDirection( _matrix$1 );\n\n\t\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\t\tif ( instanceInfo[ i ].visible && instanceInfo[ i ].active ) {\n\n\t\t\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\n\t\t\t\t\t// get the bounds in world space\n\t\t\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\t\t\tthis.getBoundingSphereAt( geometryId, _sphere$2 ).applyMatrix4( _matrix$1 );\n\n\t\t\t\t\t// determine whether the batched geometry is within the frustum\n\t\t\t\t\tlet culled = false;\n\t\t\t\t\tif ( perObjectFrustumCulled ) {\n\n\t\t\t\t\t\tculled = ! _frustum.intersectsSphere( _sphere$2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! culled ) {\n\n\t\t\t\t\t\t// get the distance from camera used for sorting\n\t\t\t\t\t\tconst geometryInfo = geometryInfoList[ geometryId ];\n\t\t\t\t\t\tconst z = _temp.subVectors( _sphere$2.center, _vector$5 ).dot( _forward );\n\t\t\t\t\t\t_renderList.push( geometryInfo.start, geometryInfo.count, z, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Sort the draw ranges and prep for rendering\n\t\t\tconst list = _renderList.list;\n\t\t\tconst customSort = this.customSort;\n\t\t\tif ( customSort === null ) {\n\n\t\t\t\tlist.sort( material.transparent ? sortTransparent : sortOpaque );\n\n\t\t\t} else {\n\n\t\t\t\tcustomSort.call( this, list, camera );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = list.length; i < l; i ++ ) {\n\n\t\t\t\tconst item = list[ i ];\n\t\t\t\tmultiDrawStarts[ multiDrawCount ] = item.start * bytesPerElement;\n\t\t\t\tmultiDrawCounts[ multiDrawCount ] = item.count;\n\t\t\t\tindirectArray[ multiDrawCount ] = item.index;\n\t\t\t\tmultiDrawCount ++;\n\n\t\t\t}\n\n\t\t\t_renderList.reset();\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\t\tif ( instanceInfo[ i ].visible && instanceInfo[ i ].active ) {\n\n\t\t\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\n\t\t\t\t\t// determine whether the batched geometry is within the frustum\n\t\t\t\t\tlet culled = false;\n\t\t\t\t\tif ( perObjectFrustumCulled ) {\n\n\t\t\t\t\t\t// get the bounds in world space\n\t\t\t\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\t\t\t\tthis.getBoundingSphereAt( geometryId, _sphere$2 ).applyMatrix4( _matrix$1 );\n\t\t\t\t\t\tculled = ! _frustum.intersectsSphere( _sphere$2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! culled ) {\n\n\t\t\t\t\t\tconst geometryInfo = geometryInfoList[ geometryId ];\n\t\t\t\t\t\tmultiDrawStarts[ multiDrawCount ] = geometryInfo.start * bytesPerElement;\n\t\t\t\t\t\tmultiDrawCounts[ multiDrawCount ] = geometryInfo.count;\n\t\t\t\t\t\tindirectArray[ multiDrawCount ] = i;\n\t\t\t\t\t\tmultiDrawCount ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tindirectTexture.needsUpdate = true;\n\t\tthis._multiDrawCount = multiDrawCount;\n\t\tthis._visibilityChanged = false;\n\n\t}\n\n\tonBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial/* , group */ ) {\n\n\t\tthis.onBeforeRender( renderer, null, shadowCamera, geometry, depthMaterial );\n\n\t}\n\n}\n\nclass LineBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineBasicMaterial = true;\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _vStart = /*@__PURE__*/ new Vector3();\nconst _vEnd = /*@__PURE__*/ new Vector3();\n\nconst _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _ray$1 = /*@__PURE__*/ new Ray();\nconst _sphere$1 = /*@__PURE__*/ new Sphere();\n\nconst _intersectPointOnRay = /*@__PURE__*/ new Vector3();\nconst _intersectPointOnSegment = /*@__PURE__*/ new Vector3();\n\n/**\n * A continuous line. The line are rendered by connecting consecutive\n * vertices with straight lines.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n *\n * const points = [];\n * points.push( new THREE.Vector3( - 10, 0, 0 ) );\n * points.push( new THREE.Vector3( 0, 10, 0 ) );\n * points.push( new THREE.Vector3( 10, 0, 0 ) );\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments Object3D\n */\nclass Line extends Object3D {\n\n\t/**\n\t * Constructs a new line.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLine = true;\n\n\t\tthis.type = 'Line';\n\n\t\t/**\n\t\t * The line geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = geometry;\n\n\t\t/**\n\t\t * The line material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default LineBasicMaterial\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetDictionary = undefined;\n\n\t\t/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetInfluences = undefined;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes an array of distance values which are necessary for rendering dashed lines.\n\t * For each vertex in the geometry, the method calculates the cumulative length from the\n\t * current point to the very beginning of the line.\n\t *\n\t * @return {Line} A reference to this line.\n\t */\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [ 0 ];\n\n\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t_vStart.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t_vEnd.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i ] += _vStart.distanceTo( _vEnd );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this line.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Line.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere );\n\t\t_sphere$1.applyMatrix4( matrixWorld );\n\t\t_sphere$1.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.copy( matrixWorld ).invert();\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tconst a = index.getX( i );\n\t\t\t\tconst b = index.getX( i + 1 );\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, a, b, i );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.isLineLoop ) {\n\n\t\t\t\tconst a = index.getX( end - 1 );\n\t\t\t\tconst b = index.getX( start );\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, a, b, end - 1 );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, i, i + 1, i );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.isLineLoop ) {\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, end - 1, start, end - 1 );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the values of {@link Line#morphTargetDictionary} and {@link Line#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection( object, raycaster, ray, thresholdSq, a, b, i ) {\n\n\tconst positionAttribute = object.geometry.attributes.position;\n\n\t_vStart.fromBufferAttribute( positionAttribute, a );\n\t_vEnd.fromBufferAttribute( positionAttribute, b );\n\n\tconst distSq = ray.distanceSqToSegment( _vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment );\n\n\tif ( distSq > thresholdSq ) return;\n\n\t_intersectPointOnRay.applyMatrix4( object.matrixWorld ); // Move back to world space for distance calculation\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectPointOnRay );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\treturn {\n\n\t\tdistance: distance,\n\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t// point: raycaster.ray.at( distance ),\n\t\tpoint: _intersectPointOnSegment.clone().applyMatrix4( object.matrixWorld ),\n\t\tindex: i,\n\t\tface: null,\n\t\tfaceIndex: null,\n\t\tbarycoord: null,\n\t\tobject: object\n\n\t};\n\n}\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\n/**\n * A series of lines drawn between pairs of vertices.\n *\n * @augments Line\n */\nclass LineSegments extends Line {\n\n\t/**\n\t * Constructs a new line segments.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineSegments = true;\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [];\n\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A continuous line. This is nearly the same as {@link Line} the only difference\n * is that the last vertex is connected with the first vertex in order to close\n * the line to form a loop.\n *\n * @augments Line\n */\nclass LineLoop extends Line {\n\n\t/**\n\t * Constructs a new line loop.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineLoop = true;\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n}\n\nclass PointsMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isPointsMaterial = true;\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _position$2 = /*@__PURE__*/ new Vector3();\n\n/**\n * A class for displaying points or point clouds.\n *\n * @augments Object3D\n */\nclass Points extends Object3D {\n\n\t/**\n\t * Constructs a new point cloud.\n\t *\n\t * @param {BufferGeometry} [geometry] - The points geometry.\n\t * @param {Material|Array<Material>} [material] - The points material.\n\t */\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPoints = true;\n\n\t\tthis.type = 'Points';\n\n\t\t/**\n\t\t * The points geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = geometry;\n\n\t\t/**\n\t\t * The line material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default PointsMaterial\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetDictionary = undefined;\n\n\t\t/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetInfluences = undefined;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this point cloud.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\t\t_sphere.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\n\n\t\t\t\tconst a = index.getX( i );\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, a );\n\n\t\t\t\ttestPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\ttestPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the values of {@link Points#morphTargetDictionary} and {@link Points#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tconst intersectPoint = new Vector3();\n\n\t\t_ray.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tfaceIndex: null,\n\t\t\tbarycoord: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\nclass VideoTexture extends Texture {\n\n\tconstructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isVideoTexture = true;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tconst scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.image ).copy( this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst video = this.image;\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass VideoFrameTexture extends VideoTexture {\n\n\tconstructor( mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( {}, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isVideoFrameTexture = true;\n\n\t}\n\n\tupdate() {\n\n\t\t// overwrites `VideoTexture.update()` with an empty method since\n\t\t// this type of texture is updated via `setFrame()`.\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this ); // restoring Texture.clone()\n\n\t}\n\n\tsetFrame( frame ) {\n\n\t\tthis.image = frame;\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nclass FramebufferTexture extends Texture {\n\n\tconstructor( width, height ) {\n\n\t\tsuper( { width, height } );\n\n\t\tthis.isFramebufferTexture = true;\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nclass CompressedTexture extends Texture {\n\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isCompressedTexture = true;\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n}\n\nclass CompressedArrayTexture extends CompressedTexture {\n\n\tconstructor( mipmaps, width, height, depth, format, type ) {\n\n\t\tsuper( mipmaps, width, height, format, type );\n\n\t\tthis.isCompressedArrayTexture = true;\n\t\tthis.image.depth = depth;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.layerUpdates = new Set();\n\n\t}\n\n\taddLayerUpdate( layerIndex ) {\n\n\t\tthis.layerUpdates.add( layerIndex );\n\n\t}\n\n\tclearLayerUpdates() {\n\n\t\tthis.layerUpdates.clear();\n\n\t}\n\n}\n\nclass CompressedCubeTexture extends CompressedTexture {\n\n\tconstructor( images, format, type ) {\n\n\t\tsuper( undefined, images[ 0 ].width, images[ 0 ].height, format, type, CubeReflectionMapping );\n\n\t\tthis.isCompressedCubeTexture = true;\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.image = images;\n\n\t}\n\n}\n\nclass CanvasTexture extends Texture {\n\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isCanvasTexture = true;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nclass DepthTexture extends Texture {\n\n\tconstructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format = DepthFormat ) {\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedIntType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isDepthTexture = true;\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.compareFunction = null;\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.source = new Source( Object.assign( {}, source.image ) ); // see #30540\n\t\tthis.compareFunction = source.compareFunction;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * An abstract base class for creating an analytic curve object that contains methods\n * for interpolation.\n *\n * @abstract\n */\nclass Curve {\n\n\t/**\n\t * Constructs a new curve.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Curve';\n\n\t\t/**\n\t\t * This value determines the amount of divisions when calculating the\n\t\t * cumulative segment lengths of a curve via {@link Curve#getLengths}. To ensure\n\t\t * precision when using methods like {@link Curve#getSpacedPoints}, it is\n\t\t * recommended to increase the value of this property if the curve is very large.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 200\n\t\t */\n\t\tthis.arcLengthDivisions = 200;\n\n\t\t/**\n\t\t * Must be set to `true` if the curve parameters have changed.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsUpdate = false;\n\n\t\t/**\n\t\t * An internal cache that holds precomputed curve length values.\n\t\t *\n\t\t * @private\n\t\t * @type {?Array<number>}\n\t\t * @default null\n\t\t */\n\t\tthis.cacheArcLengths = null;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definition)\n\t * for the given interpolation factor.\n\t *\n\t * @abstract\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {?(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */\n\tgetPoint( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\n\t}\n\n\t/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definition)\n\t * for the given interpolation factor. Unlike {@link Curve#getPoint}, this method honors the length\n\t * of the curve which equidistant samples.\n\t *\n\t * @param {number} u - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */\n\tgetPointAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t}\n\n\t/**\n\t * This method samples the curve via {@link Curve#getPoint} and returns an array of points representing\n\t * the curve shape.\n\t *\n\t * @param {number} [divisions=5] - The number of divisions.\n\t * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n\t */\n\tgetPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get sequence of points using getPointAt( u )\n\n\t/**\n\t * This method samples the curve via {@link Curve#getPointAt} and returns an array of points representing\n\t * the curve shape. Unlike {@link Curve#getPoints}, this method returns equi-spaced points across the entire\n\t * curve.\n\t *\n\t * @param {number} [divisions=5] - The number of divisions.\n\t * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n\t */\n\tgetSpacedPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t/**\n\t * Returns the total arc length of the curve.\n\t *\n\t * @return {number} The length of the curve.\n\t */\n\tgetLength() {\n\n\t\tconst lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t}\n\n\t/**\n\t * Returns an array of cumulative segment lengths of the curve.\n\t *\n\t * @param {number} [divisions=this.arcLengthDivisions] - The number of divisions.\n\t * @return {Array<number>} An array holding the cumulative segment lengths.\n\t */\n\tgetLengths( divisions = this.arcLengthDivisions ) {\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tconst cache = [];\n\t\tlet current, last = this.getPoint( 0 );\n\t\tlet sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t}\n\n\t/**\n\t * Update the cumulative segment distance cache. The method must be called\n\t * every time curve parameters are changed. If an updated curve is part of a\n\t * composed curve like {@link CurvePath}, this method must be called on the\n\t * composed curve, too.\n\t */\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t}\n\n\t/**\n\t * Given an interpolation factor in the range `[0,1]`, this method returns an updated\n\t * interpolation factor in the same range that can be ued to sample equidistant points\n\t * from a curve.\n\t *\n\t * @param {number} u - The interpolation factor.\n\t * @param {?number} distance - An optional distance on the curve.\n\t * @return {number} The updated interpolation factor.\n\t */\n\tgetUtoTmapping( u, distance = null ) {\n\n\t\tconst arcLengths = this.getLengths();\n\n\t\tlet i = 0;\n\t\tconst il = arcLengths.length;\n\n\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tlet low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tconst lengthBefore = arcLengths[ i ];\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\n\n\t\tconst segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t}\n\n\t/**\n\t * Returns a unit vector tangent for the given interpolation factor.\n\t * If the derived curve does not implement its tangent derivation,\n\t * two points a small delta apart will be used to find its gradient\n\t * which seems to give a reasonable approximation.\n\t *\n\t * @param {number} t - The interpolation factor.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The tangent vector.\n\t */\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst delta = 0.0001;\n\t\tlet t1 = t - delta;\n\t\tlet t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tconst pt1 = this.getPoint( t1 );\n\t\tconst pt2 = this.getPoint( t2 );\n\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\t/**\n\t * Same as {@link Curve#getTangent} but with equidistant samples.\n\t *\n\t * @param {number} u - The interpolation factor.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The tangent vector.\n\t * @see {@link Curve#getPointAt}\n\t */\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t, optionalTarget );\n\n\t}\n\n\t/**\n\t * Generates the Frenet Frames. Requires a curve definition in 3D space. Used\n\t * in geometries like {@link TubeGeometry} or {@link ExtrudeGeometry}.\n\t *\n\t * @param {number} segments - The number of segments.\n\t * @param {boolean} [closed=false] - Whether the curve is closed or not.\n\t * @return {{tangents: Array<Vector3>, normals: Array<Vector3>, binormals: Array<Vector3>}} The Frenet Frames.\n\t */\n\tcomputeFrenetFrames( segments, closed = false ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tconst normal = new Vector3();\n\n\t\tconst tangents = [];\n\t\tconst normals = [];\n\t\tconst binormals = [];\n\n\t\tconst vec = new Vector3();\n\t\tconst mat = new Matrix4();\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst u = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tlet min = Number.MAX_VALUE;\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\tconst theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), -1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\tlet theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), -1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t}\n\n\t/**\n\t * Returns a new curve with copied values from this instance.\n\t *\n\t * @return {Curve} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given curve to this instance.\n\t *\n\t * @param {Curve} source - The curve to copy.\n\t * @return {Curve} A reference to this curve.\n\t */\n\tcopy( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the curve into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized curve.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Deserializes the curve from the given JSON.\n\t *\n\t * @param {Object} json - The JSON holding the serialized curve.\n\t * @return {Curve} A reference to this curve.\n\t */\n\tfromJSON( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing an ellipse.\n *\n * ```js\n * const curve = new THREE.EllipseCurve(\n * \t0, 0,\n * \t10, 10,\n * \t0, 2 * Math.PI,\n * \tfalse,\n * \t0\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const ellipse = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass EllipseCurve extends Curve {\n\n\t/**\n\t * Constructs a new ellipse curve.\n\t *\n\t * @param {number} [aX=0] - The X center of the ellipse.\n\t * @param {number} [aY=0] - The Y center of the ellipse.\n\t * @param {number} [xRadius=1] - The radius of the ellipse in the x direction.\n\t * @param {number} [yRadius=1] - The radius of the ellipse in the y direction.\n\t * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n\t * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n\t * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t */\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isEllipseCurve = true;\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\t/**\n\t\t * The X center of the ellipse.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aX = aX;\n\n\t\t/**\n\t\t * The Y center of the ellipse.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aY = aY;\n\n\t\t/**\n\t\t * The radius of the ellipse in the x direction.\n\t\t * Setting the this value equal to the {@link EllipseCurve#yRadius} will result in a circle.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.xRadius = xRadius;\n\n\t\t/**\n\t\t * The radius of the ellipse in the y direction.\n\t\t * Setting the this value equal to the {@link EllipseCurve#xRadius} will result in a circle.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.yRadius = yRadius;\n\n\t\t/**\n\t\t * The start angle of the curve in radians starting from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aStartAngle = aStartAngle;\n\n\t\t/**\n\t\t * The end angle of the curve in radians starting from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI*2\n\t\t */\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\t/**\n\t\t * Whether the ellipse is drawn clockwise or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.aClockwise = aClockwise;\n\n\t\t/**\n\t\t * The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aRotation = aRotation;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst twoPi = Math.PI * 2;\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tconst cos = Math.cos( this.aRotation );\n\t\t\tconst sin = Math.sin( this.aRotation );\n\n\t\t\tconst tx = x - this.aX;\n\t\t\tconst ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing an arc.\n *\n * @augments EllipseCurve\n */\nclass ArcCurve extends EllipseCurve {\n\n\t/**\n\t * Constructs a new arc curve.\n\t *\n\t * @param {number} [aX=0] - The X center of the ellipse.\n\t * @param {number} [aY=0] - The Y center of the ellipse.\n\t * @param {number} [aRadius=1] - The radius of the ellipse in the x direction.\n\t * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n\t * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n\t * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n\t */\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArcCurve = true;\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n}\n\nfunction CubicPoly() {\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t* cusps and self-intersections in non-uniform catmull rom curves.\n\t* http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t*\n\t* curve.type accepts centripetal(default), chordal and catmullrom\n\t* curve.tension is used for catmullrom which defaults to 0.5\n\t*/\n\n\t/*\n\tBased on an optimized c++ solution in\n\t- http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t- http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = /*@__PURE__*/ new Vector3();\nconst px = /*@__PURE__*/ new CubicPoly();\nconst py = /*@__PURE__*/ new CubicPoly();\nconst pz = /*@__PURE__*/ new CubicPoly();\n\n/**\n * A curve representing a Catmull-Rom spline.\n *\n * ```js\n * //Create a closed wavey loop\n * const curve = new THREE.CatmullRomCurve3( [\n * \tnew THREE.Vector3( -10, 0, 10 ),\n * \tnew THREE.Vector3( -5, 5, 5 ),\n * \tnew THREE.Vector3( 0, 0, 0 ),\n * \tnew THREE.Vector3( 5, -5, 5 ),\n * \tnew THREE.Vector3( 10, 0, 10 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CatmullRomCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new Catmull-Rom curve.\n\t *\n\t * @param {Array<Vector3>} [points] - An array of 3D points defining the curve.\n\t * @param {boolean} [closed=false] - Whether the curve is closed or not.\n\t * @param {('centripetal'|'chordal'|'catmullrom')} [curveType='centripetal'] - The curve type.\n\t * @param {number} [tension=0.5] - Tension of the curve.\n\t */\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCatmullRomCurve3 = true;\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\t/**\n\t\t * An array of 3D points defining the curve.\n\t\t *\n\t\t * @type {Array<Vector3>}\n\t\t */\n\t\tthis.points = points;\n\n\t\t/**\n\t\t * Whether the curve is closed or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.closed = closed;\n\n\t\t/**\n\t\t * The curve type.\n\t\t *\n\t\t * @type {('centripetal'|'chordal'|'catmullrom')}\n\t\t * @default 'centripetal'\n\t\t */\n\t\tthis.curveType = curveType;\n\n\t\t/**\n\t\t * Tension of the curve.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */\n\t\tthis.tension = tension;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// Bezier Curves formulas obtained from: https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n/**\n * Computes a point on a Catmull-Rom spline.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Catmull-Rom spline.\n */\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( -3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\n/**\n * Computes a point on a Quadratic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @return {number} The calculated point on a Quadratic Bezier curve.\n */\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\n/**\n * Computes a point on a Cubic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Cubic Bezier curve.\n */\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\n/**\n * A curve representing a 2D Cubic Bezier curve.\n *\n * ```js\n * const curve = new THREE.CubicBezierCurve(\n * \tnew THREE.Vector2( - 0, 0 ),\n * \tnew THREE.Vector2( - 5, 15 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CubicBezierCurve extends Curve {\n\n\t/**\n\t * Constructs a new Cubic Bezier curve.\n\t *\n\t * @param {Vector2} [v0] - The start point.\n\t * @param {Vector2} [v1] - The first control point.\n\t * @param {Vector2} [v2] - The second control point.\n\t * @param {Vector2} [v3] - The end point.\n\t */\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubicBezierCurve = true;\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The first control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The second control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v3 = v3;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 3D Cubic Bezier curve.\n *\n * @augments Curve\n */\nclass CubicBezierCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new Cubic Bezier curve.\n\t *\n\t * @param {Vector3} [v0] - The start point.\n\t * @param {Vector3} [v1] - The first control point.\n\t * @param {Vector3} [v2] - The second control point.\n\t * @param {Vector3} [v3] - The end point.\n\t */\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubicBezierCurve3 = true;\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The first control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The second control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v3 = v3;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 2D line segment.\n *\n * @augments Curve\n */\nclass LineCurve extends Curve {\n\n\t/**\n\t * Constructs a new line curve.\n\t *\n\t * @param {Vector2} [v1] - The start point.\n\t * @param {Vector2} [v2] - The end point.\n\t */\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineCurve = true;\n\n\t\tthis.type = 'LineCurve';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the line.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the line.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector2() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 3D line segment.\n *\n * @augments Curve\n */\nclass LineCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new line curve.\n\t *\n\t * @param {Vector3} [v1] - The start point.\n\t * @param {Vector3} [v2] - The end point.\n\t */\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineCurve3 = true;\n\n\t\tthis.type = 'LineCurve3';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the line.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the line.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector3() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 2D Quadratic Bezier curve.\n *\n * ```js\n * const curve = new THREE.QuadraticBezierCurve(\n * \tnew THREE.Vector2( - 10, 0 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * )\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass QuadraticBezierCurve extends Curve {\n\n\t/**\n\t * Constructs a new Quadratic Bezier curve.\n\t *\n\t * @param {Vector2} [v0] - The start point.\n\t * @param {Vector2} [v1] - The control point.\n\t * @param {Vector2} [v2] - The end point.\n\t */\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuadraticBezierCurve = true;\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 3D Quadratic Bezier curve.\n *\n * @augments Curve\n */\nclass QuadraticBezierCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new Quadratic Bezier curve.\n\t *\n\t * @param {Vector3} [v0] - The start point.\n\t * @param {Vector3} [v1] - The control point.\n\t * @param {Vector3} [v2] - The end point.\n\t */\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuadraticBezierCurve3 = true;\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 2D spline curve.\n *\n * ```js\n * // Create a sine-like wave\n * const curve = new THREE.SplineCurve( [\n * \tnew THREE.Vector2( -10, 0 ),\n * \tnew THREE.Vector2( -5, 5 ),\n * \tnew THREE.Vector2( 0, 0 ),\n * \tnew THREE.Vector2( 5, -5 ),\n * \tnew THREE.Vector2( 10, 0 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const splineObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass SplineCurve extends Curve {\n\n\t/**\n\t * Constructs a new 2D spline curve.\n\t *\n\t * @param {Array<Vector2>} [points] -  An array of 2D points defining the curve.\n\t */\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSplineCurve = true;\n\n\t\tthis.type = 'SplineCurve';\n\n\t\t/**\n\t\t * An array of 2D points defining the curve.\n\t\t *\n\t\t * @type {Array<Vector2>}\n\t\t */\n\t\tthis.points = points;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**\n * A base class extending {@link Curve}. `CurvePath` is simply an\n * array of connected curves, but retains the API of a curve.\n *\n * @augments Curve\n */\nclass CurvePath extends Curve {\n\n\t/**\n\t * Constructs a new curve path.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'CurvePath';\n\n\t\t/**\n\t\t * An array of curves defining the\n\t\t * path.\n\t\t *\n\t\t * @type {Array<Curve>}\n\t\t */\n\t\tthis.curves = [];\n\n\t\t/**\n\t\t * Whether the path should automatically be closed\n\t\t * by a line curve.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.autoClose = false;\n\n\t}\n\n\t/**\n\t * Adds a curve to this curve path.\n\t *\n\t * @param {Curve} curve - The curve to add.\n\t */\n\tadd( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t}\n\n\t/**\n\t * Adds a line curve to close the path.\n\t *\n\t * @return {CurvePath} A reference to this curve path.\n\t */\n\tclosePath() {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tconst lineType = ( startPoint.isVector2 === true ) ? 'LineCurve' : 'LineCurve3';\n\t\t\tthis.curves.push( new Curves[ lineType ]( endPoint, startPoint ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definitions)\n\t * for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {?(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */\n\tgetPoint( t, optionalTarget ) {\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tconst d = t * this.getLength();\n\t\tconst curveLengths = this.getCurveLengths();\n\t\tlet i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tconst diff = curveLengths[ i ] - d;\n\t\t\t\tconst curve = this.curves[ i ];\n\n\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t}\n\n\tgetLength() {\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tconst lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t}\n\n\tupdateArcLengths() {\n\n\t\t// cacheLengths must be recalculated.\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t}\n\n\t/**\n\t * Returns list of cumulative curve lengths of the defined curves.\n\t *\n\t * @return {Array<number>} The curve lengths.\n\t */\n\tgetCurveLengths() {\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tconst lengths = [];\n\t\tlet sums = 0;\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t}\n\n\tgetSpacedPoints( divisions = 40 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tgetPoints( divisions = 12 ) {\n\n\t\tconst points = [];\n\t\tlet last;\n\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tconst curve = curves[ i ];\n\t\t\tconst resolution = curve.isEllipseCurve ? divisions * 2\n\t\t\t\t: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1\n\t\t\t\t\t: curve.isSplineCurve ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tconst pts = curve.getPoints( resolution );\n\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tconst point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A 2D path representation. The class provides methods for creating paths\n * and contours of 2D shapes similar to the 2D Canvas API.\n *\n * ```js\n * const path = new THREE.Path();\n *\n * path.lineTo( 0, 0.8 );\n * path.quadraticCurveTo( 0, 1, 0.2, 1 );\n * path.lineTo( 1, 1 );\n *\n * const points = path.getPoints();\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments CurvePath\n */\nclass Path extends CurvePath {\n\n\t/**\n\t * Constructs a new path.\n\t *\n\t * @param {Array<Vector2>} [points] - An array of 2D points defining the path.\n\t */\n\tconstructor( points ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Path';\n\n\t\t/**\n\t\t * The current offset of the path. Any new curve added will start here.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Creates a path from the given list of points. The points are added\n\t * to the path as instances of {@link LineCurve}.\n\t *\n\t * @param {Array<Vector2>} points - An array of 2D points.\n\t * @return {Path} A reference to this path.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Moves {@link Path#currentPoint} to the given point.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @return {Path} A reference to this path.\n\t */\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link LineCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} x - The x coordinate of the end point.\n\t * @param {number} y - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCPx - The x coordinate of the control point.\n\t * @param {number} aCPy - The y coordinate of the control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCP1x - The x coordinate of the first control point.\n\t * @param {number} aCP1y - The y coordinate of the first control point.\n\t * @param {number} aCP2x - The x coordinate of the second control point.\n\t * @param {number} aCP2y - The y coordinate of the second control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link SplineCurve} to the path by connecting\n\t * the current point with the given list of points.\n\t *\n\t * @param {Array<Vector2>} pts - An array of points in 2D space.\n\t * @return {Path} A reference to this path.\n\t */\n\tsplineThru( pts ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an arc as an instance of {@link EllipseCurve} to the path, positioned relative\n\t * to the current point.\n\t *\n\t * @param {number} aX - The x coordinate of the center of the arc offsetted from the previous curve.\n\t * @param {number} aY - The y coordinate of the center of the arc offsetted from the previous curve.\n\t * @param {number} aRadius - The radius of the arc.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n\t * @return {Path} A reference to this path.\n\t */\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an absolutely positioned arc as an instance of {@link EllipseCurve} to the path.\n\t *\n\t * @param {number} aX - The x coordinate of the center of the arc.\n\t * @param {number} aY - The y coordinate of the center of the arc.\n\t * @param {number} aRadius - The radius of the arc.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n\t * @return {Path} A reference to this path.\n\t */\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an ellipse as an instance of {@link EllipseCurve} to the path, positioned relative\n\t * to the current point\n\t *\n\t * @param {number} aX - The x coordinate of the center of the ellipse offsetted from the previous curve.\n\t * @param {number} aY - The y coordinate of the center of the ellipse offsetted from the previous curve.\n\t * @param {number} xRadius - The radius of the ellipse in the x axis.\n\t * @param {number} yRadius - The radius of the ellipse in the y axis.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n\t * @param {boolean} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t * @return {Path} A reference to this path.\n\t */\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an absolutely positioned ellipse as an instance of {@link EllipseCurve} to the path.\n\t *\n\t * @param {number} aX - The x coordinate of the absolute center of the ellipse.\n\t * @param {number} aY - The y coordinate of the absolute center of the ellipse.\n\t * @param {number} xRadius - The radius of the ellipse in the x axis.\n\t * @param {number} yRadius - The radius of the ellipse in the y axis.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t * @return {Path} A reference to this path.\n\t */\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Creates meshes with axial symmetry like vases. The lathe rotates around the Y axis.\n *\n * ```js\n * const points = [];\n * for ( let i = 0; i < 10; i ++ ) {\n * \tpoints.push( new THREE.Vector2( Math.sin( i * 0.2 ) * 10 + 5, ( i - 5 ) * 2 ) );\n * }\n * const geometry = new THREE.LatheGeometry( points );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const lathe = new THREE.Mesh( geometry, material );\n * scene.add( lathe );\n * ```\n *\n * @augments BufferGeometry\n */\nclass LatheGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new lathe geometry.\n\t *\n\t * @param {Array<Vector2>} [points] - An array of points in 2D space. The x-coordinate of each point\n\t * must be greater than zero.\n\t * @param {number} [segments=12] - The number of circumference segments to generate.\n\t * @param {number} [phiStart=0] - The starting angle in radians.\n\t * @param {number} [phiLength=Math.PI*2] - The radian (0 to 2PI) range of the lathed section 2PI is a\n\t * closed lathe, less than 2PI is a portion.\n\t */\n\tconstructor( points = [ new Vector2( 0, -0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments );\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst uvs = [];\n\t\tconst initNormals = [];\n\t\tconst normals = [];\n\n\t\t// helper variables\n\n\t\tconst inverseSegments = 1.0 / segments;\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tconst normal = new Vector3();\n\t\tconst curNormal = new Vector3();\n\t\tconst prevNormal = new Vector3();\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\n\t\t// pre-compute normals for initial \"meridian\"\n\n\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\tswitch ( j ) {\n\n\t\t\t\tcase 0:\t\t\t\t// special handling for 1st vertex on path\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tprevNormal.copy( normal );\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ( points.length - 1 ):\t// special handling for last Vertex on path\n\n\t\t\t\t\tinitNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\t\t\t// default handling for all vertices in between\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tcurNormal.copy( normal );\n\n\t\t\t\t\tnormal.x += prevNormal.x;\n\t\t\t\t\tnormal.y += prevNormal.y;\n\t\t\t\t\tnormal.z += prevNormal.z;\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tprevNormal.copy( curNormal );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices, uvs and normals\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tconst sin = Math.sin( phi );\n\t\t\tconst cos = Math.cos( phi );\n\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// normal\n\n\t\t\t\tconst x = initNormals[ 3 * j + 0 ] * sin;\n\t\t\t\tconst y = initNormals[ 3 * j + 1 ];\n\t\t\t\tconst z = initNormals[ 3 * j + 0 ] * cos;\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tconst base = j + i * points.length;\n\n\t\t\t\tconst a = base;\n\t\t\t\tconst b = base + points.length;\n\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\tconst d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( c, d, b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {LatheGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for a capsule with given radii and height. It is constructed using a lathe.\n *\n * ```js\n * const geometry = new THREE.CapsuleGeometry( 1, 1, 4, 8 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const capsule = new THREE.Mesh( geometry, material );\n * scene.add( capsule );\n * ```\n *\n * @augments LatheGeometry\n */\nclass CapsuleGeometry extends LatheGeometry {\n\n\t/**\n\t * Constructs a new capsule geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the capsule.\n\t * @param {number} [length=1] - Length of the middle section.\n\t * @param {number} [capSegments=4] - Number of curve segments used to build the caps.\n\t * @param {number} [radialSegments=8] - Number of segmented faces around the circumference of the capsule.\n\t */\n\tconstructor( radius = 1, length = 1, capSegments = 4, radialSegments = 8 ) {\n\n\t\tconst path = new Path();\n\t\tpath.absarc( 0, - length / 2, radius, Math.PI * 1.5, 0 );\n\t\tpath.absarc( 0, length / 2, radius, 0, Math.PI * 0.5 );\n\n\t\tsuper( path.getPoints( capSegments ), radialSegments );\n\n\t\tthis.type = 'CapsuleGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tlength: length,\n\t\t\tcapSegments: capSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CapsuleGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new CapsuleGeometry( data.radius, data.length, data.capSegments, data.radialSegments );\n\n\t}\n\n}\n\n/**\n * A simple shape of Euclidean geometry. It is constructed from a\n * number of triangular segments that are oriented around a central point and\n * extend as far out as a given radius. It is built counter-clockwise from a\n * start angle and a given central angle. It can also be used to create\n * regular polygons, where the number of segments determines the number of\n * sides.\n *\n * ```js\n * const geometry = new THREE.CircleGeometry( 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const circle = new THREE.Mesh( geometry, material );\n * scene.add( circle )\n * ```\n *\n * @augments BufferGeometry\n */\nclass CircleGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new circle geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the circle.\n\t * @param {number} [segments=32] - Number of segments (triangles), minimum = `3`.\n\t * @param {number} [thetaStart=0] - Start angle for first segment in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta,\n\t * of the circular sector in radians. The default value results in a complete circle.\n\t */\n\tconstructor( radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tsegments = Math.max( 3, segments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CircleGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a cylinder.\n *\n * ```js\n * const geometry = new THREE.CylinderGeometry( 5, 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cylinder = new THREE.Mesh( geometry, material );\n * scene.add( cylinder );\n * ```\n *\n * @augments BufferGeometry\n */\nclass CylinderGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new cylinder geometry.\n\t *\n\t * @param {number} [radiusTop=1] - Radius of the cylinder at the top.\n\t * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.\n\t * @param {number} [height=1] - Height of the cylinder.\n\t * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.\n\t * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.\n\t * @param {boolean} [thetaStart=0] - Start angle for first segment, in radians.\n\t * @param {boolean} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n\t * The default value results in a complete cylinder.\n\t */\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tconst scope = this;\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet index = 0;\n\t\tconst indexArray = [];\n\t\tconst halfHeight = height / 2;\n\t\tlet groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tconst normal = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tconst indexRow = [];\n\n\t\t\t\tconst v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tconst u = x / radialSegments;\n\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tif ( radiusTop > 0 || y !== 0 ) {\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tgroupCount += 3;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( radiusBottom > 0 || y !== heightSegments - 1 ) {\n\n\t\t\t\t\t\tindices.push( b, c, d );\n\t\t\t\t\t\tgroupCount += 3;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\t// save the index of the first center vertex\n\t\t\tconst centerIndexStart = index;\n\n\t\t\tconst uv = new Vector2();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tconst sign = ( top === true ) ? 1 : -1;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tconst centerIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tconst u = x / radialSegments;\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CylinderGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a cone.\n *\n * ```js\n * const geometry = new THREE.ConeGeometry( 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cone = new THREE.Mesh(geometry, material );\n * scene.add( cone );\n * ```\n *\n * @augments CylinderGeometry\n */\nclass ConeGeometry extends CylinderGeometry {\n\n\t/**\n\t * Constructs a new cone geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the cone base.\n\t * @param {number} [height=1] - Height of the cone.\n\t * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.\n\t * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.\n\t * @param {boolean} [thetaStart=0] - Start angle for first segment, in radians.\n\t * @param {boolean} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n\t * The default value results in a complete cone.\n\t */\n\tconstructor( radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {ConeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A polyhedron is a solid in three dimensions with flat faces. This class\n * will take an array of vertices, project them onto a sphere, and then\n * divide them up to the desired level of detail.\n *\n * @augments BufferGeometry\n */\nclass PolyhedronGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new polyhedron geometry.\n\t *\n\t * @param {Array<number>} [vertices] - A flat array of vertices describing the base shape.\n\t * @param {Array<number>} [indices] - A flat array of indices describing the base shape.\n\t * @param {number} [radius=1] - The radius of the shape.\n\t * @param {number} [detail=0] - How many levels to subdivide the geometry. The more detail, the smoother the shape.\n\t */\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\t// default buffer data\n\n\t\tconst vertexBuffer = [];\n\t\tconst uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivision with the given detail value\n\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tconst cols = detail + 1;\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tconst v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tconst rows = cols - i;\n\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tconst k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tconst stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\tconst centroid = new Vector3();\n\n\t\t\tconst uvA = new Vector2();\n\t\t\tconst uvB = new Vector2();\n\t\t\tconst uvC = new Vector2();\n\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tconst azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {PolyhedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a dodecahedron.\n *\n * ```js\n * const geometry = new THREE.DodecahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const dodecahedron = new THREE.Mesh( geometry, material );\n * scene.add( dodecahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass DodecahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new dodecahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the dodecahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a dodecahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tconst r = 1 / t;\n\n\t\tconst vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t-1, -1, -1,\t-1, -1, 1,\n\t\t\t-1, 1, -1, -1, 1, 1,\n\t\t\t1, -1, -1, 1, -1, 1,\n\t\t\t1, 1, -1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tconst indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {DodecahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1$1 = /*@__PURE__*/ new Vector3();\nconst _normal = /*@__PURE__*/ new Vector3();\nconst _triangle = /*@__PURE__*/ new Triangle();\n\n/**\n * Can be used as a helper object to view the edges of a geometry.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry();\n * const edges = new THREE.EdgesGeometry( geometry );\n * const line = new THREE.LineSegments( edges );\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */\nclass EdgesGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new edges geometry.\n\t *\n\t * @param {?BufferGeometry} [geometry=null] - The geometry.\n\t * @param {number} [thresholdAngle=1] - An edge is only rendered if the angle (in degrees)\n\t * between the face normals of the adjoining faces exceeds this value.\n\t */\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry,\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\n\t\t\tconst thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\n\t\t\tconst indexArr = [ 0, 0, 0 ];\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\n\t\t\tconst hashes = new Array( 3 );\n\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\n\n\t\t\t\tif ( indexAttr ) {\n\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArr[ 0 ] = i;\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\n\n\t\t\t\t}\n\n\t\t\t\tconst { a, b, c } = _triangle;\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n\t\t\t\t_triangle.getNormal( _normal );\n\n\t\t\t\t// create hashes for the edge from the vertices\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n\n\t\t\t\t// skip degenerate triangles\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over every edge\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\n\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\n\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\n\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[ hash ] = {\n\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\n\t\t\t\t\t\t\tnormal: _normal.clone(),\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\n\t\t\tfor ( const key in edgeData ) {\n\n\t\t\t\tif ( edgeData[ key ] ) {\n\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\n\t\t\t\t\t_v1$1.fromBufferAttribute( positionAttr, index1 );\n\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\n\t\t\t\t\tvertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Defines an arbitrary 2d shape plane using paths with optional holes. It\n * can be used with {@link ExtrudeGeometry}, {@link ShapeGeometry}, to get\n * points, or to get triangulated faces.\n *\n * ```js\n * const heartShape = new THREE.Shape();\n *\n * heartShape.moveTo( 25, 25 );\n * heartShape.bezierCurveTo( 25, 25, 20, 0, 0, 0 );\n * heartShape.bezierCurveTo( - 30, 0, - 30, 35, - 30, 35 );\n * heartShape.bezierCurveTo( - 30, 55, - 10, 77, 25, 95 );\n * heartShape.bezierCurveTo( 60, 77, 80, 55, 80, 35 );\n * heartShape.bezierCurveTo( 80, 35, 80, 0, 50, 0 );\n * heartShape.bezierCurveTo( 35, 0, 25, 25, 25, 25 );\n *\n * const extrudeSettings = {\n * \tdepth: 8,\n * \tbevelEnabled: true,\n * \tbevelSegments: 2,\n * \tsteps: 2,\n * \tbevelSize: 1,\n * \tbevelThickness: 1\n * };\n *\n * const geometry = new THREE.ExtrudeGeometry( heartShape, extrudeSettings );\n * const mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial() );\n * ```\n *\n * @augments Path\n */\nclass Shape extends Path {\n\n\t/**\n\t * Constructs a new shape.\n\t *\n\t * @param {Array<Vector2>} [points] - An array of 2D points defining the shape.\n\t */\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\t/**\n\t\t * The UUID of the shape.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\t/**\n\t\t * Defines the holes in the shape. Hole definitions must use the\n\t\t * opposite winding order (CW/CCW) than the outer shape.\n\t\t *\n\t\t * @type {Array<Path>}\n\t\t * @readonly\n\t\t */\n\t\tthis.holes = [];\n\n\t}\n\n\t/**\n\t * Returns an array representing each contour of the holes\n\t * as a list of 2D points.\n\t *\n\t * @param {number} divisions - The fineness of the result.\n\t * @return {Array<Array<Vector2>>} The holes as a series of 2D points.\n\t */\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t/**\n\t * Returns an object that holds contour data for the shape and its holes as\n\t * arrays of 2D points.\n\t *\n\t * @param {number} divisions - The fineness of the result.\n\t * @return {{shape:Array<Vector2>,holes:Array<Array<Vector2>>}} An object with contour data.\n\t */\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * An implementation of the earcut polygon triangulation algorithm. The code\n * is a port of [mapbox/earcut]{@link https://github.com/mapbox/earcut mapbox/earcut} (v2.2.4).\n *\n * @hideconstructor\n */\nclass Earcut {\n\n\t/**\n\t * Triangulates the given shape definition by returning an array of triangles.\n\t *\n\t * @param {Array<number>} data - An array with 2D points.\n\t * @param {Array<number>} holeIndices - An array with indices defining holes.\n\t * @param {number} [dim=2] - The number of coordinates per vertex in the input array.\n\t * @return {Array<number>} An array representing the triangulated faces. Each face is defined by three consecutive numbers\n\t * representing vertex indices.\n\t */\n\tstatic triangulate( data, holeIndices, dim = 2 ) {\n\n\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\tconst outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\n\t\tlet outerNode = linkedList( data, 0, outerLen, dim, true );\n\t\tconst triangles = [];\n\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\n\n\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( let i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 32767 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize, 0 );\n\n\t\treturn triangles;\n\n\t}\n\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tlet i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tlet p = start,\n\t\tagain;\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tlet stop = ear,\n\t\tprev, next;\n\n\t// iterate through ears, slicing them one by one\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim | 0 );\n\t\t\ttriangles.push( ear.i / dim | 0 );\n\t\t\ttriangles.push( next.i / dim | 0 );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar( ear ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tconst ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),\n\t\ty0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),\n\t\tx1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),\n\t\ty1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );\n\n\tlet p = c.next;\n\twhile ( p !== a ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\tconst ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),\n\t\ty0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),\n\t\tx1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),\n\t\ty1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );\n\n\t// z-order range for the current triangle bbox;\n\tconst minZ = zOrder( x0, y0, minX, minY, invSize ),\n\t\tmaxZ = zOrder( x1, y1, minX, minY, invSize );\n\n\tlet p = ear.prevZ,\n\t\tn = ear.nextZ;\n\n\t// look for points inside the triangle in both directions\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t\tif ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\t// look for remaining points in decreasing z-order\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t}\n\n\t// look for remaining points in increasing z-order\n\twhile ( n && n.z <= maxZ ) {\n\n\t\tif ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tconst a = p.prev,\n\t\t\tb = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim | 0 );\n\t\t\ttriangles.push( p.i / dim | 0 );\n\t\t\ttriangles.push( b.i / dim | 0 );\n\n\t\t\t// remove two nodes involved\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn filterPoints( p );\n\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\tlet a = start;\n\tdo {\n\n\t\tlet b = a.next.next;\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\tlet c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize, 0 );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize, 0 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tconst queue = [];\n\tlet i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\touterNode = eliminateHole( queue[ i ], outerNode );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and link it\nfunction eliminateHole( hole, outerNode ) {\n\n\tconst bridge = findHoleBridge( hole, outerNode );\n\tif ( ! bridge ) {\n\n\t\treturn outerNode;\n\n\t}\n\n\tconst bridgeReverse = splitPolygon( bridge, hole );\n\n\t// filter collinear points around the cuts\n\tfilterPoints( bridgeReverse, bridgeReverse.next );\n\treturn filterPoints( bridge, bridge.next );\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge( hole, outerNode ) {\n\n\tlet p = outerNode,\n\t\tqx = - Infinity,\n\t\tm;\n\n\tconst hx = hole.x, hy = hole.y;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tconst x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\tif ( x === hx ) return m; // hole touches outer segment; pick leftmost endpoint\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tconst stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y;\n\tlet tanMin = Infinity, tan;\n\n\tp = m;\n\n\tdo {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== stop );\n\n\treturn m;\n\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector( m, p ) {\n\n\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tif ( p.z === 0 ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked( list ) {\n\n\tlet i, p, q, e, tail, numMerges, pSize, qSize,\n\t\tinSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\tx = ( x - minX ) * invSize | 0;\n\ty = ( y - minY ) * invSize | 0;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost( start ) {\n\n\tlet p = start,\n\t\tleftmost = start;\n\tdo {\n\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) >= ( ax - px ) * ( cy - py ) &&\n           ( ax - px ) * ( by - py ) >= ( bx - px ) * ( ay - py ) &&\n           ( bx - px ) * ( cy - py ) >= ( cx - px ) * ( by - py );\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // doesn't intersect other edges\n           ( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n            ( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n            equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n}\n\n// signed area of a triangle\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tconst o1 = sign( area( p1, q1, p2 ) );\n\tconst o2 = sign( area( p1, q1, q2 ) );\n\tconst o3 = sign( area( p2, q2, p1 ) );\n\tconst o4 = sign( area( p2, q2, q1 ) );\n\n\tif ( o1 !== o2 && o3 !== o4 ) return true; // general case\n\n\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\treturn false;\n\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment( p, q, r ) {\n\n\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n}\n\nfunction sign( num ) {\n\n\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon( a, b ) {\n\n\tlet p = a;\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\tintersects( p, p.next, a, b ) ) return true;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside( a, b ) {\n\n\tlet p = a,\n\t\tinside = false;\n\tconst px = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\tinside = ! inside;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon( a, b ) {\n\n\tconst a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode( i, x, y, last ) {\n\n\tconst p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertex index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertex nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = 0;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tlet sum = 0;\n\tfor ( let i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\n/**\n * A class containing utility functions for shapes.\n *\n * @hideconstructor\n */\nclass ShapeUtils {\n\n\t/**\n\t * Calculate area of a ( 2D ) contour polygon.\n\t *\n\t * @param {Array<Vector2>} contour - An array of 2D points.\n\t * @return {number} The area.\n\t */\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given contour uses a clockwise winding order.\n\t *\n\t * @param {Array<Vector2>} pts - An array of 2D points defining a polygon.\n\t * @return {boolean} Whether the given contour uses a clockwise winding order or not.\n\t */\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\t/**\n\t * Triangulates the given shape definition.\n\t *\n\t * @param {Array<Vector2>} contour - An array of 2D points defining the contour.\n\t * @param {Array<Array<Vector2>>} holes - An array that holds arrays of 2D points defining the holes.\n\t * @return {Array<Array<number>>} An array that holds for each face definition an array with three indices.\n\t */\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  depth: <float>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n *  bevelOffset: <float>, // how far from shape outline does bevel start\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * ```js\n * const length = 12, width = 8;\n *\n * const shape = new THREE.Shape();\n * shape.moveTo( 0,0 );\n * shape.lineTo( 0, width );\n * shape.lineTo( length, width );\n * shape.lineTo( length, 0 );\n * shape.lineTo( 0, 0 );\n *\n * const geometry = new THREE.ExtrudeGeometry( shape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ExtrudeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new extrude geometry.\n\t *\n\t * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n\t * @param {Object} [options={}] - The extrude settings.\n\t * @param {number} [options.curveSegments=12] - Number of points on the curves.\n\t * @param {number} [options.steps=1] - Number of points used for subdividing segments along the depth of the extruded spline.\n\t * @param {number} [options.depth=1] - Depth to extrude the shape.\n\t * @param {boolean} [options.bevelEnabled=true] - Whether to beveling to the shape or not.\n\t * @param {number} [options.bevelThickness=0.2] - How deep into the original shape the bevel goes.\n\t * @param {number} [options.bevelSize=bevelThickness-0.1] - Distance from the shape outline that the bevel extends.\n\t * @param {number} [options.bevelOffset=0] - Distance from the shape outline that the bevel starts.\n\t * @param {number} [options.bevelSegments=3] - Number of bevel layers.\n\t * @param {Curve} [options.extrudePath=3] - A 3D spline path along which the shape should be extruded. Bevels not supported for path extrusion.\n\t * @param {Object} [options.UVGenerator] - An object that provides UV generator functions for custom UV generation.\n\t */\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( -0.5, 0.5 ), new Vector2( -0.5, -0.5 ), new Vector2( 0.5, -0.5 ) ] ), options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tconst scope = this;\n\n\t\tconst verticesArray = [];\n\t\tconst uvArray = [];\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst placeholder = [];\n\n\t\t\t// options\n\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tconst depth = options.depth !== undefined ? options.depth : 1;\n\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tconst extrudePath = options.extrudePath;\n\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t//\n\n\t\t\tlet extrudePts, extrudeByPath = false;\n\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tlet vertices = shapePoints.shape;\n\t\t\tconst holes = shapePoints.holes;\n\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n\n\t\t\t\treturn pt.clone().addScaledVector( vec, size );\n\n\t\t\t}\n\n\t\t\tconst vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tconst contourMovements = [];\n\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tconst holesMovements = [];\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tlet layer = 0; // steps + 1\n\t\t\t\t\tlet offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\tlet layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tlet i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tconst j = i;\n\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\t\tconst options = this.parameters.options;\n\n\t\treturn toJSON$1( shapes, options, data );\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @param {Array<Shape>} shapes - An array of shapes.\n\t * @return {ExtrudeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\tconst extrudePath = data.options.extrudePath;\n\n\t\tif ( extrudePath !== undefined ) {\n\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t}\n\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\n\n\t}\n\n}\n\nconst WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\n\t\tconst d_x = vertices[ indexD * 3 ];\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n\n};\n\nfunction toJSON$1( shapes, options, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\tdata.options = Object.assign( {}, options );\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\n/**\n * A geometry class for representing an icosahedron.\n *\n * ```js\n * const geometry = new THREE.IcosahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const icosahedron = new THREE.Mesh( geometry, material );\n * scene.add( icosahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass IcosahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new icosahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the icosahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a icosahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tconst vertices = [\n\t\t\t-1, t, 0, \t1, t, 0, \t-1, - t, 0, \t1, - t, 0,\n\t\t\t0, -1, t, \t0, 1, t,\t0, -1, - t, \t0, 1, - t,\n\t\t\tt, 0, -1, \tt, 0, 1, \t- t, 0, -1, \t- t, 0, 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {IcosahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing an octahedron.\n *\n * ```js\n * const geometry = new THREE.OctahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const octahedron = new THREE.Mesh( geometry, material );\n * scene.add( octahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass OctahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new octahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the octahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a octahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 0, 0, \t-1, 0, 0,\t0, 1, 0,\n\t\t\t0, -1, 0, \t0, 0, 1,\t0, 0, -1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {OctahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a plane.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const plane = new THREE.Mesh( geometry, material );\n * scene.add( plane );\n * ```\n *\n * @augments BufferGeometry\n */\nclass PlaneGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new plane geometry.\n\t *\n\t * @param {number} [width=1] - The width along the X axis.\n\t * @param {number} [height=1] - The height along the Y axis\n\t * @param {number} [widthSegments=1] - The number of segments along the X axis.\n\t * @param {number} [heightSegments=1] - The number of segments along the Y axis.\n\t */\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {PlaneGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\n/**\n * A class for generating a two-dimensional ring geometry.\n *\n * ```js\n * const geometry = new THREE.RingGeometry( 1, 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass RingGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new ring geometry.\n\t *\n\t * @param {number} [innerRadius=0.5] - The inner radius of the ring.\n\t * @param {number} [outerRadius=1] - The outer radius of the ring.\n\t * @param {number} [thetaSegments=32] - Number of segments. A higher number means the ring will be more round. Minimum is `3`.\n\t * @param {number} [phiSegments=1] - Number of segments per ring segment. Minimum is `1`.\n\t * @param {number} [thetaStart=0] - Starting angle in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - Central angle in radians.\n\t */\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {RingGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * Creates an one-sided polygonal geometry from one or more path shapes.\n *\n * ```js\n * const arcShape = new THREE.Shape()\n *\t.moveTo( 5, 1 )\n *\t.absarc( 1, 1, 4, 0, Math.PI * 2, false );\n *\n * const geometry = new THREE.ShapeGeometry( arcShape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ShapeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new shape geometry.\n\t *\n\t * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n\t * @param {number} [curveSegments=12] - Number of segments per shape.\n\t */\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( -0.5, -0.5 ), new Vector2( 0.5, -0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @param {Array<Shape>} shapes - An array of shapes.\n\t * @return {ShapeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\n/**\n * A class for generating a sphere geometry.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry( 15, 32, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const sphere = new THREE.Mesh( geometry, material );\n * scene.add( sphere );\n * ```\n *\n * @augments BufferGeometry\n */\nclass SphereGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new sphere geometry.\n\t *\n\t * @param {number} [radius=1] - The sphere radius.\n\t * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.\n\t * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.\n\t * @param {number} [phiStart=0] - The horizontal starting angle in radians.\n\t * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.\n\t * @param {number} [thetaStart=0] - The vertical starting angle in radians.\n\t * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.\n\t */\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy === 0 && thetaStart === 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy === heightSegments && thetaEnd === Math.PI ) {\n\n\t\t\t\tuOffset = -0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {SphereGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing an tetrahedron.\n *\n * ```js\n * const geometry = new THREE.TetrahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const tetrahedron = new THREE.Mesh( geometry, material );\n * scene.add( tetrahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass TetrahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new tetrahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the tetrahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a tetrahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 1, 1, \t-1, -1, 1, \t-1, 1, -1, \t1, -1, -1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TetrahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing an torus.\n *\n * ```js\n * const geometry = new THREE.TorusGeometry( 10, 3, 16, 100 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torus = new THREE.Mesh( geometry, material );\n * scene.add( torus );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TorusGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new torus geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the torus, from the center of the torus to the center of the tube.\n\t * @param {number} [tube=0.4] - Radius of the tube. Must be smaller than `radius`.\n\t * @param {number} [radialSegments=12] - The number of radial segments.\n\t * @param {number} [tubularSegments=48] - The number of tubular segments.\n\t * @param {number} [arc=Math.PI*2] - Central angle in radians.\n\t */\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TorusGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\n/**\n * Creates a torus knot, the particular shape of which is defined by a pair\n * of coprime integers, p and q. If p and q are not coprime, the result will\n * be a torus link.\n *\n * ```js\n * const geometry = new THREE.TorusKnotGeometry( 10, 3, 100, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torusKnot = new THREE.Mesh( geometry, material );\n * scene.add( torusKnot );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TorusKnotGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new torus knot geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the torus knot.\n\t * @param {number} [tube=0.4] - Radius of the tube.\n\t * @param {number} [tubularSegments=64] - The number of tubular segments.\n\t * @param {number} [radialSegments=8] - The number of radial segments.\n\t * @param {number} [p=2] - This value determines, how many times the geometry winds around its axis of rotational symmetry.\n\t * @param {number} [q=3] - This value determines, how many times the geometry winds around a circle in the interior of the torus.\n\t */\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\ttubularSegments = Math.floor( tubularSegments );\n\t\tradialSegments = Math.floor( radialSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst P1 = new Vector3();\n\t\tconst P2 = new Vector3();\n\n\t\tconst B = new Vector3();\n\t\tconst T = new Vector3();\n\t\tconst N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\tconst cx = - tube * Math.cos( v );\n\t\t\t\tconst cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tconst cu = Math.cos( u );\n\t\t\tconst su = Math.sin( u );\n\t\t\tconst quOverP = q / p * u;\n\t\t\tconst cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TorusKnotGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n\n\t}\n\n}\n\n/**\n * Creates a tube that extrudes along a 3D curve.\n *\n * ```js\n * class CustomSinCurve extends THREE.Curve {\n *\n * \tgetPoint( t, optionalTarget = new THREE.Vector3() ) {\n *\n * \t\tconst tx = t * 3 - 1.5;\n * \t\tconst ty = Math.sin( 2 * Math.PI * t );\n * \t\tconst tz = 0;\n *\n * \t\treturn optionalTarget.set( tx, ty, tz );\n * \t}\n *\n * }\n *\n * const path = new CustomSinCurve( 10 );\n * const geometry = new THREE.TubeGeometry( path, 20, 2, 8, false );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TubeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new tube geometry.\n\t *\n\t * @param {Curve} [path=QuadraticBezierCurve3] - A 3D curve defining the path of the tube.\n\t * @param {number} [tubularSegments=64] - The number of segments that make up the tube.\n\t * @param {number} [radius=1] -The radius of the tube.\n\t * @param {number} [radialSegments=8] - The number of segments that make up the cross-section.\n\t * @param {boolean} [closed=false] - Whether the tube is closed or not.\n\t */\n\tconstructor( path = new QuadraticBezierCurve3( new Vector3( -1, -1, 0 ), new Vector3( -1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tlet P = new Vector3();\n\n\t\t// buffer\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tconst N = frames.normals[ i ];\n\t\t\tconst B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tconst sin = Math.sin( v );\n\t\t\t\tconst cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TubeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\treturn new TubeGeometry(\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\tdata.tubularSegments,\n\t\t\tdata.radius,\n\t\t\tdata.radialSegments,\n\t\t\tdata.closed\n\t\t);\n\n\t}\n\n}\n\n/**\n * Can be used as a helper object to visualize a geometry as a wireframe.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry();\n *\n * const wireframe = new THREE.WireframeGeometry( geometry );\n *\n * const line = new THREE.LineSegments( wireframe );\n * line.material.depthWrite = false;\n * line.material.opacity = 0.25;\n * line.material.transparent = true;\n *\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */\nclass WireframeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new wireframe geometry.\n\t *\n\t * @param {?BufferGeometry} [geometry=null] - The geometry.\n\t */\n\tconstructor( geometry = null ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\t// buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set();\n\n\t\t\t// helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tconst group = groups[ o ];\n\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\n\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction isUniqueEdge( start, end, edges ) {\n\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n\n\t\treturn false;\n\n\t} else {\n\n\t\tedges.add( hash1 );\n\t\tedges.add( hash2 );\n\t\treturn true;\n\n\t}\n\n}\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBoxGeometry: BoxGeometry,\n\tCapsuleGeometry: CapsuleGeometry,\n\tCircleGeometry: CircleGeometry,\n\tConeGeometry: ConeGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tLatheGeometry: LatheGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tRingGeometry: RingGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tSphereGeometry: SphereGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTubeGeometry: TubeGeometry,\n\tWireframeGeometry: WireframeGeometry\n});\n\nclass ShadowMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShadowMaterial = true;\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass RawShaderMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.isRawShaderMaterial = true;\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\nclass MeshStandardMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshStandardMaterial = true;\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapRotation = new Euler();\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhysicalMaterial = true;\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.anisotropyRotation = 0;\n\t\tthis.anisotropyMap = null;\n\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.ior = 1.5;\n\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.iridescenceMap = null;\n\t\tthis.iridescenceIOR = 1.3;\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\n\t\tthis.iridescenceThicknessMap = null;\n\n\t\tthis.sheenColor = new Color( 0x000000 );\n\t\tthis.sheenColorMap = null;\n\t\tthis.sheenRoughness = 1.0;\n\t\tthis.sheenRoughnessMap = null;\n\n\t\tthis.transmissionMap = null;\n\n\t\tthis.thickness = 0;\n\t\tthis.thicknessMap = null;\n\t\tthis.attenuationDistance = Infinity;\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\tthis.specularIntensity = 1.0;\n\t\tthis.specularIntensityMap = null;\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\t\tthis.specularColorMap = null;\n\n\t\tthis._anisotropy = 0;\n\t\tthis._clearcoat = 0;\n\t\tthis._dispersion = 0;\n\t\tthis._iridescence = 0;\n\t\tthis._sheen = 0.0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget anisotropy() {\n\n\t\treturn this._anisotropy;\n\n\t}\n\n\tset anisotropy( value ) {\n\n\t\tif ( this._anisotropy > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._anisotropy = value;\n\n\t}\n\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\n\tget iridescence() {\n\n\t\treturn this._iridescence;\n\n\t}\n\n\tset iridescence( value ) {\n\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._iridescence = value;\n\n\t}\n\n\tget dispersion() {\n\n\t\treturn this._dispersion;\n\n\t}\n\n\tset dispersion( value ) {\n\n\t\tif ( this._dispersion > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._dispersion = value;\n\n\t}\n\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.anisotropy = source.anisotropy;\n\t\tthis.anisotropyRotation = source.anisotropyRotation;\n\t\tthis.anisotropyMap = source.anisotropyMap;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.dispersion = source.dispersion;\n\t\tthis.ior = source.ior;\n\n\t\tthis.iridescence = source.iridescence;\n\t\tthis.iridescenceMap = source.iridescenceMap;\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshPhongMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhongMaterial = true;\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapRotation = new Euler();\n\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshToonMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshToonMaterial = true;\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshNormalMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshNormalMaterial = true;\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshLambertMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshLambertMaterial = true;\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapRotation = new Euler();\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshDepthMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshDepthMaterial = true;\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshDistanceMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshDistanceMaterial = true;\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshMatcapMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshMatcapMaterial = true;\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineDashedMaterial = true;\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// converts an array to a specific type\nfunction convertArray( array, type, forceClone ) {\n\n\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t! forceClone && array.constructor === type ) return array;\n\n\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\treturn new type( array ); // create typed array\n\n\t}\n\n\treturn Array.prototype.slice.call( array ); // create Array\n\n}\n\nfunction isTypedArray( object ) {\n\n\treturn ArrayBuffer.isView( object ) &&\n\t\t! ( object instanceof DataView );\n\n}\n\n// returns an array by which times and values can be sorted\nfunction getKeyframeOrder( times ) {\n\n\tfunction compareTime( i, j ) {\n\n\t\treturn times[ i ] - times[ j ];\n\n\t}\n\n\tconst n = times.length;\n\tconst result = new Array( n );\n\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\tresult.sort( compareTime );\n\n\treturn result;\n\n}\n\n// uses the array previously returned by 'getKeyframeOrder' to sort data\nfunction sortedArray( values, stride, order ) {\n\n\tconst nValues = values.length;\n\tconst result = new values.constructor( nValues );\n\n\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\tconst srcOffset = order[ i ] * stride;\n\n\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n\n// function for parsing AOS keyframe formats\nfunction flattenJSON( jsonKeys, times, values, valuePropertyName ) {\n\n\tlet i = 1, key = jsonKeys[ 0 ];\n\n\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\tkey = jsonKeys[ i ++ ];\n\n\t}\n\n\tif ( key === undefined ) return; // no data\n\n\tlet value = key[ valuePropertyName ];\n\tif ( value === undefined ) return; // no data\n\n\tif ( Array.isArray( value ) ) {\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push( ...value ); // push all elements\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else if ( value.toArray !== undefined ) {\n\n\t\t// ...assume THREE.Math-ish\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else {\n\n\t\t// otherwise push as-is\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push( value );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t}\n\n}\n\nfunction subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\tconst clip = sourceClip.clone();\n\n\tclip.name = name;\n\n\tconst tracks = [];\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tconst track = clip.tracks[ i ];\n\t\tconst valueSize = track.getValueSize();\n\n\t\tconst times = [];\n\t\tconst values = [];\n\n\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\n\n\t\t\tconst frame = track.times[ j ] * fps;\n\n\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\n\n\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( times.length === 0 ) continue;\n\n\t\ttrack.times = convertArray( times, track.times.constructor );\n\t\ttrack.values = convertArray( values, track.values.constructor );\n\n\t\ttracks.push( track );\n\n\t}\n\n\tclip.tracks = tracks;\n\n\t// find minimum .times value across all tracks in the trimmed clip\n\n\tlet minStartTime = Infinity;\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t}\n\n\t}\n\n\t// shift all tracks such that clip begins at t=0\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tclip.tracks[ i ].shift( -1 * minStartTime );\n\n\t}\n\n\tclip.resetDuration();\n\n\treturn clip;\n\n}\n\nfunction makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\tif ( fps <= 0 ) fps = 30;\n\n\tconst numTracks = referenceClip.tracks.length;\n\tconst referenceTime = referenceFrame / fps;\n\n\t// Make each track's values relative to the values at the reference frame\n\tfor ( let i = 0; i < numTracks; ++ i ) {\n\n\t\tconst referenceTrack = referenceClip.tracks[ i ];\n\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t// Skip this track if it's non-numeric\n\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n\n\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t} );\n\n\t\tif ( targetTrack === undefined ) continue;\n\n\t\tlet referenceOffset = 0;\n\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t}\n\n\t\tlet targetOffset = 0;\n\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t}\n\n\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\tlet referenceValue;\n\n\t\t// Find the value to subtract out of the track\n\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\n\n\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\n\n\t\t} else {\n\n\t\t\t// Interpolate to the reference value\n\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\treferenceValue = interpolant.resultBuffer.slice( startIndex, endIndex );\n\n\t\t}\n\n\t\t// Conjugate the quaternion\n\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t}\n\n\t\t// Subtract the reference value from all of the track values\n\n\t\tconst numTimes = targetTrack.times.length;\n\t\tfor ( let j = 0; j < numTimes; ++ j ) {\n\n\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart,\n\t\t\t\t\treferenceValue,\n\t\t\t\t\t0,\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\treturn targetClip;\n\n}\n\nconst AnimationUtils = {\n\tconvertArray: convertArray,\n\tisTypedArray: isTypedArray,\n\tgetKeyframeOrder: getKeyframeOrder,\n\tsortedArray: sortedArray,\n\tflattenJSON: flattenJSON,\n\tsubclip: subclip,\n\tmakeClipAdditive: makeClipAdditive\n};\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References: {@link http://www.oodesign.com/template-method-pattern.html}\n *\n * @abstract\n */\nclass Interpolant {\n\n\t/**\n\t * Constructs a new interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\t/**\n\t\t * The parameter positions.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.parameterPositions = parameterPositions;\n\n\t\t/**\n\t\t * A cache index.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._cachedIndex = 0;\n\n\t\t/**\n\t\t * The result buffer.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor( sampleSize );\n\n\t\t/**\n\t\t * The sample values.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.sampleValues = sampleValues;\n\n\t\t/**\n\t\t * The value size.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.valueSize = sampleSize;\n\n\t\t/**\n\t\t * The interpolation settings.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.settings = null;\n\n\t\t/**\n\t\t * The default settings object.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.DefaultSettings_ = {};\n\n\t}\n\n\t/**\n\t * Evaluate the interpolant at position `t`.\n\t *\n\t * @param {number} t - The interpolation factor.\n\t * @return {TypedArray} The result buffer.\n\t */\n\tevaluate( t ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet i1 = this._cachedIndex,\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tlet right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t}\n\n\t/**\n\t * Returns the interpolation settings.\n\t *\n\t * @return {Object} The interpolation settings.\n\t */\n\tgetSettings_() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t}\n\n\t/**\n\t * Copies a sample value to the result buffer.\n\t *\n\t * @param {number} index - An index into the sample value buffer.\n\t * @return {TypedArray} The result buffer.\n\t */\n\tcopySampleValue_( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Copies a sample value to the result buffer.\n\t *\n\t * @abstract\n\t * @param {number} i1 - An index into the sample value buffer.\n\t * @param {number} t0 - The previous interpolation factor.\n\t * @param {number} t - The current interpolation factor.\n\t * @param {number} t1 - The next interpolation factor.\n\t * @return {TypedArray} The result buffer.\n\t */\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t}\n\n\t/**\n\t * Optional method that is executed when the interval has changed.\n\t *\n\t * @param {number} i1 - An index into the sample value buffer.\n\t * @param {number} t0 - The previous interpolation factor.\n\t * @param {number} t - The current interpolation factor.\n\t */\n\tintervalChanged_( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n}\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @augments Interpolant\n */\nclass CubicInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new cubic interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( -1.5 - 2 * wP ) * pp + ( -0.5 + wP ) * p + 1;\n\t\tconst s1 = ( -1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A basic linear interpolant.\n *\n * @augments Interpolant\n */\nclass LinearInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new linear interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n *\n * @augments Interpolant\n */\nclass DiscreteInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new discrete interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\nclass KeyframeTrack {\n\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\tthis.name = name;\n\n\t\tthis.times = convertArray( times, this.TimeBufferType );\n\t\tthis.values = convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tstatic toJSON( track ) {\n\n\t\tconst trackType = track.constructor;\n\n\t\tlet json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== this.toJSON ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': convertArray( track.times, Array ),\n\t\t\t\t'values': convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n\tInterpolantFactoryMethodDiscrete( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodSmooth( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tsetInterpolation( interpolation ) {\n\n\t\tlet factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tconst message = 'unsupported interpolation for ' +\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t}\n\n\tgetInterpolation() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t}\n\n\tgetValueSize() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t}\n\n\t// move all keyframes either forwards or backwards in time\n\tshift( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim( startTime, endTime ) {\n\n\t\tconst times = this.times,\n\t\t\tnKeys = times.length;\n\n\t\tlet from = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== -1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) {\n\n\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\tfrom = to - 1;\n\n\t\t\t}\n\n\t\t\tconst stride = this.getValueSize();\n\t\t\tthis.times = times.slice( from, to );\n\t\t\tthis.values = this.values.slice( from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tconst valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tconst times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tlet prevTime = null;\n\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tconst currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( isTypedArray( values ) ) {\n\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize() {\n\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\tconst times = this.times.slice(),\n\t\t\tvalues = this.values.slice(),\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\tlastIndex = times.length - 1;\n\n\t\tlet writeIndex = 1;\n\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tlet keep = false;\n\n\t\t\tconst time = times[ i ];\n\t\t\tconst timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tconst value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = times.slice( 0, writeIndex );\n\t\t\tthis.values = values.slice( 0, writeIndex * stride );\n\n\t\t} else {\n\n\t\t\tthis.times = times;\n\t\t\tthis.values = values;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst times = this.times.slice();\n\t\tconst values = this.values.slice();\n\n\t\tconst TypedKeyframeTrack = this.constructor;\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n}\n\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A Track of Boolean keyframe values.\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {\n\n\t// No interpolation parameter because only InterpolateDiscrete is valid.\n\tconstructor( name, times, values ) {\n\n\t\tsuper( name, times, values );\n\n\t}\n\n}\n\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of keyframe values that represent color.\n */\nclass ColorKeyframeTrack extends KeyframeTrack {}\n\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A Track of numeric keyframe values.\n */\nclass NumberKeyframeTrack extends KeyframeTrack {}\n\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @augments Interpolant\n */\nclass QuaternionLinearInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new SLERP interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tlet offset = i1 * stride;\n\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A Track of quaternion keyframe values.\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n}\n\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\n// DefaultInterpolation is inherited;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track that interpolates Strings\n */\nclass StringKeyframeTrack extends KeyframeTrack {\n\n\t// No interpolation parameter because only InterpolateDiscrete is valid.\n\tconstructor( name, times, values ) {\n\n\t\tsuper( name, times, values );\n\n\t}\n\n}\n\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\nStringKeyframeTrack.prototype.ValueBufferType = Array;\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of vectored keyframe values.\n */\nclass VectorKeyframeTrack extends KeyframeTrack {}\n\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\nclass AnimationClip {\n\n\tconstructor( name = '', duration = -1, tracks = [], blendMode = NormalAnimationBlendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\n\tstatic parse( json ) {\n\n\t\tconst tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\n\t\tclip.uuid = json.uuid;\n\n\t\treturn clip;\n\n\t}\n\n\tstatic toJSON( clip ) {\n\n\t\tconst tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tconst json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid,\n\t\t\t'blendMode': clip.blendMode\n\n\t\t};\n\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t}\n\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tlet times = [];\n\t\t\tlet values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tconst order = getKeyframeOrder( times );\n\t\t\ttimes = sortedArray( times, 1, order );\n\t\t\tvalues = sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new this( name, -1, tracks );\n\n\t}\n\n\tstatic findByName( objectOrClipArray, name ) {\n\n\t\tlet clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tconst o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n\n\t\tconst animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tconst name = parts[ 1 ];\n\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst clips = [];\n\n\t\tfor ( const name in animationToMorphTargets ) {\n\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t}\n\n\t// parse the animation.hierarchy format\n\tstatic parseAnimation( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tflattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst tracks = [];\n\n\t\tconst clipName = animation.name || 'default';\n\t\tconst fps = animation.fps || 30;\n\t\tconst blendMode = animation.blendMode;\n\n\t\t// automatic length determination in AnimationClip.\n\t\tlet duration = animation.length || -1;\n\n\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tconst morphTargetNames = {};\n\n\t\t\t\tlet k;\n\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = -1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * fps;\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\n\n\t\treturn clip;\n\n\t}\n\n\tresetDuration() {\n\n\t\tconst tracks = this.tracks;\n\t\tlet duration = 0;\n\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tconst track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t}\n\n\ttrim() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\toptimize() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.constructor.toJSON( this );\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tconst times = [], values = [];\n\n\t\tflattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\nconst Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\nclass LoadingManager {\n\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== -1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\nconst DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();\n\n/**\n * Abstract base class for loaders.\n *\n * @abstract\n */\nclass Loader {\n\n\t/**\n\t * Constructs a new loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\t/**\n\t\t * The loading manager.\n\t\t *\n\t\t * @type {LoadingManager}\n\t\t * @default DefaultLoadingManager\n\t\t */\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t/**\n\t\t * The crossOrigin string to implement CORS for loading the url from a\n\t\t * different domain that allows CORS.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'anonymous'\n\t\t */\n\t\tthis.crossOrigin = 'anonymous';\n\n\t\t/**\n\t\t * Whether the XMLHttpRequest uses credentials.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.withCredentials = false;\n\n\t\t/**\n\t\t * The base path from which the asset will be loaded.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.path = '';\n\n\t\t/**\n\t\t * The base path from which additional resources like textures will be loaded.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.resourcePath = '';\n\n\t\t/**\n\t\t * The [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n\t\t * used in HTTP request.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.requestHeader = {};\n\n\t}\n\n\t/**\n\t * This method needs to be implemented by all concrete loaders. It holds the\n\t * logic for loading assets from the backend.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded.\n\t * @param {Function} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\t/**\n\t * A async version of {@link Loader#load}.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @return {Promise} A Promise that resolves when the asset has been loaded.\n\t */\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * This method needs to be implemented by all concrete loaders. It holds the\n\t * logic for parsing the asset into three.js entities.\n\t *\n\t * @param {any} data - The data to parse.\n\t */\n\tparse( /* data */ ) {}\n\n\t/**\n\t * Sets the `crossOrigin` String to implement CORS for loading the URL\n\t * from a different domain that allows CORS.\n\t *\n\t * @param {string} crossOrigin - The `crossOrigin` value.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Whether the XMLHttpRequest uses credentials such as cookies, authorization\n\t * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.\n\t *\n\t * Note: This setting has no effect if you are loading files locally or from the same domain.\n\t *\n\t * @param {boolean} value - The `withCredentials` value.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the base path for the asset.\n\t *\n\t * @param {string} path - The base path.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the base path for dependent resources like textures.\n\t *\n\t * @param {string} resourcePath - The resource path.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given request header.\n\t *\n\t * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n\t * for configuring the HTTP request.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Callback for onProgress in loaders.\n *\n *\n * @callback onProgressCallback\n * @param {ProgressEvent} event - An instance of `ProgressEvent` that represents the current loading status.\n */\n\n/**\n * Callback for onError in loaders.\n *\n *\n * @callback onErrorCallback\n * @param {Error} error - The error which occurred during the loading process.\n */\n\n/**\n * The default material name that is used by loaders\n * when creating materials for loaded 3D objects.\n *\n * Note: Not all loaders might honor this setting.\n *\n * @static\n * @type {string}\n * @default '__DEFAULT'\n */\nLoader.DEFAULT_MATERIAL_NAME = '__DEFAULT';\n\nconst loading = {};\n\nclass HttpError extends Error {\n\n\tconstructor( message, response ) {\n\n\t\tsuper( message );\n\t\tthis.response = response;\n\n\t}\n\n}\n\nclass FileLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tthis.manager.itemStart( url );\n\n\t\t\tsetTimeout( () => {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Initialise array for duplicate requests\n\t\tloading[ url ] = [];\n\n\t\tloading[ url ].push( {\n\t\t\tonLoad: onLoad,\n\t\t\tonProgress: onProgress,\n\t\t\tonError: onError,\n\t\t} );\n\n\t\t// create request\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( this.requestHeader ),\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\n\t\t\t// An abort controller could be added within a future PR\n\t\t} );\n\n\t\t// record states ( avoid data race )\n\t\tconst mimeType = this.mimeType;\n\t\tconst responseType = this.responseType;\n\n\t\t// start the fetch\n\t\tfetch( req )\n\t\t\t.then( response => {\n\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( response.status === 0 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n\t\t\t\t\tif ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {\n\n\t\t\t\t\t\treturn response;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\t// Nginx needs X-File-Size check\n\t\t\t\t\t// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\n\t\t\t\t\tconst contentLength = response.headers.get( 'X-File-Size' ) || response.headers.get( 'Content-Length' );\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0;\n\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\n\t\t\t\t\tconst stream = new ReadableStream( {\n\t\t\t\t\t\tstart( controller ) {\n\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\n\n\t\t\t\t\t\t\t\t\tif ( done ) {\n\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\n\t\t\t\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}, ( e ) => {\n\n\t\t\t\t\t\t\t\t\tcontroller.error( e );\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn new Response( stream );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new HttpError( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( response => {\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t.then( text => {\n\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, mimeType );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( mimeType === undefined ) {\n\n\t\t\t\t\t\t\treturn response.text();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// sniff encoding\n\t\t\t\t\t\t\tconst re = /charset=\"?([^;\"\\s]*)\"?/i;\n\t\t\t\t\t\t\tconst exec = re.exec( mimeType );\n\t\t\t\t\t\t\tconst label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;\n\t\t\t\t\t\t\tconst decoder = new TextDecoder( label );\n\t\t\t\t\t\t\treturn response.arrayBuffer().then( ab => decoder.decode( ab ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( data => {\n\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add( url, data );\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.catch( err => {\n\n\t\t\t\t// Abort errors and other errors are handled the same\n\n\t\t\t\tconst callbacks = loading[ url ];\n\n\t\t\t\tif ( callbacks === undefined ) {\n\n\t\t\t\t\t// When onLoad was called and url was deleted in `loading`\n\t\t\t\t\tthis.manager.itemError( url );\n\t\t\t\t\tthrow err;\n\n\t\t\t\t}\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t} )\n\t\t\t.finally( () => {\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\tthis.manager.itemStart( url );\n\n\t}\n\n\tsetResponseType( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t}\n\n\tsetMimeType( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass CompressedTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst images = [];\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.image = images;\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.image = images;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass ImageLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction removeEventListeners() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.slice( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\nclass CubeTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\t\ttexture.colorSpace = SRGBColorSpace;\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass DataTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tlet texData;\n\n\t\t\ttry {\n\n\t\t\t\ttexData = scope.parse( buffer );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) {\n\n\t\t\t\t\tonError( error );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( error );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.colorSpace !== undefined ) {\n\n\t\t\t\ttexture.colorSpace = texData.colorSpace;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass TextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract base class for lights - all other light types inherit the\n * properties and methods described here.\n *\n * @abstract\n * @augments Object3D\n */\nclass Light extends Object3D {\n\n\t/**\n\t * Constructs a new light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLight = true;\n\n\t\tthis.type = 'Light';\n\n\t\t/**\n\t\t * The light's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color( color );\n\n\t\t/**\n\t\t * The light's intensity.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.intensity = intensity;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\t\tif ( this.target !== undefined ) data.object.target = this.target.uuid;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * A light source positioned directly above the scene, with color fading from\n * the sky color to the ground color.\n *\n * This light cannot be used to cast shadows.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass HemisphereLight extends Light {\n\n\t/**\n\t * Constructs a new hemisphere light.\n\t *\n\t * @param {(number|Color|string)} [skyColor=0xffffff] - The light's sky color.\n\t * @param {(number|Color|string)} [groundColor=0xffffff] - The light's ground color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isHemisphereLight = true;\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\t/**\n\t\t * The light's ground color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * Abstract base class for light shadow classes. These classes\n * represent the shadow configuration for different ligth types.\n *\n * @abstract\n */\nclass LightShadow {\n\n\t/**\n\t * Constructs a new light shadow.\n\t *\n\t * @param {Camera} camera - The light's view of the world.\n\t */\n\tconstructor( camera ) {\n\n\t\t/**\n\t\t * The light's view of the world.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The intensity of the shadow. The default is `1`.\n\t\t * Valid values are in the range `[0, 1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.intensity = 1;\n\n\t\t/**\n\t\t * Shadow map bias, how much to add or subtract from the normalized depth\n\t\t * when deciding whether a surface is in shadow.\n\t\t *\n\t\t * The default is `0`. Very tiny adjustments here (in the order of `0.0001`)\n\t\t * may help reduce artifacts in shadows.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.bias = 0;\n\n\t\t/**\n\t\t * Defines how much the position used to query the shadow map is offset along\n\t\t * the object normal. The default is `0`. Increasing this value can be used to\n\t\t * reduce shadow acne especially in large scenes where light shines onto\n\t\t * geometry at a shallow angle. The cost is that shadows may appear distorted.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.normalBias = 0;\n\n\t\t/**\n\t\t * Setting this to values greater than 1 will blur the edges of the shadow.\n\t\t * High values will cause unwanted banding effects in the shadows - a greater\n\t\t * map size will allow for a higher value to be used here before these effects\n\t\t * become visible.\n\t\t *\n\t\t * The property has no effect when the shadow map type is `PCFSoftShadowMap` and\n\t\t * and it is recommended to increase softness by decreasing the shadow map size instead.\n\t\t *\n\t\t * The property has no effect when the shadow map type is `BasicShadowMap`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.radius = 1;\n\n\t\t/**\n\t\t * The amount of samples to use when blurring a VSM shadow map.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 8\n\t\t */\n\t\tthis.blurSamples = 8;\n\n\t\t/**\n\t\t * Defines the width and height of the shadow map. Higher values give better quality\n\t\t * shadows at the cost of computation time. Values must be powers of two.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (512,512)\n\t\t */\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\t/**\n\t\t * The depth map generated using the internal camera; a location beyond a\n\t\t * pixel's depth is in shadow. Computed internally during rendering.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The distribution map generated using the internal camera; an occlusion is\n\t\t * calculated based on the distribution of depths. Computed internally during\n\t\t * rendering.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis.mapPass = null;\n\n\t\t/**\n\t\t * Model to shadow camera space, to compute location and depth in shadow map.\n\t\t * This is computed internally during rendering.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrix = new Matrix4();\n\n\t\t/**\n\t\t * Enables automatic updates of the light's shadow. If you do not require dynamic\n\t\t * lighting / shadows, you may set this to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoUpdate = true;\n\n\t\t/**\n\t\t * When set to `true`, shadow maps will be updated in the next `render` call.\n\t\t * If you have set {@link LightShadow#autoUpdate} to `false`, you will need to\n\t\t * set this property to `true` and then make a render call to update the light's shadow.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\t/**\n\t * Used internally by the renderer to get the number of viewports that need\n\t * to be rendered for this shadow.\n\t *\n\t * @return {number} The viewport count.\n\t */\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\t/**\n\t * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.\n\t *\n\t * @return {Frustum} The shadow camera frustum.\n\t */\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\t/**\n\t * Update the matrices for the camera and shadow, used internally by the renderer.\n\t *\n\t * @param {Light} light - The light for which the shadow is being rendered.\n\t */\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld$1 );\n\n\t\t_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget$1 );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( _projScreenMatrix$1 );\n\n\t}\n\n\t/**\n\t * Returns a viewport definition for the given viewport index.\n\t *\n\t * @param {number} viewportIndex - The viewport index.\n\t * @return {Vector4} The viewport.\n\t */\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\t/**\n\t * Returns the frame extends.\n\t *\n\t * @return {Vector2} The frame extends.\n\t */\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Copies the values of the given light shadow instance to this instance.\n\t *\n\t * @param {LightShadow} source - The light shadow to copy.\n\t * @return {LightShadow} A reference to this light shadow instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.intensity = source.intensity;\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new light shadow instance with copied values from this instance.\n\t *\n\t * @return {LightShadow} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Serializes the light shadow into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized light shadow.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.intensity !== 1 ) object.intensity = this.intensity;\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\n/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */\nclass SpotLightShadow extends LightShadow {\n\n\t/**\n\t * Constructs a new spot light shadow.\n\t */\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSpotLightShadow = true;\n\n\t\t/**\n\t\t * Used to focus the shadow camera. The camera's field of view is set as a\n\t\t * percentage of the spotlight's field-of-view. Range is `[0, 1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This light gets emitted from a single point in one direction, along a cone\n * that increases in size the further from the light it gets.\n *\n * This light can cast shadows - see the {@link SpotLightShadow} for details.\n *\n * ```js\n * // white spotlight shining from the side, modulated by a texture\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 100, 1000, 100 );\n * spotLight.map = new THREE.TextureLoader().load( url );\n *\n * spotLight.castShadow = true;\n * spotLight.shadow.mapSize.width = 1024;\n * spotLight.shadow.mapSize.height = 1024;\n * spotLight.shadow.camera.near = 500;\n * spotLight.shadow.camera.far = 4000;\n * spotLight.shadow.camera.fov = 30;s\n * ```\n *\n * @augments Light\n */\nclass SpotLight extends Light {\n\n\t/**\n\t * Constructs a new spot light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n\t * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n\t * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n\t * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.\n\t * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n\t */\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSpotLight = true;\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\t/**\n\t\t * The spot light points from its position to the\n\t\t * target's position.\n\t\t *\n\t\t * For the target's position to be changed to anything other\n\t\t * than the default, it must be added to the scene.\n\t\t *\n\t\t * It is also possible to set the target to be another 3D object\n\t\t * in the scene. The light will now track the target object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.target = new Object3D();\n\n\t\t/**\n\t\t * Maximum range of the light. `0` means no limit.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.distance = distance;\n\n\t\t/**\n\t\t * Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI/3\n\t\t */\n\t\tthis.angle = angle;\n\n\t\t/**\n\t\t * Percent of the spotlight cone that is attenuated due to penumbra.\n\t\t * Value range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.penumbra = penumbra;\n\n\t\t/**\n\t\t * The amount the light dims along the distance of the light. In context of\n\t\t * physically-correct rendering the default value should not be changed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.decay = decay;\n\n\t\t/**\n\t\t * A texture used to modulate the color of the light. The spot light\n\t\t * color is mixed with the RGB value of this texture, with a ratio\n\t\t * corresponding to its alpha value. The cookie-like masking effect is\n\t\t * reproduced using pixel values (0, 0, 0, 1-cookie_value).\n\t\t *\n\t\t * *Warning*: This property is disabled if {@link Object3D#castShadow} is set to `false`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {SpotLightShadow}\n\t\t */\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\t/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t *  Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\n/**\n * Represents the shadow configuration of point lights.\n *\n * @augments LightShadow\n */\nclass PointLightShadow extends LightShadow {\n\n\t/**\n\t * Constructs a new point light shadow.\n\t */\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointLightShadow = true;\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( -1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, -1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, -1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, -1 )\n\t\t];\n\n\t}\n\n\t/**\n\t * Update the matrices for the camera and shadow, used internally by the renderer.\n\t *\n\t * @param {Light} light - The light for which the shadow is being rendered.\n\t * @param {number} [viewportIndex=0] - The viewport index.\n\t */\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\n/**\n * A light that gets emitted from a single point in all directions. A common\n * use case for this is to replicate the light emitted from a bare\n * lightbulb.\n *\n * This light can cast shadows - see the {@link PointLightShadow} for details.\n *\n * ```js\n * const light = new THREE.PointLight( 0xff0000, 1, 100 );\n * light.position.set( 50, 50, 50 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass PointLight extends Light {\n\n\t/**\n\t * Constructs a new point light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n\t * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n\t * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n\t */\n\tconstructor( color, intensity, distance = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointLight = true;\n\n\t\tthis.type = 'PointLight';\n\n\t\t/**\n\t\t * When distance is zero, light will attenuate according to inverse-square\n\t\t * law to infinite distance. When distance is non-zero, light will attenuate\n\t\t * according to inverse-square law until near the distance cutoff, where it\n\t\t * will then attenuate quickly and smoothly to 0. Inherently, cutoffs are not\n\t\t * physically correct.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.distance = distance;\n\n\t\t/**\n\t\t * The amount the light dims along the distance of the light. In context of\n\t\t * physically-correct rendering the default value should not be changed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.decay = decay;\n\n\t\t/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {PointLightShadow}\n\t\t */\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\t/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t * Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Camera that uses [orthographic projection]{@link https://en.wikipedia.org/wiki/Orthographic_projection}.\n *\n * In this projection mode, an object's size in the rendered image stays\n * constant regardless of its distance from the camera. This can be useful\n * for rendering 2D scenes and UI elements, amongst other things.\n *\n * ```js\n * const camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass OrthographicCamera extends Camera {\n\n\t/**\n\t * Constructs a new orthographic camera.\n\t *\n\t * @param {number} [left=-1] - The left plane of the camera's frustum.\n\t * @param {number} [right=1] - The right plane of the camera's frustum.\n\t * @param {number} [top=1] - The top plane of the camera's frustum.\n\t * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.\n\t * @param {number} [near=0.1] - The camera's near plane.\n\t * @param {number} [far=2000] - The camera's far plane.\n\t */\n\tconstructor( left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isOrthographicCamera = true;\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\t/**\n\t\t * The zoom factor of the camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.zoom = 1;\n\n\t\t/**\n\t\t * Represents the frustum window specification. This property should not be edited\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.view = null;\n\n\t\t/**\n\t\t * The left plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.left = left;\n\n\t\t/**\n\t\t * The right plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.right = right;\n\n\t\t/**\n\t\t * The top plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.top = top;\n\n\t\t/**\n\t\t * The bottom plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.bottom = bottom;\n\n\t\t/**\n\t\t * The camera's near plane. The valid range is greater than `0`\n\t\t * and less than the current value of {@link OrthographicCamera#far}.\n\t\t *\n\t\t * Note that, unlike for the {@link PerspectiveCamera}, `0` is a\n\t\t * valid value for an orthographic camera's near plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The camera's far plane. Must be greater than the\n\t\t * current value of {@link OrthographicCamera#near}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2000\n\t\t */\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * @param {number} fullWidth - The full width of multiview setup.\n\t * @param {number} fullHeight - The full height of multiview setup.\n\t * @param {number} x - The horizontal offset of the subcamera.\n\t * @param {number} y - The vertical offset of the subcamera.\n\t * @param {number} width - The width of subcamera.\n\t * @param {number} height - The height of subcamera.\n\t * @see {@link PerspectiveCamera#setViewOffset}\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Removes the view offset from the projection matrix.\n\t */\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Updates the camera's projection matrix. Must be called after any change of\n\t * camera properties.\n\t */\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */\nclass DirectionalLightShadow extends LightShadow {\n\n\t/**\n\t * Constructs a new directional light shadow.\n\t */\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( -5, 5, 5, -5, 0.5, 500 ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDirectionalLightShadow = true;\n\n\t}\n\n}\n\n/**\n * A light that gets emitted in a specific direction. This light will behave\n * as though it is infinitely far away and the rays produced from it are all\n * parallel. The common use case for this is to simulate daylight; the sun is\n * far enough away that its position can be considered to be infinite, and\n * all light rays coming from it are parallel.\n *\n * A common point of confusion for directional lights is that setting the\n * rotation has no effect. This is because three.js's DirectionalLight is the\n * equivalent to what is often called a 'Target Direct Light' in other\n * applications.\n *\n * This means that its direction is calculated as pointing from the light's\n * {@link Object3D#position} to the {@link DirectionalLight#target} position\n * (as opposed to a 'Free Direct Light' that just has a rotation\n * component).\n *\n * This light can cast shadows - see the {@link DirectionalLightShadow} for details.\n *\n * ```js\n * // White directional light at half intensity shining from the top.\n * const directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );\n * scene.add( directionalLight );\n * ```\n *\n * @augments Light\n */\nclass DirectionalLight extends Light {\n\n\t/**\n\t * Constructs a new directional light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDirectionalLight = true;\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\t/**\n\t\t * The directional light points from its position to the\n\t\t * target's position.\n\t\t *\n\t\t * For the target's position to be changed to anything other\n\t\t * than the default, it must be added to the scene.\n\t\t *\n\t\t * It is also possible to set the target to be another 3D object\n\t\t * in the scene. The light will now track the target object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.target = new Object3D();\n\n\t\t/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {DirectionalLightShadow}\n\t\t */\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This light globally illuminates all objects in the scene equally.\n *\n * It cannot be used to cast shadows as it does not have a direction.\n *\n * ```js\n * const light = new THREE.AmbientLight( 0x404040 ); // soft white light\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass AmbientLight extends Light {\n\n\t/**\n\t * Constructs a new ambient light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isAmbientLight = true;\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\n/**\n * This class emits light uniformly across the face a rectangular plane.\n * This light type can be used to simulate light sources such as bright\n * windows or strip lighting.\n *\n * Important Notes:\n *\n * - There is no shadow support.\n * - Only PBR materials are supported.\n * - You have to include `RectAreaLightUniformsLib` (`WebGLRenderer`) or `RectAreaLightTexturesLib` (`WebGPURenderer`)\n * into your app and init the uniforms/textures.\n *\n * ```js\n * RectAreaLightUniformsLib.init(); // only relevant for WebGLRenderer\n * THREE.RectAreaLightNode.setLTC( RectAreaLightTexturesLib.init() ); //  only relevant for WebGPURenderer\n *\n * const intensity = 1; const width = 10; const height = 10;\n * const rectLight = new THREE.RectAreaLight( 0xffffff, intensity, width, height );\n * rectLight.position.set( 5, 5, 0 );\n * rectLight.lookAt( 0, 0, 0 );\n * scene.add( rectLight )\n * ```\n *\n * @augments Light\n */\nclass RectAreaLight extends Light {\n\n\t/**\n\t * Constructs a new area light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t * @param {number} [width=10] - The width of the light.\n\t * @param {number} [height=10] - The height of the light.\n\t */\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRectAreaLight = true;\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\t/**\n\t\t * The width of the light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.height = height;\n\n\t}\n\n\t/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t * Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Represents a third-order spherical harmonics (SH). Light probes use this class\n * to encode lighting information.\n *\n * - Primary reference: {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf}\n * - Secondary reference: {@link https://www.ppsloan.org/publications/StupidSH36.pdf}\n */\nclass SphericalHarmonics3 {\n\n\t/**\n\t * Constructs a new spherical harmonics.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSphericalHarmonics3 = true;\n\n\t\t/**\n\t\t * An array holding the (9) SH coefficients.\n\t\t *\n\t\t * @type {Array<Vector3>}\n\t\t */\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the given SH coefficients to this instance by copying\n\t * the values.\n\t *\n\t * @param {Array<Vector3>} coefficients - The SH coefficients.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets all SH coefficients to `0`.\n\t *\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the radiance in the direction of the given normal.\n\t *\n\t * @param {Vector3} normal - The normal vector (assumed to be unit length)\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The radiance.\n\t */\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the irradiance (radiance convolved with cosine lobe) in the\n\t * direction of the given normal.\n\t *\n\t * @param {Vector3} normal - The normal vector (assumed to be unit length)\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The irradiance.\n\t */\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Adds the given SH to this instance.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to add.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * A convenience method for performing {@link SphericalHarmonics3#add} and\n\t * {@link SphericalHarmonics3#scale} at once.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to add.\n\t * @param {number} s - The scale factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Scales this SH by the given scale factor.\n\t *\n\t * @param {number} s - The scale factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linear interpolates between the given SH and this instance by the given\n\t * alpha factor.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to interpolate with.\n\t * @param {number} alpha - The alpha factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this spherical harmonics is equal with the given one.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics to test for equality.\n\t * @return {boolean} Whether this spherical harmonics is equal with the given one.\n\t */\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Copies the values of the given spherical harmonics to this instance.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics to copy.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\t/**\n\t * Returns a new spherical harmonics with copied values from this instance.\n\t *\n\t * @return {SphericalHarmonics3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Sets the SH coefficients of this instance from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the SH coefficients.\n\t * @param {number} [offset=0] - The array offset where to start copying.\n\t * @return {SphericalHarmonics3} A clone of this instance.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns an array with the SH coefficients, or copies them into the provided\n\t * array. The coefficients are represented as numbers.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array.\n\t * @param {number} [offset=0] - The array offset where to start copying.\n\t * @return {Array<number>} An array with flat SH coefficients.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Computes the SH basis for the given normal vector.\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {Array<number>} shBasis - The target array holding the SH basis.\n\t */\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\n/**\n * Light probes are an alternative way of adding light to a 3D scene. Unlike\n * classical light sources (e.g. directional, point or spot lights), light\n * probes do not emit light. Instead they store information about light\n * passing through 3D space. During rendering, the light that hits a 3D\n * object is approximated by using the data from the light probe.\n *\n * Light probes are usually created from (radiance) environment maps. The\n * class {@link LightProbeGenerator} can be used to create light probes from\n * cube textures or render targets. However, light estimation data could also\n * be provided in other forms e.g. by WebXR. This enables the rendering of\n * augmented reality content that reacts to real world lighting.\n *\n * The current probe implementation in three.js supports so-called diffuse\n * light probes. This type of light probe is functionally equivalent to an\n * irradiance environment map.\n *\n * @augments Light\n */\nclass LightProbe extends Light {\n\n\t/**\n\t * Constructs a new light probe.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLightProbe = true;\n\n\t\t/**\n\t\t * A light probe uses spherical harmonics to encode lighting information.\n\t\t *\n\t\t * @type {SphericalHarmonics3}\n\t\t */\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deserializes the light prove from the given JSON.\n\t *\n\t * @param {Object} json - The JSON holding the serialized light probe.\n\t * @return {LightProbe} A reference to this light probe.\n\t */\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass MaterialLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\t\tthis.textures = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = this.createMaterialFromType( json.type );\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.dispersion !== undefined ) material.dispersion = json.dispersion;\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.anisotropy !== undefined ) material.anisotropy = json.anisotropy;\n\t\tif ( json.anisotropyRotation !== undefined ) material.anisotropyRotation = json.anisotropyRotation;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.alphaHash !== undefined ) material.alphaHash = json.alphaHash;\n\t\tif ( json.depthFunc !== undefined ) material.depthFunc = json.depthFunc;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.blendSrc !== undefined ) material.blendSrc = json.blendSrc;\n\t\tif ( json.blendDst !== undefined ) material.blendDst = json.blendDst;\n\t\tif ( json.blendEquation !== undefined ) material.blendEquation = json.blendEquation;\n\t\tif ( json.blendSrcAlpha !== undefined ) material.blendSrcAlpha = json.blendSrcAlpha;\n\t\tif ( json.blendDstAlpha !== undefined ) material.blendDstAlpha = json.blendDstAlpha;\n\t\tif ( json.blendEquationAlpha !== undefined ) material.blendEquationAlpha = json.blendEquationAlpha;\n\t\tif ( json.blendColor !== undefined && material.blendColor !== undefined ) material.blendColor.setHex( json.blendColor );\n\t\tif ( json.blendAlpha !== undefined ) material.blendAlpha = json.blendAlpha;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== undefined ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\tif ( json.forceSinglePass !== undefined ) material.forceSinglePass = json.forceSinglePass;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.lights !== undefined ) material.lights = json.lights;\n\t\tif ( json.clipping !== undefined ) material.clipping = json.clipping;\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapRotation !== undefined ) material.envMapRotation.fromArray( json.envMapRotation );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.anisotropyMap !== undefined ) material.anisotropyMap = getTexture( json.anisotropyMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\tcreateMaterialFromType( type ) {\n\n\t\treturn MaterialLoader.createMaterialFromType( type );\n\n\t}\n\n\tstatic createMaterialFromType( type ) {\n\n\t\tconst materialLib = {\n\t\t\tShadowMaterial,\n\t\t\tSpriteMaterial,\n\t\t\tRawShaderMaterial,\n\t\t\tShaderMaterial,\n\t\t\tPointsMaterial,\n\t\t\tMeshPhysicalMaterial,\n\t\t\tMeshStandardMaterial,\n\t\t\tMeshPhongMaterial,\n\t\t\tMeshToonMaterial,\n\t\t\tMeshNormalMaterial,\n\t\t\tMeshLambertMaterial,\n\t\t\tMeshDepthMaterial,\n\t\t\tMeshDistanceMaterial,\n\t\t\tMeshBasicMaterial,\n\t\t\tMeshMatcapMaterial,\n\t\t\tLineDashedMaterial,\n\t\t\tLineBasicMaterial,\n\t\t\tMaterial\n\t\t};\n\n\t\treturn new materialLib[ type ]();\n\n\t}\n\n}\n\nclass LoaderUtils {\n\n\tstatic decodeText( array ) { // @deprecated, r165\n\n\t\tconsole.warn( 'THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead.' );\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tlet s = '';\n\n\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t}\n\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === -1 ) return './';\n\n\t\treturn url.slice( 0, index + 1 );\n\n\t}\n\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\nclass InstancedBufferGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isInstancedBufferGeometry = true;\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceCount = source.instanceCount;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.instanceCount = this.instanceCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass BufferGeometryLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst interleavedBufferMap = {};\n\t\tconst arrayBufferMap = {};\n\n\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\treturn ib;\n\n\t\t}\n\n\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n\n\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\treturn ab;\n\n\t\t}\n\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tconst index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tconst attributes = json.data.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\t\t\tlet bufferAttribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( const key in morphAttributes ) {\n\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attribute = attributeArray[ i ];\n\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t}\n\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tconst center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nclass ObjectLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( new Error( 'THREE.ObjectLoader: Can\\'t load ' + url ) );\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tasync loadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await loader.loadAsync( url, onProgress );\n\n\t\tconst json = JSON.parse( text );\n\n\t\tconst metadata = json.metadata;\n\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\n\t\t}\n\n\t\treturn await scope.parseAsync( json );\n\n\t}\n\n\tparse( json, onLoad ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\t\tthis.bindLightTargets( object );\n\n\t\t//\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\tlet hasImages = false;\n\n\t\t\tfor ( const uuid in images ) {\n\n\t\t\t\tif ( images[ uuid ].data instanceof HTMLImageElement ) {\n\n\t\t\t\t\thasImages = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasImages === false ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tasync parseAsync( json ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = await this.parseImagesAsync( json.images );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\t\tthis.bindLightTargets( object );\n\n\t\treturn object;\n\n\t}\n\n\tparseShapes( json ) {\n\n\t\tconst shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n\tparseSkeletons( json, object ) {\n\n\t\tconst skeletons = {};\n\t\tconst bones = {};\n\n\t\t// generate bone lookup table\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\n\n\t\t} );\n\n\t\t// create skeletons\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\n\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skeletons;\n\n\t}\n\n\tparseGeometries( json, shapes ) {\n\n\t\tconst geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tlet geometry;\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( data.type in Geometries ) {\n\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t}\n\n\tparseMaterials( json, textures ) {\n\n\t\tconst cache = {}; // MultiMaterial\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tparseAnimations( json ) {\n\n\t\tconst animations = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tconst clip = AnimationClip.parse( data );\n\n\t\t\t\tanimations[ clip.uuid ] = clip;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n\tparseImages( json, onLoad ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn loadImage( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tconst manager = new LoadingManager( onLoad );\n\n\t\t\tloader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tasync parseImagesAsync( json ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tasync function deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn await loader.loadAsync( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tloader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tparseTextures( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tconst textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tconst source = images[ data.image ];\n\t\t\t\tconst image = source.data;\n\n\t\t\t\tlet texture;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture();\n\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( image && image.data ) {\n\n\t\t\t\t\t\ttexture = new DataTexture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\n\n\t\t\t\t}\n\n\t\t\t\ttexture.source = source;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\t\t\t\tif ( data.channel !== undefined ) texture.channel = data.channel;\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.internalFormat !== undefined ) texture.internalFormat = data.internalFormat;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.colorSpace !== undefined ) texture.colorSpace = data.colorSpace;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.generateMipmaps !== undefined ) texture.generateMipmaps = data.generateMipmaps;\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\tif ( data.compareFunction !== undefined ) texture.compareFunction = data.compareFunction;\n\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tparseObject( data, geometries, materials, textures, animations ) {\n\n\t\tlet object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tfunction getTexture( uuid ) {\n\n\t\t\tif ( textures[ uuid ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n\n\t\t\t}\n\n\t\t\treturn textures[ uuid ];\n\n\t\t}\n\n\t\tlet geometry, material;\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.background = getTexture( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.environment !== undefined ) {\n\n\t\t\t\t\tobject.environment = getTexture( data.environment );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog.name !== '' ) {\n\n\t\t\t\t\t\tobject.fog.name = data.fog.name;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.backgroundBlurriness !== undefined ) object.backgroundBlurriness = data.backgroundBlurriness;\n\t\t\t\tif ( data.backgroundIntensity !== undefined ) object.backgroundIntensity = data.backgroundIntensity;\n\t\t\t\tif ( data.backgroundRotation !== undefined ) object.backgroundRotation.fromArray( data.backgroundRotation );\n\n\t\t\t\tif ( data.environmentIntensity !== undefined ) object.environmentIntensity = data.environmentIntensity;\n\t\t\t\tif ( data.environmentRotation !== undefined ) object.environmentRotation.fromArray( data.environmentRotation );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\t\t\t\tobject.target = data.target || '';\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\t\t\t\tobject.target = data.target || '';\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LightProbe':\n\n\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t \tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'InstancedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\tconst count = data.count;\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\tconst instanceColor = data.instanceColor;\n\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'BatchedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new BatchedMesh( data.maxInstanceCount, data.maxVertexCount, data.maxIndexCount, material );\n\t\t\t\tobject.geometry = geometry;\n\t\t\t\tobject.perObjectFrustumCulled = data.perObjectFrustumCulled;\n\t\t\t\tobject.sortObjects = data.sortObjects;\n\n\t\t\t\tobject._drawRanges = data.drawRanges;\n\t\t\t\tobject._reservedRanges = data.reservedRanges;\n\n\t\t\t\tobject._visibility = data.visibility;\n\t\t\t\tobject._active = data.active;\n\t\t\t\tobject._bounds = data.bounds.map( bound => {\n\n\t\t\t\t\tconst box = new Box3();\n\t\t\t\t\tbox.min.fromArray( bound.boxMin );\n\t\t\t\t\tbox.max.fromArray( bound.boxMax );\n\n\t\t\t\t\tconst sphere = new Sphere();\n\t\t\t\t\tsphere.radius = bound.sphereRadius;\n\t\t\t\t\tsphere.center.fromArray( bound.sphereCenter );\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tboxInitialized: bound.boxInitialized,\n\t\t\t\t\t\tbox: box,\n\n\t\t\t\t\t\tsphereInitialized: bound.sphereInitialized,\n\t\t\t\t\t\tsphere: sphere\n\t\t\t\t\t};\n\n\t\t\t\t} );\n\n\t\t\t\tobject._maxInstanceCount = data.maxInstanceCount;\n\t\t\t\tobject._maxVertexCount = data.maxVertexCount;\n\t\t\t\tobject._maxIndexCount = data.maxIndexCount;\n\n\t\t\t\tobject._geometryInitialized = data.geometryInitialized;\n\t\t\t\tobject._geometryCount = data.geometryCount;\n\n\t\t\t\tobject._matricesTexture = getTexture( data.matricesTexture.uuid );\n\t\t\t\tif ( data.colorsTexture !== undefined ) object._colorsTexture = getTexture( data.colorsTexture.uuid );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Bone':\n\n\t\t\t\tobject = new Bone();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.up !== undefined ) object.up.fromArray( data.up );\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.intensity !== undefined ) object.shadow.intensity = data.shadow.intensity;\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.animations !== undefined ) {\n\n\t\t\tconst objectAnimations = data.animations;\n\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\n\n\t\t\t\tconst uuid = objectAnimations[ i ];\n\n\t\t\t\tobject.animations.push( animations[ uuid ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n\n\t\t\tconst levels = data.levels;\n\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tconst level = levels[ l ];\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance, level.hysteresis );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tbindSkeletons( object, skeletons ) {\n\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\n\n\t\t\t\tif ( skeleton === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tbindLightTargets( object ) {\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isDirectionalLight || child.isSpotLight ) {\n\n\t\t\t\tconst uuid = child.target;\n\n\t\t\t\tconst target = object.getObjectByProperty( 'uuid', uuid );\n\n\t\t\t\tif ( target !== undefined ) {\n\n\t\t\t\t\tchild.target = target;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.target = new Object3D();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n}\n\nconst TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping\n};\n\nconst TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nconst TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\nclass ImageBitmapLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.isImageBitmapLoader = true;\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\t// If cached is a promise, wait for it to resolve\n\t\t\tif ( cached.then ) {\n\n\t\t\t\tcached.then( imageBitmap => {\n\n\t\t\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} ).catch( e => {\n\n\t\t\t\t\tif ( onError ) onError( e );\n\n\t\t\t\t} );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// If cached is not a promise (i.e., it's already an imageBitmap)\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\n\t\tconst promise = fetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t\treturn imageBitmap;\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tCache.remove( url );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tCache.add( url, promise );\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n}\n\nlet _context;\n\n/**\n * Manages the global audio context in the engine.\n *\n * @hideconstructor\n */\nclass AudioContext {\n\n\t/**\n\t * Returns the global native audio context.\n\t *\n\t * @return {AudioContext} The native audio context.\n\t */\n\tstatic getContext() {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t}\n\n\t/**\n\t * Allows to set the global native audio context from outside.\n\t *\n\t * @param {AudioContext} value - The native context to set.\n\t */\n\tstatic setContext( value ) {\n\n\t\t_context = value;\n\n\t}\n\n}\n\nclass AudioLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} ).catch( handleError );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\thandleError( e );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\tfunction handleError( e ) {\n\n\t\t\tif ( onError ) {\n\n\t\t\t\tonError( e );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( e );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}\n\n\t}\n\n}\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\n\n/**\n * A special type of camera that uses two perspective cameras with\n * stereoscopic projection. Can be used for rendering stereo effects\n * like [3D Anaglyph]{@link https://en.wikipedia.org/wiki/Anaglyph_3D} or\n * [Parallax Barrier]{@link https://en.wikipedia.org/wiki/parallax_barrier}.\n */\nclass StereoCamera {\n\n\t/**\n\t * Constructs a new stereo camera.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'StereoCamera';\n\n\t\t/**\n\t\t * The aspect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aspect = 1;\n\n\t\t/**\n\t\t * The eye separation which represents the distance\n\t\t * between the left and right camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.064\n\t\t */\n\t\tthis.eyeSep = 0.064;\n\n\t\t/**\n\t\t * The camera representing the left eye. This is added to layer `1` so objects to be\n\t\t * rendered by the left camera must also be added to this layer.\n\t\t *\n\t\t * @type {PerspectiveCamera}\n\t\t */\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The camera representing the right eye. This is added to layer `2` so objects to be\n\t\t * rendered by the right camera must also be added to this layer.\n\t\t *\n\t\t * @type {PerspectiveCamera}\n\t\t */\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\t/**\n\t * Updates the stereo camera based on the given perspective camera.\n\t *\n\t * @param {PerspectiveCamera} camera - The perspective camera.\n\t */\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\n/**\n * This type of camera can be used in order to efficiently render a scene with a\n * predefined set of cameras. This is an important performance aspect for\n * rendering VR scenes.\n *\n * An instance of `ArrayCamera` always has an array of sub cameras. It's mandatory\n * to define for each sub camera the `viewport` property which determines the\n * part of the viewport that is rendered with this camera.\n *\n * @augments PerspectiveCamera\n */\nclass ArrayCamera extends PerspectiveCamera {\n\n\t/**\n\t * Constructs a new array camera.\n\t *\n\t * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.\n\t */\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArrayCamera = true;\n\n\t\t/**\n\t\t * An array of perspective sub cameras.\n\t\t *\n\t\t * @type {Array<PerspectiveCamera>}\n\t\t */\n\t\tthis.cameras = array;\n\t\tthis.index = 0;\n\n\t}\n\n}\n\nclass Clock {\n\n\tconstructor( autoStart = true ) {\n\n\t\tthis.autoStart = autoStart;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn performance.now();\n\n}\n\nconst _position$1 = /*@__PURE__*/ new Vector3();\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\nconst _scale$1 = /*@__PURE__*/ new Vector3();\nconst _orientation$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * The class represents a virtual listener of the all positional and non-positional audio effects\n * in the scene. A three.js application usually creates a single listener. It is a mandatory\n * constructor parameter for audios entities like {@link Audio} and {@link PositionalAudio}.\n *\n * In most cases, the listener object is a child of the camera. So the 3D transformation of the\n * camera represents the 3D transformation of the listener.\n *\n * @augments Object3D\n */\nclass AudioListener extends Object3D {\n\n\t/**\n\t * Constructs a new audio listener.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\t/**\n\t\t * The native audio context.\n\t\t *\n\t\t * @type {AudioContext}\n\t\t * @readonly\n\t\t */\n\t\tthis.context = AudioContext.getContext();\n\n\t\t/**\n\t\t * The gain node used for volume control.\n\t\t *\n\t\t * @type {GainNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\t/**\n\t\t * An optional filter.\n\t\t *\n\t\t * Defined via {@AudioListener#setFilter}.\n\t\t *\n\t\t * @type {?AudioNode}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.filter = null;\n\n\t\t/**\n\t\t * Time delta values required for `linearRampToValueAtTime()` usage.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\t/**\n\t * Returns the listener's input node.\n\t *\n\t * This method is used by other audio nodes to connect to this listener.\n\t *\n\t * @return {GainNode} The input node.\n\t */\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\t/**\n\t * Removes the current filter from this listener.\n\t *\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current set filter.\n\t *\n\t * @return {AudioNode} The filter.\n\t */\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\t/**\n\t * Sets the given filter to this listener.\n\t *\n\t * @param {AudioNode} value - The filter to set.\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the applications master volume.\n\t *\n\t * @return {number} The master volume.\n\t */\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\t/**\n\t * Sets the applications master volume. This volume setting affects\n\t * all audio nodes in the scene.\n\t *\n\t * @param {number} value - The master volume to set.\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\t\tconst up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n\n\t\t_orientation$1.set( 0, 0, -1 ).applyQuaternion( _quaternion$1 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n\t\t\tlistener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Represents a non-positional ( global ) audio object.\n *\n * This and related audio modules make use of the [Web Audio API]{@link https://www.w3.org/TR/webaudio-1.1/}.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create a global audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop( true );\n * \tsound.setVolume( 0.5 );\n * \tsound.play();\n * });\n * ```\n *\n * @augments Object3D\n */\nclass Audio extends Object3D {\n\n\t/**\n\t * Constructs a new audio.\n\t *\n\t * @param {AudioListener} listener - The global audio listener.\n\t */\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\t/**\n\t\t * The global audio listener.\n\t\t *\n\t\t * @type {AudioListener}\n\t\t * @readonly\n\t\t */\n\t\tthis.listener = listener;\n\n\t\t/**\n\t\t * The audio context.\n\t\t *\n\t\t * @type {AudioContext}\n\t\t * @readonly\n\t\t */\n\t\tthis.context = listener.context;\n\n\t\t/**\n\t\t * The gain node used for volume control.\n\t\t *\n\t\t * @type {GainNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\t/**\n\t\t * Whether to start playback automatically or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.autoplay = false;\n\n\t\t/**\n\t\t * A reference to an audio buffer.\n\t\t *\n\t\t * Defined via {@link Audio#setBuffer}.\n\t\t *\n\t\t * @type {?AudioBuffer}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.buffer = null;\n\n\t\t/**\n\t\t * Modify pitch, measured in cents. +/- 100 is a semitone.\n\t\t * +/- 1200 is an octave.\n\t\t *\n\t\t * Defined via {@link Audio#setDetune}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.detune = 0;\n\n\t\t/**\n\t\t * Whether the audio should loop or not.\n\t\t *\n\t\t * Defined via {@link Audio#setLoop}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.loop = false;\n\n\t\t/**\n\t\t * Defines where in the audio buffer the replay should\n\t\t * start, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.loopStart = 0;\n\n\t\t/**\n\t\t * Defines where in the audio buffer the replay should\n\t\t * stop, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.loopEnd = 0;\n\n\t\t/**\n\t\t * An offset to the time within the audio buffer the playback\n\t\t * should begin, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.offset = 0;\n\n\t\t/**\n\t\t * Overrides the default duration of the audio.\n\t\t *\n\t\t * @type {undefined|number}\n\t\t * @default undefined\n\t\t */\n\t\tthis.duration = undefined;\n\n\t\t/**\n\t\t * The playback speed.\n\t\t *\n\t\t * Defined via {@link Audio#setPlaybackRate}.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 1\n\t\t */\n\t\tthis.playbackRate = 1;\n\n\t\t/**\n\t\t * Indicates whether the audio is playing or not.\n\t\t *\n\t\t * This flag will be automatically set when using {@link Audio#play},\n\t\t * {@link Audio#pause}, {@link Audio#stop}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isPlaying = false;\n\n\t\t/**\n\t\t * Indicates whether the audio playback can be controlled\n\t\t * with method like {@link Audio#play} or {@link Audio#pause}.\n\t\t *\n\t\t * This flag will be automatically set when audio sources are\n\t\t * defined.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.hasPlaybackControl = true;\n\n\t\t/**\n\t\t * Holds a reference to the current audio source.\n\t\t *\n\t\t * The property is automatically by one of the `set*()` methods.\n\t\t *\n\t\t * @type {?AudioNode}\n\t\t * @readonly\n\t\t * @default null\n\t\t */\n\t\tthis.source = null;\n\n\t\t/**\n\t\t * Defines the source type.\n\t\t *\n\t\t * The property is automatically by one of the `set*()` methods.\n\t\t *\n\t\t * @type {('empty'|'audioNode'|'mediaNode'|'mediaStreamNode'|'buffer')}\n\t\t * @readonly\n\t\t * @default 'empty'\n\t\t */\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\t/**\n\t\t * Can be used to apply a variety of low-order filters to create\n\t\t * more complex sound effects e.g. via `BiquadFilterNode`.\n\t\t *\n\t\t * The property is automatically set by {@link Audio#setFilters}.\n\t\t *\n\t\t * @type {Array<AudioNode>}\n\t\t * @readonly\n\t\t */\n\t\tthis.filters = [];\n\n\t}\n\n\t/**\n\t * Returns the output audio node.\n\t *\n\t * @return {GainNode} The output node.\n\t */\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\t/**\n\t * Sets the given audio node as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `audioNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {AudioNode} audioNode - The audio node like an instance of `OscillatorNode`.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given media element as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `mediaNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {HTMLMediaElement} mediaElement - The media element.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given media stream as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `mediaStreamNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {MediaStream} mediaStream - The media stream.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given audio buffer as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `buffer` and {@link Audio#hasPlaybackControl} to `true`.\n\t *\n\t * @param {AudioBuffer} audioBuffer - The audio buffer.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [delay=0] - The delay, in seconds, at which the audio should start playing.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\t/**\n\t * Pauses the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Stops the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [delay=0] - The delay, in seconds, at which the audio should stop playing.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tstop( delay = 0 ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tif ( this.source !== null ) {\n\n\t\t\tthis.source.stop( this.context.currentTime + delay );\n\t\t\tthis.source.onended = null;\n\n\t\t}\n\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Connects to the audio source. This is used internally on\n\t * initialisation and when setting / removing filters.\n\t *\n\t * @return {Audio} A reference to this instance.\n\t */\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Disconnects to the audio source. This is used internally on\n\t * initialisation and when setting / removing filters.\n\t *\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tdisconnect() {\n\n\t\tif ( this._connected === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current set filters.\n\t *\n\t * @return {Array<AudioNode>} The list of filters.\n\t */\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\t/**\n\t * Sets an array of filters and connects them with the audio source.\n\t *\n\t * @param {Array<AudioNode>} [value] - A list of filters.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Defines the detuning of oscillation in cents.\n\t *\n\t * @param {number} value - The detuning of oscillation in cents.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.isPlaying === true && this.source.detune !== undefined ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the detuning of oscillation in cents.\n\t *\n\t * @return {number} The detuning of oscillation in cents.\n\t */\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\t/**\n\t * Returns the first filter in the list of filters.\n\t *\n\t * @return {AudioNode|undefined} The first filter in the list of filters.\n\t */\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\t/**\n\t * Applies a single filter node to the audio.\n\t *\n\t * @param {AudioNode} [filter] - The filter to set.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\t/**\n\t * Sets the playback rate.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [value] - The playback rate to set.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current playback rate.\n\n\t * @return {number} The playback rate.\n\t */\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\t/**\n\t * Automatically called when playback finished.\n\t */\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\t\tthis._progress = 0;\n\n\t}\n\n\t/**\n\t * Returns the loop flag.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @return {boolean} Whether the audio should loop or not.\n\t */\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\t/**\n\t * Sets the loop flag.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {boolean} value - Whether the audio should loop or not.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the loop start value which defines where in the audio buffer the replay should\n\t * start, in seconds.\n\t *\n\t * @param {number} value - The loop start value.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the loop end value which defines where in the audio buffer the replay should\n\t * stop, in seconds.\n\t *\n\t * @param {number} value - The loop end value.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the volume.\n\t *\n\t * @return {number} The volume.\n\t */\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\t/**\n\t * Sets the volume.\n\t *\n\t * @param {number} value - The volume to set.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.sourceType !== 'buffer' ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio source type cannot be copied.' );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.autoplay = source.autoplay;\n\n\t\tthis.buffer = source.buffer;\n\t\tthis.detune = source.detune;\n\t\tthis.loop = source.loop;\n\t\tthis.loopStart = source.loopStart;\n\t\tthis.loopEnd = source.loopEnd;\n\t\tthis.offset = source.offset;\n\t\tthis.duration = source.duration;\n\t\tthis.playbackRate = source.playbackRate;\n\t\tthis.hasPlaybackControl = source.hasPlaybackControl;\n\t\tthis.sourceType = source.sourceType;\n\n\t\tthis.filters = source.filters.slice();\n\n\t\treturn this;\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor( this.listener ).copy( this, recursive );\n\n\t}\n\n}\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\n/**\n * Represents a positional audio object.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create the PositionalAudio object (passing in the listener)\n * const sound = new THREE.PositionalAudio( listener );\n *\n * // load a sound and set it as the PositionalAudio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/song.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setRefDistance( 20 );\n * \tsound.play();\n * });\n *\n * // create an object for the sound to play from\n * const sphere = new THREE.SphereGeometry( 20, 32, 16 );\n * const material = new THREE.MeshPhongMaterial( { color: 0xff2200 } );\n * const mesh = new THREE.Mesh( sphere, material );\n * scene.add( mesh );\n *\n * // finally add the sound to the mesh\n * mesh.add( sound );\n *\n * @augments Audio\n */\nclass PositionalAudio extends Audio {\n\n\t/**\n\t * Constructs a positional audio.\n\t *\n\t * @param {AudioListener} listener - The global audio listener.\n\t */\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\t/**\n\t\t * The panner node represents the location, direction, and behavior of an audio\n\t\t * source in 3D space.\n\t\t *\n\t\t * @type {PannerNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tconnect() {\n\n\t\tsuper.connect();\n\n\t\tthis.panner.connect( this.gain );\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tsuper.disconnect();\n\n\t\tthis.panner.disconnect( this.gain );\n\n\t\treturn this;\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\t/**\n\t * Returns the current reference distance.\n\t *\n\t * @return {number} The reference distance.\n\t */\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\t/**\n\t * Defines the reference distance for reducing volume as the audio source moves\n\t * further from the listener – i.e. the distance at which the volume reduction\n\t * starts taking effect.\n\t *\n\t * @param {number} value - The reference distance to set.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current rolloff factor.\n\t *\n\t * @return {number} The rolloff factor.\n\t */\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\t/**\n\t * Defines how quickly the volume is reduced as the source moves away from the listener.\n\t *\n\t * @param {number} value - The rolloff factor.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current distance model.\n\t *\n\t * @return {('linear'|'inverse'|'exponential')} The distance model.\n\t */\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\t/**\n\t * Defines which algorithm to use to reduce the volume of the audio source\n\t * as it moves away from the listener.\n\t *\n\t * Read [the spec]{@link https://www.w3.org/TR/webaudio-1.1/#enumdef-distancemodeltype}\n\t * for more details.\n\t *\n\t * @param {('linear'|'inverse'|'exponential')} value - The distance model to set.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current max distance.\n\t *\n\t * @return {number} The max distance.\n\t */\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\t/**\n\t * Defines the maximum distance between the audio source and the listener,\n\t * after which the volume is not reduced any further.\n\t *\n\t * This value is used only by the `linear` distance model.\n\t *\n\t * @param {number} value - The max distance.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the directional cone in which the audio can be listened.\n\t *\n\t * @param {number} coneInnerAngle - An angle, in degrees, of a cone inside of which there will be no volume reduction.\n\t * @param {number} coneOuterAngle - An angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` parameter.\n\t * @param {number} coneOuterGain - The amount of volume reduction outside the cone defined by the `coneOuterAngle`. When set to `0`, no sound can be heard.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This class can be used to analyse audio data.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create an Audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop(true);\n * \tsound.setVolume(0.5);\n * \tsound.play();\n * });\n *\n * // create an AudioAnalyser, passing in the sound and desired fftSize\n * const analyser = new THREE.AudioAnalyser( sound, 32 );\n *\n * // get the average frequency of the sound\n * const data = analyser.getAverageFrequency();\n * ```\n */\nclass AudioAnalyser {\n\n\t/**\n\t * Constructs a new audio analyzer.\n\t *\n\t * @param {Audio} audio - The audio to analyze.\n\t * @param {Audio} [fftSize=2048] - The window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.\n\t */\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\t/**\n\t\t * The global audio listener.\n\t\t *\n\t\t * @type {AnalyserNode}\n\t\t */\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\t/**\n\t\t * Holds the analyzed data.\n\t\t *\n\t\t * @type {Uint8Array}\n\t\t */\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\t/**\n\t * Returns an array with frequency data of the audio.\n\t *\n\t * Each item in the array represents the decibel value for a specific frequency.\n\t * The frequencies are spread linearly from 0 to 1/2 of the sample rate.\n\t * For example, for 48000 sample rate, the last item of the array will represent\n\t * the decibel value for 24000 Hz.\n\t *\n\t * @return {Uint8Array} The frequency data.\n\t */\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\t/**\n\t * Returns the average of the frequencies returned by {@link AudioAnalyser#getFrequencyData}.\n\t *\n\t * @return {number} The average frequency.\n\t */\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\nclass PropertyMixer {\n\n\tconstructor( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tlet mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride;\n\n\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tconst mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'add'\n\taccumulateAdditive( weight ) {\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = stride * this._addIndex;\n\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t// add = identity\n\n\t\t\tthis._setIdentity();\n\n\t\t}\n\n\t\t// add := add + incoming * weight\n\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\tthis.cumulativeWeightAdditive += weight;\n\n\t}\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply( accuIndex ) {\n\n\t\tconst stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t// accuN := accuN + additive accuN\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t}\n\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState() {\n\n\t\tconst binding = this.binding;\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\t// Add to identity for additive\n\t\tthis._setIdentity();\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t}\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState() {\n\n\t\tconst originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t}\n\n\t_setAdditiveIdentityNumeric() {\n\n\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\tthis.buffer[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\t_setAdditiveIdentityQuaternion() {\n\n\t\tthis._setAdditiveIdentityNumeric();\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t}\n\n\t_setAdditiveIdentityOther() {\n\n\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t}\n\n\t}\n\n\n\t// mix functions\n\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t}\n\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst workOffset = this._workIndex * stride;\n\n\t\t// Store result in intermediate buffer offset\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t// Slerp to the intermediate result\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t}\n\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst s = 1 - t;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /*@__PURE__*/ /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /*@__PURE__*/ /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /*@__PURE__*/ /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nconst _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nconst _supportedObjectNames = [ 'material', 'materials', 'bones', 'map' ];\n\nclass Composite {\n\n\tconstructor( targetGroup, path, optionalParsedPath ) {\n\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tgetValue( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t}\n\n\tsetValue( array, offset ) {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t}\n\n\tbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t}\n\n\tunbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\nclass PropertyBinding {\n\n\tconstructor( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName );\n\n\t\tthis.rootNode = rootNode;\n\n\t\t// initial state of these methods that calls 'bind'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n\n\tstatic create( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tstatic sanitizeNodeName( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t}\n\n\tstatic parseTrackName( trackName ) {\n\n\t\tconst matches = _trackRe.exec( trackName );\n\n\t\tif ( matches === null ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tconst results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== -1 ) {\n\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== -1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n\tstatic findNode( root, nodeName ) {\n\n\t\tif ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tconst searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tconst childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable() {}\n\t_setValue_unavailable() {}\n\n\t// Getters\n\n\t_getValue_direct( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\n\n\t}\n\n\t_getValue_array( buffer, offset ) {\n\n\t\tconst source = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t}\n\n\t}\n\n\t_getValue_arrayElement( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t}\n\n\t_getValue_toArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t}\n\n\t// Direct\n\n\t_setValue_direct( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// EntireArray\n\n\t_setValue_array( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t}\n\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// ArrayElement\n\n\t_setValue_arrayElement( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// HasToFromArray\n\n\t_setValue_fromArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t}\n\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t_getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t}\n\n\t_setValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t}\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind() {\n\n\t\tlet targetObject = this.node;\n\t\tconst parsedPath = this.parsedPath;\n\n\t\tconst objectName = parsedPath.objectName;\n\t\tconst propertyName = parsedPath.propertyName;\n\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName );\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.warn( 'THREE.PropertyBinding: No target node found for track: ' + this.path + '.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tlet objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map':\n\n\t\t\t\t\tif ( 'map' in targetObject ) {\n\n\t\t\t\t\t\ttargetObject = targetObject.map;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.map ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.map;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tconst nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tconst nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tlet versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.isMaterial === true ) {\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.isObject3D === true ) {\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tlet bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t}\n\n\tunbind() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n}\n\nPropertyBinding.Composite = Composite;\n\nPropertyBinding.prototype.BindingType = {\n\tDirect: 0,\n\tEntireArray: 1,\n\tArrayElement: 2,\n\tHasFromToArray: 3\n};\n\nPropertyBinding.prototype.Versioning = {\n\tNone: 0,\n\tNeedsUpdate: 1,\n\tMatrixWorldNeedsUpdate: 2\n};\n\nPropertyBinding.prototype.GetterByBindingType = [\n\n\tPropertyBinding.prototype._getValue_direct,\n\tPropertyBinding.prototype._getValue_array,\n\tPropertyBinding.prototype._getValue_arrayElement,\n\tPropertyBinding.prototype._getValue_toArray,\n\n];\n\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n\n\t[\n\t\t// Direct\n\t\tPropertyBinding.prototype._setValue_direct,\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// EntireArray\n\n\t\tPropertyBinding.prototype._setValue_array,\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// ArrayElement\n\t\tPropertyBinding.prototype._setValue_arrayElement,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// HasToFromArray\n\t\tPropertyBinding.prototype._setValue_fromArray,\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n\n\t]\n\n];\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n *  - Add objects you would otherwise pass as 'root' to the\n *    constructor or the .clipAction method of AnimationMixer.\n *\n *  - Instead pass this object as 'root'.\n *\n *  - You can also add and remove objects later when the mixer\n *    is running.\n *\n * Note:\n *\n *    Objects of this class appear as one object to the mixer,\n *    so cache control of the individual objects must be done\n *    on the group.\n *\n * Limitation:\n *\n *  - The animated properties must be compatible among the\n *    all objects in the group.\n *\n *  - A single property can either be controlled through a\n *    target group or directly, but not both.\n */\n\nclass AnimationObjectGroup {\n\n\tconstructor() {\n\n\t\tthis.isAnimationObjectGroup = true;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tconst indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tadd() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet knownObject = undefined,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid;\n\t\t\tlet index = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\tremove() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// remove & forget\n\tuncache() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\tnObjects = objects.length;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tconst lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\tlet index = indicesByPath[ path ];\n\t\tconst bindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tconst paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tconst object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t}\n\n\tunsubscribe_( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n}\n\nclass AnimationAction {\n\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = -1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\t// State & Scheduling\n\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = -1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t// return true when play has been called\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\tcrossFadeFrom( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcrossFadeTo( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Object Accessors\n\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\tdeltaTime = 0;\n\n\t\t\t} else {\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === -1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === -1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === -1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _controlInterpolantsResultBuffer = new Float32Array( 1 );\n\n\nclass AnimationMixer extends EventDispatcher {\n\n\tconstructor( root ) {\n\n\t\tsuper();\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\t_bindAction( action, prototypeAction ) {\n\n\t\tconst root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst track = tracks[ i ],\n\t\t\t\ttrackName = track.name;\n\n\t\t\tlet binding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t}\n\n\t_activateAction( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t}\n\n\t_deactivateAction( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t}\n\n\t// Memory manager\n\n\t_initMemoryManager() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction( action ) {\n\n\t\tconst index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t}\n\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\n\n\t\tconst actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tconst knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t}\n\n\t_removeInactiveAction( action ) {\n\n\t\tconst actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tconst clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t}\n\n\t_removeInactiveBindingsForAction( action ) {\n\n\t\tconst bindings = action._propertyBindings;\n\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tconst binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_lendAction( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t}\n\n\t_takeBackAction( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t}\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindings = this._bindings;\n\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t}\n\n\t_removeInactiveBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t}\n\n\t_lendBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t}\n\n\t_takeBackBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t}\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant() {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, _controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t}\n\n\t_takeBackControlInterpolant( interpolant ) {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t}\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction( clip, optionalRoot, blendMode ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid;\n\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\n\t\tlet prototypeAction = null;\n\n\t\tif ( blendMode === undefined ) {\n\n\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t} else {\n\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t}\n\n\t// get an existing action\n\texistingAction( clip, optionalRoot ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction() {\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions;\n\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\tactions[ i ].stop();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// advance the time and update apply the animation\n\tupdate( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\n\n\t\t\tconst action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tconst bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Allows you to seek to a specific time in an animation.\n\tsetTime( timeInSeconds ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t}\n\n\t// return this mixer's root target object\n\tgetRoot() {\n\n\t\treturn this._root;\n\n\t}\n\n\t// free all resources specific to a particular clip\n\tuncacheClip( clip ) {\n\n\t\tconst actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tconst action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t}\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot( root ) {\n\n\t\tconst rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( const clipUuid in actionsByClip ) {\n\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( const trackName in bindingByName ) {\n\n\t\t\t\tconst binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remove a targeted clip from the cache\n\tuncacheAction( clip, optionalRoot ) {\n\n\t\tconst action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n}\n\nclass RenderTarget3D extends RenderTarget {\n\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isRenderTarget3D = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass RenderTargetArray extends RenderTarget {\n\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isRenderTargetArray = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass Uniform {\n\n\tconstructor( value ) {\n\n\t\tthis.value = value;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t}\n\n}\n\nlet _id = 0;\n\nclass UniformsGroup extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isUniformsGroup = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\n\n\t\tthis.name = '';\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.uniforms = [];\n\n\t}\n\n\tadd( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\tremove( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== -1 ) this.uniforms.splice( index, 1 );\n\n\t\treturn this;\n\n\t}\n\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.usage = source.usage;\n\n\t\tconst uniformsSource = source.uniforms;\n\n\t\tthis.uniforms.length = 0;\n\n\t\tfor ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {\n\n\t\t\tconst uniforms = Array.isArray( uniformsSource[ i ] ) ? uniformsSource[ i ] : [ uniformsSource[ i ] ];\n\n\t\t\tfor ( let j = 0; j < uniforms.length; j ++ ) {\n\n\t\t\t\tthis.uniforms.push( uniforms[ j ].clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, stride );\n\n\t\tthis.isInstancedInterleavedBuffer = true;\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tconst ib = super.clone( data );\n\n\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn ib;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tconst json = super.toJSON( data );\n\n\t\tjson.isInstancedInterleavedBuffer = true;\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn json;\n\n\t}\n\n}\n\nclass GLBufferAttribute {\n\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\n\n\t\tthis.isGLBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetBuffer( buffer ) {\n\n\t\tthis.buffer = buffer;\n\n\t\treturn this;\n\n\t}\n\n\tsetType( type, elementSize ) {\n\n\t\tthis.type = type;\n\t\tthis.elementSize = elementSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetItemSize( itemSize ) {\n\n\t\tthis.itemSize = itemSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _matrix = /*@__PURE__*/ new Matrix4();\n\nclass Raycaster {\n\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, -1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\tsetFromXRController( controller ) {\n\n\t\t_matrix.identity().extractRotation( controller.matrixWorld );\n\n\t\tthis.ray.origin.setFromMatrixPosition( controller.matrixWorld );\n\t\tthis.ray.direction.set( 0, 0, -1 ).applyMatrix4( _matrix );\n\n\t\treturn this;\n\n\t}\n\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersect( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersect( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersect( object, raycaster, intersects, recursive ) {\n\n\tlet propagate = true;\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tconst result = object.raycast( raycaster, intersects );\n\n\t\tif ( result === false ) propagate = false;\n\n\t}\n\n\tif ( propagate === true && recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersect( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This class can be used to represent points in 3D space as\n * [Spherical coordinates]{@link https://en.wikipedia.org/wiki/Spherical_coordinate_system}.\n */\nclass Spherical {\n\n\t/**\n\t * Constructs a new spherical.\n\t *\n\t * @param {number} [radius=1] - The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n\t * @param {number} [phi=0] - The polar angle in radians from the y (up) axis.\n\t * @param {number} [theta=0] - The equator/azimuthal angle in radians around the y (up) axis.\n\t */\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\t/**\n\t\t * The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.radius = radius;\n\n\t\t/**\n\t\t * The polar angle in radians from the y (up) axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.phi = phi;\n\n\t\t/**\n\t\t * The equator/azimuthal angle in radians around the y (up) axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.theta = theta;\n\n\t}\n\n\t/**\n\t * Sets the spherical components by copying the given values.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} phi - The polar angle.\n\t * @param {number} theta - The azimuthal angle.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given spherical to this instance.\n\t *\n\t * @param {Spherical} other - The spherical to copy.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Restricts the polar angle [page:.phi phi] to be between `0.000001` and pi -\n\t * `0.000001`.\n\t *\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = clamp( this.phi, EPS, Math.PI - EPS );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the spherical components from the given vector which is assumed to hold\n\t * Cartesian coordinates.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\t/**\n\t * Sets the spherical components from the given Cartesian coordinates.\n\t *\n\t * @param {number} x - The x value.\n\t * @param {number} y - The x value.\n\t * @param {number} z - The x value.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, -1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new spherical with copied values from this instance.\n\t *\n\t * @return {Spherical} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * This class can be used to represent points in 3D space as\n * [Cylindrical coordinates]{@link https://en.wikipedia.org/wiki/Cylindrical_coordinate_system}.\n */\nclass Cylindrical {\n\n\t/**\n\t * Constructs a new cylindrical.\n\t *\n\t * @param {number} [radius=1] - The distance from the origin to a point in the x-z plane.\n\t * @param {number} [theta=0] - A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n\t * @param {number} [y=0] - The height above the x-z plane.\n\t */\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\t/**\n\t\t * The distance from the origin to a point in the x-z plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.radius = radius;\n\n\t\t/**\n\t\t * A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.theta = theta;\n\n\t\t/**\n\t\t * The height above the x-z plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.y = y;\n\n\t}\n\n\t/**\n\t * Sets the cylindrical components by copying the given values.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} theta - The theta angle.\n\t * @param {number} y - The height value.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given cylindrical to this instance.\n\t *\n\t * @param {Cylindrical} other - The cylindrical to copy.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the cylindrical components from the given vector which is assumed to hold\n\t * Cartesian coordinates.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\t/**\n\t * Sets the cylindrical components from the given Cartesian coordinates.\n\t *\n\t * @param {number} x - The x value.\n\t * @param {number} y - The x value.\n\t * @param {number} z - The x value.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new cylindrical with copied values from this instance.\n\t *\n\t * @return {Cylindrical} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Represents a 2x2 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix2#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix2#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix2();\n * m.set( 11, 12,\n *        21, 22 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21,\n *                12, 22 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix2 {\n\n\t/**\n\t * Constructs a new 2x2 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t */\n\tconstructor( n11, n12, n21, n22 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tMatrix2.prototype.isMatrix2 = true;\n\n\t\t/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.elements = [\n\t\t\t1, 0,\n\t\t\t0, 1,\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n21, n22 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets this matrix to the 2x2 identity matrix.\n\t *\n\t * @return {Matrix2} A reference to this matrix.\n\t */\n\tidentity() {\n\n\t\tthis.set(\n\t\t\t1, 0,\n\t\t\t0, 1,\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix2} A reference to this matrix.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} n11 - 1-1 matrix element.\n\t * @param {number} n12 - 1-2 matrix element.\n\t * @param {number} n21 - 2-1 matrix element.\n\t * @param {number} n22 - 2-2 matrix element.\n\t * @return {Matrix2} A reference to this matrix.\n\t */\n\tset( n11, n12, n21, n22 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 2 ] = n12;\n\t\tte[ 1 ] = n21; te[ 3 ] = n22;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _vector$4 = /*@__PURE__*/ new Vector2();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 2D space.\n */\nclass Box2 {\n\n\t/**\n\t * Constructs a new bounding box.\n\t *\n\t * @param {Vector2} [min=(Infinity,Infinity)] - A vector representing the lower boundary of the box.\n\t * @param {Vector2} [max=(-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n\t */\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBox2 = true;\n\n\t\t/**\n\t\t * The lower boundary of the box.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.min = min;\n\n\t\t/**\n\t\t * The upper boundary of the box.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.max = max;\n\n\t}\n\n\t/**\n\t * Sets the lower and upper boundaries of this box.\n\t * Please note that this method only copies the values from the given objects.\n\t *\n\t * @param {Vector2} min - The lower boundary of the box.\n\t * @param {Vector2} max - The upper boundary of the box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<Vector2>} points - An array holding 2D position data as instances of {@link Vector2}.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Centers this box on the given center vector and sets this box's width, height and\n\t * depth to the given size values.\n\t *\n\t * @param {Vector2} center - The center of the box.\n\t * @param {Vector2} size - The x and y dimensions of the box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new box with copied values from this instance.\n\t *\n\t * @return {Box2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given box to this instance.\n\t *\n\t * @param {Box2} box - The box to copy.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Makes this box empty which means in encloses a zero space in 2D.\n\t *\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns true if this box includes zero points within its bounds.\n\t * Note that a box with equal lower and upper bounds still includes one\n\t * point, the one both bounds share.\n\t *\n\t * @return {boolean} Whether this box is empty or not.\n\t */\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\t/**\n\t * Returns the center point of this box.\n\t *\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Returns the dimensions of this box.\n\t *\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The size.\n\t */\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this box to include the given point.\n\t *\n\t * @param {Vector2} point - The point that should be included by the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands this box equilaterally by the given vector. The width of this\n\t * box will be expanded by the x component of the vector in both\n\t * directions. The height of this box will be expanded by the y component of\n\t * the vector in both directions.\n\t *\n\t * @param {Vector2} vector - The vector that should expand the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands each dimension of the box by the given scalar. If negative, the\n\t * dimensions of the box will be contracted.\n\t *\n\t * @param {number} scalar - The scalar value that should expand the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within or on the boundaries of this box.\n\t *\n\t * @param {Vector2} point - The point to test.\n\t * @return {boolean} Whether the bounding box contains the given point or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box includes the entirety of the given bounding box.\n\t * If this box and the given one are identical, this function also returns `true`.\n\t *\n\t * @param {Box2} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box contains the given bounding box or not.\n\t */\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Returns a point as a proportion of this box's width and height.\n\t *\n\t * @param {Vector2} point - A point in 2D space.\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} A point as a proportion of this box's width and height.\n\t */\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with this bounding box.\n\t *\n\t * @param {Box2} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with this bounding box.\n\t */\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Clamps the given point within the bounds of this box.\n\t *\n\t * @param {Vector2} point - The point to clamp.\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The clamped point.\n\t */\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\t/**\n\t * Returns the euclidean distance from any edge of this box to the specified point. If\n\t * the given point lies inside of this box, the distance will be `0`.\n\t *\n\t * @param {Vector2} point - The point to compute the distance to.\n\t * @return {number} The euclidean distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$4 ).distanceTo( point );\n\n\t}\n\n\t/**\n\t * Computes the intersection of this bounding box and the given one, setting the upper\n\t * bound of this box to the lesser of the two boxes' upper bounds and the\n\t * lower bound of this box to the greater of the two boxes' lower bounds. If\n\t * there's no overlap, makes this box empty.\n\t *\n\t * @param {Box2} box - The bounding box to intersect with.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the union of this box and another and the given one, setting the upper\n\t * bound of this box to the greater of the two boxes' upper bounds and the\n\t * lower bound of this box to the lesser of the two boxes' lower bounds.\n\t *\n\t * @param {Box2} box - The bounding box that will be unioned with this instance.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given offset to both the upper and lower bounds of this bounding box,\n\t * effectively moving it in 2D space.\n\t *\n\t * @param {Vector2} offset - The offset that should be used to translate the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box is equal with the given one.\n\t *\n\t * @param {Box2} box - The box to test for equality.\n\t * @return {boolean} Whether this bounding box is equal with the given one.\n\t */\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\n/**\n * An analytical line segment in 3D space represented by a start and end point.\n */\nclass Line3 {\n\n\t/**\n\t * Constructs a new line segment.\n\t *\n\t * @param {Vector3} [start=(0,0,0)] - Start of the line segment.\n\t * @param {Vector3} [end=(0,0,0)] - End of the line segment.\n\t */\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\n\n\t\t/**\n\t\t * Start of the line segment.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.start = start;\n\n\t\t/**\n\t\t * End of the line segment.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.end = end;\n\n\t}\n\n\t/**\n\t * Sets the start and end values by copying the given vectors.\n\t *\n\t * @param {Vector3} start - The start point.\n\t * @param {Vector3} end - The end point.\n\t * @return {Line3} A reference to this line segment.\n\t */\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given line segment to this instance.\n\t *\n\t * @param {Line3} line - The line segment to copy.\n\t * @return {Line3} A reference to this line segment.\n\t */\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the center of the line segment.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Returns the delta vector of the line segment's start and end point.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The delta vector.\n\t */\n\tdelta( target ) {\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\t/**\n\t * Returns the squared Euclidean distance between the line' start and end point.\n\t *\n\t * @return {number} The squared Euclidean distance.\n\t */\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\t/**\n\t * Returns the Euclidean distance between the line' start and end point.\n\t *\n\t * @return {number} The Euclidean distance.\n\t */\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\t/**\n\t * Returns a vector at a certain position along the line segment.\n\t *\n\t * @param {number} t - A value between `[0,1]` to represent a position along the line segment.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The delta vector.\n\t */\n\tat( t, target ) {\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\t/**\n\t * Returns a point parameter based on the closest point as projected on the line segment.\n\t *\n\t * @param {Vector3} point - The point for which to return a point parameter.\n\t * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n\t * @return {number} The point parameter.\n\t */\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\t/**\n\t * Returns the closets point on the line for a given point.\n\t *\n\t * @param {Vector3} point - The point to compute the closest point on the line for.\n\t * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n\t * @param {Vector3} target -  The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on the line.\n\t */\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\t/**\n\t * Applies a 4x4 transformation matrix to this line segment.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Line3} A reference to this line segment.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this line segment is equal with the given one.\n\t *\n\t * @param {Line3} line - The line segment to test for equality.\n\t * @return {boolean} Whether this line segment is equal with the given one.\n\t */\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n\t/**\n\t * Returns a new line segment with copied values from this instance.\n\t *\n\t * @return {Line3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$3 = /*@__PURE__*/ new Vector3();\n\n/**\n * This displays a cone shaped helper object for a {@link SpotLight}.\n *\n * ```js\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 10, 10, 10 );\n * scene.add( spotLight );\n *\n * const spotLightHelper = new THREE.SpotLightHelper( spotLight );\n * scene.add( spotLightHelper );\n * ```\n *\n * @augments Object3D\n */\nclass SpotLightHelper extends Object3D {\n\n\t/**\n\t * Constructs a new spot light helper.\n\t *\n\t * @param {HemisphereLight} light - The light to be visualized.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {SpotLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'SpotLightHelper';\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t-1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, -1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\t// update the local matrix based on the parent and light target transforms\n\t\tif ( this.parent ) {\n\n\t\t\tthis.parent.updateWorldMatrix( true );\n\n\t\t\tthis.matrix\n\t\t\t\t.copy( this.parent.matrixWorld )\n\t\t\t\t.invert()\n\t\t\t\t.multiply( this.light.matrixWorld );\n\n\t\t} else {\n\n\t\t\tthis.matrix.copy( this.light.matrixWorld );\n\n\t\t}\n\n\t\tthis.matrixWorld.copy( this.light.matrixWorld );\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector$2 = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n/**\n * A helper object to assist with visualizing a {@link Skeleton}.\n *\n * ```js\n * const helper = new THREE.SkeletonHelper( skinnedMesh );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass SkeletonHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new hemisphere light helper.\n\t *\n\t * @param {Object3D} object -  Usually an instance of {@link SkinnedMesh}. However, any 3D object\n\t * can be used if it represents a hierarchy of bones (see {@link Bone}).\n\t */\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = new Color( 0, 0, 1 );\n\t\tconst color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.type = 'SkeletonHelper';\n\n\t\t/**\n\t\t * The object being visualized.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.root = object;\n\n\t\t/**\n\t\t * he list of bones that the helper visualizes.\n\t\t *\n\t\t * @type {Array<Bone>}\n\t\t */\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object.isBone === true ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push( ...getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\n/**\n * This displays a helper object consisting of a spherical mesh for\n * visualizing an instance of {@link PointLight}.\n *\n * ```js\n * const pointLight = new THREE.PointLight( 0xff0000, 1, 100 );\n * pointLight.position.set( 10, 10, 10 );\n * scene.add( pointLight );\n *\n * const sphereSize = 1;\n * const pointLightHelper = new THREE.PointLightHelper( pointLight, sphereSize );\n * scene.add( pointLightHelper );\n * ```\n *\n * @augments Mesh\n */\nclass PointLightHelper extends Mesh {\n\n\t/**\n\t * Constructs a new point light helper.\n\t *\n\t * @param {PointLight} light - The light to be visualized.\n\t * @param {number} [sphereSize=1] - The size of the sphere helper.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {HemisphereLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\nconst _vector$1 = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\n/**\n * Creates a visual aid consisting of a spherical mesh for a\n * given {@link HemisphereLight}.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * const helper = new THREE.HemisphereLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass HemisphereLightHelper extends Object3D {\n\n\t/**\n\t * Constructs a new hemisphere light helper.\n\t *\n\t * @param {HemisphereLight} light - The light to be visualized.\n\t * @param {number} [size=1] - The size of the mesh used to visualize the light.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {HemisphereLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'HemisphereLightHelper';\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tmesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\n/**\n * The helper is an object to define grids. Grids are two-dimensional\n * arrays of lines.\n *\n * ```js\n * const size = 10;\n * const divisions = 10;\n *\n * const gridHelper = new THREE.GridHelper( size, divisions );\n * scene.add( gridHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass GridHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new grid helper.\n\t *\n\t * @param {number} [size=10] - The size of the grid.\n\t * @param {number} [divisions=10] - The number of divisions across the grid.\n\t * @param {number|Color|string} [color1=0x444444] - The color of the center line.\n\t * @param {number|Color|string} [color2=0x888888] - The color of the lines of the grid.\n\t */\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * This helper is an object to define polar grids. Grids are\n * two-dimensional arrays of lines.\n *\n * ```js\n * const radius = 10;\n * const sectors = 16;\n * const rings = 8;\n * const divisions = 64;\n *\n * const helper = new THREE.PolarGridHelper( radius, sectors, rings, divisions );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass PolarGridHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new polar grid helper.\n\t *\n\t * @param {number} [radius=10] - The radius of the polar grid. This can be any positive number.\n\t * @param {number} [sectors=16] - The number of sectors the grid will be divided into. This can be any positive integer.\n\t * @param {number} [rings=16] - The number of rings. This can be any positive integer.\n\t * @param {number} [divisions=64] - The number of line segments used for each circle. This can be any positive integer.\n\t * @param {number|Color|string} [color1=0x444444] - The first color used for grid elements.\n\t * @param {number|Color|string} [color2=0x888888] -  The second color used for grid elements.\n\t */\n\tconstructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the sectors\n\n\t\tif ( sectors > 1 ) {\n\n\t\t\tfor ( let i = 0; i < sectors; i ++ ) {\n\n\t\t\t\tconst v = ( i / sectors ) * ( Math.PI * 2 );\n\n\t\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( x, 0, z );\n\n\t\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create the rings\n\n\t\tfor ( let i = 0; i < rings; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / rings * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\n/**\n * Helper object to assist with visualizing a {@link DirectionalLight}'s\n * effect on the scene. This consists of plane and a line representing the\n * light's position and direction.\n *\n * ```js\n * const light = new THREE.DirectionalLight( 0xFFFFFF );\n * scene.add( light );\n *\n * const helper = new THREE.DirectionalLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass DirectionalLightHelper extends Object3D {\n\n\t/**\n\t * Constructs a new directional light helper.\n\t *\n\t * @param {DirectionalLight} light - The light to be visualized.\n\t * @param {number} [size=1] - The dimensions of the plane.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {DirectionalLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'DirectionalLightHelper';\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tlet geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\t/**\n\t\t * Contains the line showing the location of the directional light.\n\t\t *\n\t\t * @type {Line}\n\t\t */\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\t/**\n\t\t * Represents the target line of the directional light.\n\t\t *\n\t\t * @type {Line}\n\t\t */\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3.subVectors( _v2, _v1 );\n\n\t\tthis.lightPlane.lookAt( _v2 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2 );\n\t\tthis.targetLine.scale.z = _v3.length();\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _camera = /*@__PURE__*/ new Camera();\n\n/**\n * This helps with visualizing what a camera contains in its frustum. It\n * visualizes the frustum of a camera using a line segments.\n *\n * Based on frustum visualization in [lightgl.js shadowmap example]{@link https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html}.\n *\n * `CameraHelper` must be a child of the scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n * const helper = new THREE.CameraHelper( camera );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass CameraHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new arrow helper.\n\t *\n\t * @param {Camera} camera - The camera to visualize.\n\t */\n\tconstructor( camera ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst pointMap = {};\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2' );\n\t\taddLine( 'n2', 'n4' );\n\t\taddLine( 'n4', 'n3' );\n\t\taddLine( 'n3', 'n1' );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2' );\n\t\taddLine( 'f2', 'f4' );\n\t\taddLine( 'f4', 'f3' );\n\t\taddLine( 'f3', 'f1' );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1' );\n\t\taddLine( 'n2', 'f2' );\n\t\taddLine( 'n3', 'f3' );\n\t\taddLine( 'n4', 'f4' );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1' );\n\t\taddLine( 'p', 'n2' );\n\t\taddLine( 'p', 'n3' );\n\t\taddLine( 'p', 'n4' );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2' );\n\t\taddLine( 'u2', 'u3' );\n\t\taddLine( 'u3', 'u1' );\n\n\t\t// target\n\n\t\taddLine( 'c', 't' );\n\t\taddLine( 'p', 'c' );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2' );\n\t\taddLine( 'cn3', 'cn4' );\n\n\t\taddLine( 'cf1', 'cf2' );\n\t\taddLine( 'cf3', 'cf4' );\n\n\t\tfunction addLine( a, b ) {\n\n\t\t\taddPoint( a );\n\t\t\taddPoint( b );\n\n\t\t}\n\n\t\tfunction addPoint( id ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( 0, 0, 0 );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\t/**\n\t\t * The camera being visualized.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * This contains the points used to visualize the camera.\n\t\t *\n\t\t * @type {Object<string,Array<number>>}\n\t\t */\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t\t// colors\n\n\t\tconst colorFrustum = new Color( 0xffaa00 );\n\t\tconst colorCone = new Color( 0xff0000 );\n\t\tconst colorUp = new Color( 0x00aaff );\n\t\tconst colorTarget = new Color( 0xffffff );\n\t\tconst colorCross = new Color( 0x333333 );\n\n\t\tthis.setColors( colorFrustum, colorCone, colorUp, colorTarget, colorCross );\n\n\t}\n\n\t/**\n\t * Defines the colors of the helper.\n\t *\n\t * @param {Color} frustum - The frustum line color.\n\t * @param {Color} cone - The cone line color.\n\t * @param {Color} up - The up line color.\n\t * @param {Color} target - The target line color.\n\t * @param {Color} cross - The cross line color.\n\t */\n\tsetColors( frustum, cone, up, target, cross ) {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst colorAttribute = geometry.getAttribute( 'color' );\n\n\t\t// near\n\n\t\tcolorAttribute.setXYZ( 0, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 1, frustum.r, frustum.g, frustum.b ); // n1, n2\n\t\tcolorAttribute.setXYZ( 2, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 3, frustum.r, frustum.g, frustum.b ); // n2, n4\n\t\tcolorAttribute.setXYZ( 4, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 5, frustum.r, frustum.g, frustum.b ); // n4, n3\n\t\tcolorAttribute.setXYZ( 6, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 7, frustum.r, frustum.g, frustum.b ); // n3, n1\n\n\t\t// far\n\n\t\tcolorAttribute.setXYZ( 8, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 9, frustum.r, frustum.g, frustum.b ); // f1, f2\n\t\tcolorAttribute.setXYZ( 10, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 11, frustum.r, frustum.g, frustum.b ); // f2, f4\n\t\tcolorAttribute.setXYZ( 12, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 13, frustum.r, frustum.g, frustum.b ); // f4, f3\n\t\tcolorAttribute.setXYZ( 14, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 15, frustum.r, frustum.g, frustum.b ); // f3, f1\n\n\t\t// sides\n\n\t\tcolorAttribute.setXYZ( 16, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 17, frustum.r, frustum.g, frustum.b ); // n1, f1\n\t\tcolorAttribute.setXYZ( 18, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 19, frustum.r, frustum.g, frustum.b ); // n2, f2\n\t\tcolorAttribute.setXYZ( 20, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 21, frustum.r, frustum.g, frustum.b ); // n3, f3\n\t\tcolorAttribute.setXYZ( 22, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 23, frustum.r, frustum.g, frustum.b ); // n4, f4\n\n\t\t// cone\n\n\t\tcolorAttribute.setXYZ( 24, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 25, cone.r, cone.g, cone.b ); // p, n1\n\t\tcolorAttribute.setXYZ( 26, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 27, cone.r, cone.g, cone.b ); // p, n2\n\t\tcolorAttribute.setXYZ( 28, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 29, cone.r, cone.g, cone.b ); // p, n3\n\t\tcolorAttribute.setXYZ( 30, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 31, cone.r, cone.g, cone.b ); // p, n4\n\n\t\t// up\n\n\t\tcolorAttribute.setXYZ( 32, up.r, up.g, up.b ); colorAttribute.setXYZ( 33, up.r, up.g, up.b ); // u1, u2\n\t\tcolorAttribute.setXYZ( 34, up.r, up.g, up.b ); colorAttribute.setXYZ( 35, up.r, up.g, up.b ); // u2, u3\n\t\tcolorAttribute.setXYZ( 36, up.r, up.g, up.b ); colorAttribute.setXYZ( 37, up.r, up.g, up.b ); // u3, u1\n\n\t\t// target\n\n\t\tcolorAttribute.setXYZ( 38, target.r, target.g, target.b ); colorAttribute.setXYZ( 39, target.r, target.g, target.b ); // c, t\n\t\tcolorAttribute.setXYZ( 40, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 41, cross.r, cross.g, cross.b ); // p, c\n\n\t\t// cross\n\n\t\tcolorAttribute.setXYZ( 42, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 43, cross.r, cross.g, cross.b ); // cn1, cn2\n\t\tcolorAttribute.setXYZ( 44, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 45, cross.r, cross.g, cross.b ); // cn3, cn4\n\n\t\tcolorAttribute.setXYZ( 46, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 47, cross.r, cross.g, cross.b ); // cf1, cf2\n\t\tcolorAttribute.setXYZ( 48, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 49, cross.r, cross.g, cross.b ); // cf3, cf4\n\n\t\tcolorAttribute.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Updates the helper based on the projection matrix of the camera.\n\t */\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst pointMap = this.pointMap;\n\n\t\tconst w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// Adjust z values based on coordinate system\n\t\tconst nearZ = this.camera.coordinateSystem === WebGLCoordinateSystem ? -1 : 0;\n\n\t\t// center / target\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, nearZ );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, -1, -1, nearZ );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, -1, nearZ );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, -1, h, nearZ );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, nearZ );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, -1, -1, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, -1, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, -1, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, nearZ );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, -1 * 0.7, h * 1.1, nearZ );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, nearZ );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, -1, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, -1, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, -1, 0, nearZ );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, nearZ );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, -1, nearZ );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, nearZ );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector.set( x, y, z ).unproject( camera );\n\n\tconst points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n}\n\nconst _box = /*@__PURE__*/ new Box3();\n\n/**\n * Helper object to graphically show the world-axis-aligned bounding box\n * around an object. The actual bounding box is handled with {@link Box3},\n * this is just a visual helper for debugging. It can be automatically\n * resized with {@link BoxHelper#update} when the object it's created from\n * is transformed. Note that the object must have a geometry for this to work,\n * so it won't work with sprites.\n *\n * ```js\n * const sphere = new THREE.SphereGeometry();\n * const object = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( 0xff0000 ) );\n * const box = new THREE.BoxHelper( object, 0xffff00 );\n * scene.add( box );\n * ```\n *\n * @augments LineSegments\n */\nclass BoxHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new box helper.\n\t *\n\t * @param {Object3D} [object] - The 3D object to show the world-axis-aligned bounding box.\n\t * @param {number|Color|string} [color=0xffff00] - The box's color.\n\t */\n\tconstructor( object, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tconst positions = new Float32Array( 8 * 3 );\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t/**\n\t\t * The 3D object being visualized.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Updates the helper's geometry to match the dimensions of the object,\n\t * including any children.\n\t */\n\tupdate() {\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box.isEmpty() ) return;\n\n\t\tconst min = _box.min;\n\t\tconst max = _box.max;\n\n\t\t/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tconst position = this.geometry.attributes.position;\n\t\tconst array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\t/**\n\t * Updates the wireframe box for the passed object.\n\t *\n\t * @param {Object3D} object - The 3D object to create the helper for.\n\t * @return {BoxHelper} A reference to this instance.\n\t */\n\tsetFromObject( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * A helper object to visualize an instance of {@link Box3}.\n *\n * ```js\n * const box = new THREE.Box3();\n * box.setFromCenterAndSize( new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 2, 1, 3 ) );\n *\n * const helper = new THREE.Box3Helper( box, 0xffff00 );\n * scene.add( helper )\n * ```\n *\n * @augments LineSegments\n */\nclass Box3Helper extends LineSegments {\n\n\t/**\n\t * Constructs a new box3 helper.\n\t *\n\t * @param {Box3} box - The box to visualize.\n\t * @param {number|Color|string} [color=0xffff00] - The box's color.\n\t */\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t/**\n\t\t * The box being visualized.\n\t\t *\n\t\t * @type {Box3}\n\t\t */\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * A helper object to visualize an instance of {@link Plane}.\n *\n * ```js\n * const plane = new THREE.Plane( new THREE.Vector3( 1, 1, 0.2 ), 3 );\n * const helper = new THREE.PlaneHelper( plane, 1, 0xffff00 );\n * scene.add( helper );\n * ```\n *\n * @augments Line\n */\nclass PlaneHelper extends Line {\n\n\t/**\n\t * Constructs a new plane helper.\n\t *\n\t * @param {Plane} plane - The plane to be visualized.\n\t * @param {number} [size=1] - The side length of plane helper.\n\t * @param {number|Color|string} [hex=0xffff00] - The helper's color.\n\t */\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\n\n\t\tconst color = hex;\n\n\t\tconst positions = [ 1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0 ];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\t/**\n\t\t * The plane being visualized.\n\t\t *\n\t\t * @type {Plane}\n\t\t */\n\t\tthis.plane = plane;\n\n\t\t/**\n\t\t * The side length of plane helper.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.size = size;\n\n\t\tconst positions2 = [ 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0 ];\n\n\t\tconst geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tthis.position.set( 0, 0, 0 );\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, 1 );\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tthis.translateZ( - this.plane.constant );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n}\n\nconst _axis = /*@__PURE__*/ new Vector3();\nlet _lineGeometry, _coneGeometry;\n\n/**\n * An 3D arrow object for visualizing directions.\n *\n * ```js\n * const dir = new THREE.Vector3( 1, 2, 0 );\n *\n * //normalize the direction vector (convert to vector of length 1)\n * dir.normalize();\n *\n * const origin = new THREE.Vector3( 0, 0, 0 );\n * const length = 1;\n * const hex = 0xffff00;\n *\n * const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );\n * scene.add( arrowHelper );\n * ```\n *\n * @augments Object3D\n */\nclass ArrowHelper extends Object3D {\n\n\t/**\n\t * Constructs a new arrow helper.\n\t *\n\t * @param {Vector3} [dir=(0, 0, 1)] - The (normalized) direction vector.\n\t * @param {Vector3} [origin=(0, 0, 0)] - Point at which the arrow starts.\n\t * @param {number} [length=1] - Length of the arrow in world units.\n\t * @param {(number|Color|string)} [color=0xffff00] - Color of the arrow.\n\t * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n\t * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n\t */\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, -0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\t/**\n\t\t * The line part of the arrow helper.\n\t\t *\n\t\t * @type {Line}\n\t\t */\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\t/**\n\t\t * The cone part of the arrow helper.\n\t\t *\n\t\t * @type {Mesh}\n\t\t */\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\t/**\n\t * Sets the direction of the helper.\n\t *\n\t * @param {Vector3} dir - The normalized direction vector.\n\t */\n\tsetDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < -0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tconst radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the length of the helper.\n\t *\n\t * @param {number} length - Length of the arrow in world units.\n\t * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n\t * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n\t */\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t}\n\n\t/**\n\t * Sets the color of the helper.\n\t *\n\t * @param {number|Color|string} color - The color to set.\n\t */\n\tsetColor( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.line.geometry.dispose();\n\t\tthis.line.material.dispose();\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n}\n\n/**\n * An axis object to visualize the 3 axes in a simple way.\n * The X axis is red. The Y axis is green. The Z axis is blue.\n *\n * ```js\n * const axesHelper = new THREE.AxesHelper( 5 );\n * scene.add( axesHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass AxesHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new axes helper.\n\t *\n\t * @param {number} [size=1] - Size of the lines representing the axes.\n\t */\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\t/**\n\t * Defines the colors of the axes helper.\n\t *\n\t * @param {number|Color|string} xAxisColor - The color for the x axis.\n\t * @param {number|Color|string} yAxisColor - The color for the y axis.\n\t * @param {number|Color|string} zAxisColor - The color for the z axis.\n\t * @return {AxesHelper} A reference to this axes helper.\n\t */\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * This class is used to convert a series of paths to an array of\n * shapes. It is specifically used in context of fonts and SVG.\n */\nclass ShapePath {\n\n\t/**\n\t * Constructs a new shape path.\n\t */\n\tconstructor() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\t/**\n\t\t * The color of the shape.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color();\n\n\t\t/**\n\t\t * The paths that have been generated for this shape.\n\t\t *\n\t\t * @type {Array<Path>}\n\t\t * @default null\n\t\t */\n\t\tthis.subPaths = [];\n\n\t\t/**\n\t\t * The current path that is being generated.\n\t\t *\n\t\t * @type {?Path}\n\t\t * @default null\n\t\t */\n\t\tthis.currentPath = null;\n\n\t}\n\n\t/**\n\t * Creates a new path and moves it current point to the given one.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link LineCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} x - The x coordinate of the end point.\n\t * @param {number} y - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tlineTo( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCPx - The x coordinate of the control point.\n\t * @param {number} aCPy - The y coordinate of the control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCP1x - The x coordinate of the first control point.\n\t * @param {number} aCP1y - The y coordinate of the first control point.\n\t * @param {number} aCP2x - The x coordinate of the second control point.\n\t * @param {number} aCP2y - The y coordinate of the second control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link SplineCurve} to the path by connecting\n\t * the current point with the given list of points.\n\t *\n\t * @param {Array<Vector2>} pts - An array of points in 2D space.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tsplineThru( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts the paths into an array of shapes.\n\t *\n\t * @param {boolean} isCCW - By default solid shapes are  defined clockwise (CW) and holes are defined counterclockwise (CCW).\n\t * If this flag is set to `true`, then those are flipped.\n\t * @return {Array<Shape>} An array of shapes.\n\t */\n\ttoShapes( isCCW ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tconst shapes = [];\n\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\n\n\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tconst polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tlet inside = false;\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tconst isClockWise = ShapeUtils.isClockWise;\n\n\t\tconst subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tlet solid, tmpPath, tmpShape;\n\t\tconst shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tconst betterShapeHoles = [];\n\t\tconst newShapes = [];\n\t\tlet newShapeHoles = [];\n\t\tlet mainIdx = 0;\n\t\tlet tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tlet ambiguous = false;\n\t\t\tlet toChange = 0;\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tconst ho = sho[ hIdx ];\n\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange ++;\n\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( toChange > 0 && ambiguous === false ) {\n\n\t\t\t\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet tmpHoles;\n\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n}\n\n/**\n * Abstract base class for controls.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Controls extends EventDispatcher {\n\n\t/**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Object3D} object - The object that is managed by the controls.\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n\t */\n\tconstructor( object, domElement = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The object that is managed by the controls.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * The HTML element used for event listeners.\n\t\t *\n\t\t * @type {?HTMLDOMElement}\n\t\t * @default null\n\t\t */\n\t\tthis.domElement = domElement;\n\n\t\t/**\n\t\t * Whether the controls responds to user input or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * The internal state of the controls.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.state = -1;\n\n\t\t/**\n\t\t * This object defines the keyboard input of the controls.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.keys = {};\n\n\t\t/**\n\t\t * This object defines what type of actions are assigned to the available mouse buttons.\n\t\t * It depends on the control implementation what kind of mouse buttons and actions are supported.\n\t\t *\n\t\t * @type {{LEFT: ?number, MIDDLE: ?number, RIGHT: ?number}}\n\t\t */\n\t\tthis.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null };\n\n\t\t/**\n\t\t * This object defines what type of actions are assigned to what kind of touch interaction.\n\t\t * It depends on the control implementation what kind of touch interaction and actions are supported.\n\t\t *\n\t\t * @type {{ONE: ?number, TWO: ?number}}\n\t\t */\n\t\tthis.touches = { ONE: null, TWO: null };\n\n\t}\n\n\t/**\n\t * Connects the controls to the DOM. This method has so called \"side effects\" since\n\t * it adds the module's event listeners to the DOM.\n\t */\n\tconnect() {}\n\n\t/**\n\t * Disconnects the controls from the DOM.\n\t */\n\tdisconnect() {}\n\n\t/**\n\t * Call this method if you no longer want use to the controls. It frees all internal\n\t * resources and removes all event listeners.\n\t */\n\tdispose() {}\n\n\t/**\n\t * Controls should implement this method if they have to update their internal state\n\t * per simulation step.\n\t *\n\t * @param {number} [delta] - The time delta in seconds.\n\t */\n\tupdate( /* delta */ ) {}\n\n}\n\n/**\n * Scales the texture as large as possible within its surface without cropping\n * or stretching the texture. The method preserves the original aspect ratio of\n * the texture. Akin to CSS `object-fit: contain`\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction contain( texture, aspect ) {\n\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\n\n\tif ( imageAspect > aspect ) {\n\n\t\ttexture.repeat.x = 1;\n\t\ttexture.repeat.y = imageAspect / aspect;\n\n\t\ttexture.offset.x = 0;\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\n\n\t} else {\n\n\t\ttexture.repeat.x = aspect / imageAspect;\n\t\ttexture.repeat.y = 1;\n\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\n\t\ttexture.offset.y = 0;\n\n\t}\n\n\treturn texture;\n\n}\n\n/**\n * Scales the texture to the smallest possible size to fill the surface, leaving\n * no empty space. The method preserves the original aspect ratio of the texture.\n * Akin to CSS `object-fit: cover`.\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction cover( texture, aspect ) {\n\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\n\n\tif ( imageAspect > aspect ) {\n\n\t\ttexture.repeat.x = aspect / imageAspect;\n\t\ttexture.repeat.y = 1;\n\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\n\t\ttexture.offset.y = 0;\n\n\t} else {\n\n\t\ttexture.repeat.x = 1;\n\t\ttexture.repeat.y = imageAspect / aspect;\n\n\t\ttexture.offset.x = 0;\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\n\n\t}\n\n\treturn texture;\n\n}\n\n/**\n * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n *\n * @param {Texture} texture - The texture.\n * @return {Texture} The updated texture.\n */\nfunction fill( texture ) {\n\n\ttexture.repeat.x = 1;\n\ttexture.repeat.y = 1;\n\n\ttexture.offset.x = 0;\n\ttexture.offset.y = 0;\n\n\treturn texture;\n\n}\n\n/**\n * Determines how many bytes must be used to represent the texture.\n *\n * @param {number} width - The width of the texture.\n * @param {number} height - The height of the texture.\n * @param {number} format - The texture's format.\n * @param {number} type - The texture's type.\n * @return {number} The byte length.\n */\nfunction getByteLength( width, height, format, type ) {\n\n\tconst typeByteLength = getTextureTypeByteLength( type );\n\n\tswitch ( format ) {\n\n\t\t// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\n\t\tcase AlphaFormat:\n\t\t\treturn width * height;\n\t\tcase LuminanceFormat:\n\t\t\treturn width * height;\n\t\tcase LuminanceAlphaFormat:\n\t\t\treturn width * height * 2;\n\t\tcase RedFormat:\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RedIntegerFormat:\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGFormat:\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGIntegerFormat:\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBFormat:\n\t\t\treturn ( ( width * height * 3 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBAFormat:\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBAIntegerFormat:\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/\n\t\tcase RGB_S3TC_DXT1_Format:\n\t\tcase RGBA_S3TC_DXT1_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\n\t\tcase RGBA_S3TC_DXT3_Format:\n\t\tcase RGBA_S3TC_DXT5_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/\n\t\tcase RGB_PVRTC_2BPPV1_Format:\n\t\tcase RGBA_PVRTC_2BPPV1_Format:\n\t\t\treturn ( Math.max( width, 16 ) * Math.max( height, 8 ) ) / 4;\n\t\tcase RGB_PVRTC_4BPPV1_Format:\n\t\tcase RGBA_PVRTC_4BPPV1_Format:\n\t\t\treturn ( Math.max( width, 8 ) * Math.max( height, 8 ) ) / 2;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/\n\t\tcase RGB_ETC1_Format:\n\t\tcase RGB_ETC2_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\n\t\tcase RGBA_ETC2_EAC_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/\n\t\tcase RGBA_ASTC_4x4_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\t\tcase RGBA_ASTC_5x4_Format:\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\t\tcase RGBA_ASTC_5x5_Format:\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_6x5_Format:\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_6x6_Format:\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_8x5_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_8x6_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_8x8_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\n\t\tcase RGBA_ASTC_10x5_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_10x6_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_10x8_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\n\t\tcase RGBA_ASTC_10x10_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\n\t\tcase RGBA_ASTC_12x10_Format:\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\n\t\tcase RGBA_ASTC_12x12_Format:\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 11 ) / 12 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/\n\t\tcase RGBA_BPTC_Format:\n\t\tcase RGB_BPTC_SIGNED_Format:\n\t\tcase RGB_BPTC_UNSIGNED_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/\n\t\tcase RED_RGTC1_Format:\n\t\tcase SIGNED_RED_RGTC1_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 8;\n\t\tcase RED_GREEN_RGTC2_Format:\n\t\tcase SIGNED_RED_GREEN_RGTC2_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\n\n\t}\n\n\tthrow new Error(\n\t\t`Unable to determine texture byte length for ${format} format.`,\n\t);\n\n}\n\nfunction getTextureTypeByteLength( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase UnsignedByteType:\n\t\tcase ByteType:\n\t\t\treturn { byteLength: 1, components: 1 };\n\t\tcase UnsignedShortType:\n\t\tcase ShortType:\n\t\tcase HalfFloatType:\n\t\t\treturn { byteLength: 2, components: 1 };\n\t\tcase UnsignedShort4444Type:\n\t\tcase UnsignedShort5551Type:\n\t\t\treturn { byteLength: 2, components: 4 };\n\t\tcase UnsignedIntType:\n\t\tcase IntType:\n\t\tcase FloatType:\n\t\t\treturn { byteLength: 4, components: 1 };\n\t\tcase UnsignedInt5999Type:\n\t\t\treturn { byteLength: 4, components: 3 };\n\n\t}\n\n\tthrow new Error( `Unknown texture type ${type}.` );\n\n}\n\n/**\n * A class containing utility functions for textures.\n *\n * @hideconstructor\n */\nclass TextureUtils {\n\n\t/**\n\t * Scales the texture as large as possible within its surface without cropping\n\t * or stretching the texture. The method preserves the original aspect ratio of\n\t * the texture. Akin to CSS `object-fit: contain`\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} aspect - The texture's aspect ratio.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic contain( texture, aspect ) {\n\n\t\treturn contain( texture, aspect );\n\n\t}\n\n\t/**\n\t * Scales the texture to the smallest possible size to fill the surface, leaving\n\t * no empty space. The method preserves the original aspect ratio of the texture.\n\t * Akin to CSS `object-fit: cover`.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} aspect - The texture's aspect ratio.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic cover( texture, aspect ) {\n\n\t\treturn cover( texture, aspect );\n\n\t}\n\n\t/**\n\t * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic fill( texture ) {\n\n\t\treturn fill( texture );\n\n\t}\n\n\t/**\n\t * Determines how many bytes must be used to represent the texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} format - The texture's format.\n\t * @param {number} type - The texture's type.\n\t * @return {number} The byte length.\n\t */\n\tstatic getByteLength( width, height, format, type ) {\n\n\t\treturn getByteLength( width, height, format, type );\n\n\t}\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AgXToneMapping, AlphaFormat, AlwaysCompare, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AnimationAction, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, AttachedBindMode, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BackSide, BasicDepthPacking, BasicShadowMap, BatchedMesh, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasTexture, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedArrayTexture, CompressedCubeTexture, CompressedTexture, CompressedTextureLoader, ConeGeometry, ConstantAlphaFactor, ConstantColorFactor, Controls, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthFormat, DepthStencilFormat, DepthTexture, DetachedBindMode, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualCompare, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, FloatType, Fog, FogExp2, FramebufferTexture, FrontSide, Frustum, GLBufferAttribute, GLSL1, GLSL3, GreaterCompare, GreaterDepth, GreaterEqualCompare, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry, Layers, LessCompare, LessDepth, LessEqualCompare, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, LinearTransfer, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, Material, MaterialLoader, MathUtils, Matrix2, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeutralToneMapping, NeverCompare, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualCompare, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronGeometry, OneFactor, OneMinusConstantAlphaFactor, OneMinusConstantColorFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, Path, PerspectiveCamera, Plane, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RAD2DEG, RED_GREEN_RGTC2_Format, RED_RGTC1_Format, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBDepthPacking, RGBFormat, RGBIntegerFormat, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGDepthPacking, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RenderTarget, RenderTarget3D, RenderTargetArray, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingGeometry, SIGNED_RED_GREEN_RGTC2_Format, SIGNED_RED_RGTC1_Format, SRGBColorSpace, SRGBTransfer, Scene, ShaderMaterial, ShadowMaterial, Shape, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronGeometry, Texture, TextureLoader, TextureUtils, TimestampQuery, TorusGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedInt5999Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, VideoFrameTexture, VideoTexture, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCoordinateSystem, WebGLCubeRenderTarget, WebGLRenderTarget, WebGPUCoordinateSystem, WebXRController, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, arrayNeedsUint32, cloneUniforms, createCanvasElement, createElementNS, getByteLength, getUnlitUniformColorSpace, mergeUniforms, probeAsync, toNormalizedProjectionMatrix, toReversedProjectionMatrix, warnOnce };\n","/**\n * @license\n * Copyright 2010-2025 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nimport { Color, Matrix3, Vector2, mergeUniforms, Vector3, CubeUVReflectionMapping, Mesh, BoxGeometry, ShaderMaterial, cloneUniforms, BackSide, ColorManagement, SRGBTransfer, PlaneGeometry, FrontSide, getUnlitUniformColorSpace, Euler, Matrix4, IntType, RGBAFormat, HalfFloatType, UnsignedByteType, FloatType, Plane, EquirectangularReflectionMapping, EquirectangularRefractionMapping, WebGLCubeRenderTarget, CubeReflectionMapping, CubeRefractionMapping, PerspectiveCamera, NoToneMapping, MeshBasicMaterial, BufferGeometry, BufferAttribute, WebGLRenderTarget, NoBlending, OrthographicCamera, LinearFilter, LinearSRGBColorSpace, warnOnce, arrayNeedsUint32, Uint32BufferAttribute, Uint16BufferAttribute, Vector4, DataArrayTexture, LessEqualCompare, Texture, DepthTexture, Data3DTexture, CubeTexture, GLSL3, CustomToneMapping, NeutralToneMapping, AgXToneMapping, ACESFilmicToneMapping, CineonToneMapping, ReinhardToneMapping, LinearToneMapping, PCFShadowMap, PCFSoftShadowMap, VSMShadowMap, LinearTransfer, AddOperation, MixOperation, MultiplyOperation, ObjectSpaceNormalMap, TangentSpaceNormalMap, NormalBlending, DoubleSide, UniformsUtils, Layers, Frustum, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, NearestFilter, LessEqualDepth, AddEquation, SubtractEquation, ReverseSubtractEquation, ZeroFactor, OneFactor, SrcColorFactor, SrcAlphaFactor, SrcAlphaSaturateFactor, DstColorFactor, DstAlphaFactor, OneMinusSrcColorFactor, OneMinusSrcAlphaFactor, OneMinusDstColorFactor, OneMinusDstAlphaFactor, ConstantColorFactor, OneMinusConstantColorFactor, ConstantAlphaFactor, OneMinusConstantAlphaFactor, CustomBlending, MultiplyBlending, SubtractiveBlending, AdditiveBlending, CullFaceNone, CullFaceBack, CullFaceFront, NotEqualDepth, GreaterDepth, GreaterEqualDepth, EqualDepth, LessDepth, AlwaysDepth, NeverDepth, MinEquation, MaxEquation, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, NeverCompare, AlwaysCompare, LessCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare, NoColorSpace, DepthStencilFormat, getByteLength, UnsignedIntType, UnsignedInt248Type, UnsignedShortType, DepthFormat, createElementNS, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedInt5999Type, ByteType, ShortType, AlphaFormat, RGBFormat, LuminanceFormat, LuminanceAlphaFormat, RedFormat, RedIntegerFormat, RGFormat, RGIntegerFormat, RGBAIntegerFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_BPTC_Format, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RED_RGTC1_Format, SIGNED_RED_RGTC1_Format, RED_GREEN_RGTC2_Format, SIGNED_RED_GREEN_RGTC2_Format, EventDispatcher, ArrayCamera, WebXRController, RAD2DEG, createCanvasElement, SRGBColorSpace, REVISION, toNormalizedProjectionMatrix, toReversedProjectionMatrix, probeAsync, WebGLCoordinateSystem } from './three.core.js';\nexport { AdditiveAnimationBlendMode, AlwaysStencilFunc, AmbientLight, AnimationAction, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrowHelper, AttachedBindMode, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BasicDepthPacking, BasicShadowMap, BatchedMesh, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxHelper, BufferGeometryLoader, Cache, Camera, CameraHelper, CanvasTexture, CapsuleGeometry, CatmullRomCurve3, CircleGeometry, Clock, ColorKeyframeTrack, CompressedArrayTexture, CompressedCubeTexture, CompressedTexture, CompressedTextureLoader, ConeGeometry, Controls, CubeCamera, CubeTextureLoader, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceFrontBack, Curve, CurvePath, CylinderGeometry, Cylindrical, DataTexture, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DetachedBindMode, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualStencilFunc, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, Fog, FogExp2, FramebufferTexture, GLBufferAttribute, GLSL1, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HemisphereLight, HemisphereLightHelper, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, MOUSE, Material, MaterialLoader, MathUtils, Matrix2, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NeverStencilFunc, NormalAnimationBlendMode, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, OctahedronGeometry, Path, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RGBDepthPacking, RGBIntegerFormat, RGDepthPacking, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RenderTarget, RenderTarget3D, RenderTargetArray, ReplaceStencilOp, RingGeometry, Scene, ShadowMaterial, Shape, ShapeGeometry, ShapePath, ShapeUtils, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, TOUCH, TetrahedronGeometry, TextureLoader, TextureUtils, TimestampQuery, TorusGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry, UVMapping, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, VectorKeyframeTrack, VideoFrameTexture, VideoTexture, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGPUCoordinateSystem, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroSlopeEnding, ZeroStencilOp } from './three.core.js';\n\nfunction WebGLAnimation() {\n\n\tlet context = null;\n\tlet isAnimating = false;\n\tlet animationLoop = null;\n\tlet requestId = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tanimationLoop( time, frame );\n\n\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t}\n\n\treturn {\n\n\t\tstart: function () {\n\n\t\t\tif ( isAnimating === true ) return;\n\t\t\tif ( animationLoop === null ) return;\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\tisAnimating = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\tisAnimating = false;\n\n\t\t},\n\n\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\tanimationLoop = callback;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLAttributes( gl ) {\n\n\tconst buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage;\n\t\tconst size = array.byteLength;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tlet type;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = gl.FLOAT;\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\ttype = gl.HALF_FLOAT;\n\n\t\t\t} else {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = gl.SHORT;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = gl.INT;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = gl.BYTE;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version,\n\t\t\tsize: size\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst updateRanges = attribute.updateRanges;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( updateRanges.length === 0 ) {\n\n\t\t\t// Not using update ranges\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\t// Before applying update ranges, we merge any adjacent / overlapping\n\t\t\t// ranges to reduce load on `gl.bufferSubData`. Empirically, this has led\n\t\t\t// to performance improvements for applications which make heavy use of\n\t\t\t// update ranges. Likely due to GPU command overhead.\n\t\t\t//\n\t\t\t// Note that to reduce garbage collection between frames, we merge the\n\t\t\t// update ranges in-place. This is safe because this method will clear the\n\t\t\t// update ranges once updated.\n\n\t\t\tupdateRanges.sort( ( a, b ) => a.start - b.start );\n\n\t\t\t// To merge the update ranges in-place, we work from left to right in the\n\t\t\t// existing updateRanges array, merging ranges. This may result in a final\n\t\t\t// array which is smaller than the original. This index tracks the last\n\t\t\t// index representing a merged range, any data after this index can be\n\t\t\t// trimmed once the merge algorithm is completed.\n\t\t\tlet mergeIndex = 0;\n\n\t\t\tfor ( let i = 1; i < updateRanges.length; i ++ ) {\n\n\t\t\t\tconst previousRange = updateRanges[ mergeIndex ];\n\t\t\t\tconst range = updateRanges[ i ];\n\n\t\t\t\t// We add one here to merge adjacent ranges. This is safe because ranges\n\t\t\t\t// operate over positive integers.\n\t\t\t\tif ( range.start <= previousRange.start + previousRange.count + 1 ) {\n\n\t\t\t\t\tpreviousRange.count = Math.max(\n\t\t\t\t\t\tpreviousRange.count,\n\t\t\t\t\t\trange.start + range.count - previousRange.start\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\t++ mergeIndex;\n\t\t\t\t\tupdateRanges[ mergeIndex ] = range;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Trim the array to only contain the merged ranges.\n\t\t\tupdateRanges.length = mergeIndex + 1;\n\n\t\t\tfor ( let i = 0, l = updateRanges.length; i < l; i ++ ) {\n\n\t\t\t\tconst range = updateRanges[ i ];\n\n\t\t\t\tgl.bufferSubData( bufferType, range.start * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, range.start, range.count );\n\n\t\t\t}\n\n\t\t\tattribute.clearUpdateRanges();\n\n\t\t}\n\n\t\tattribute.onUploadCallback();\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tif ( attribute.isGLBufferAttribute ) {\n\n\t\t\tconst cached = buffers.get( attribute );\n\n\t\t\tif ( ! cached || cached.version < attribute.version ) {\n\n\t\t\t\tbuffers.set( attribute, {\n\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\tversion: attribute.version\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tif ( data.size !== attribute.array.byteLength ) {\n\n\t\t\t\tthrow new Error( 'THREE.WebGLAttributes: The size of the buffer attribute\\'s array buffer does not match the original size. Resizing buffer attributes is not supported.' );\n\n\t\t\t}\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\nvar alphahash_fragment = \"#ifdef USE_ALPHAHASH\\n\\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\\n#endif\";\n\nvar alphahash_pars_fragment = \"#ifdef USE_ALPHAHASH\\n\\tconst float ALPHA_HASH_SCALE = 0.05;\\n\\tfloat hash2D( vec2 value ) {\\n\\t\\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\\n\\t}\\n\\tfloat hash3D( vec3 value ) {\\n\\t\\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\\n\\t}\\n\\tfloat getAlphaHashThreshold( vec3 position ) {\\n\\t\\tfloat maxDeriv = max(\\n\\t\\t\\tlength( dFdx( position.xyz ) ),\\n\\t\\t\\tlength( dFdy( position.xyz ) )\\n\\t\\t);\\n\\t\\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\\n\\t\\tvec2 pixScales = vec2(\\n\\t\\t\\texp2( floor( log2( pixScale ) ) ),\\n\\t\\t\\texp2( ceil( log2( pixScale ) ) )\\n\\t\\t);\\n\\t\\tvec2 alpha = vec2(\\n\\t\\t\\thash3D( floor( pixScales.x * position.xyz ) ),\\n\\t\\t\\thash3D( floor( pixScales.y * position.xyz ) )\\n\\t\\t);\\n\\t\\tfloat lerpFactor = fract( log2( pixScale ) );\\n\\t\\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\\n\\t\\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\\n\\t\\tvec3 cases = vec3(\\n\\t\\t\\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\\n\\t\\t\\t( x - 0.5 * a ) / ( 1.0 - a ),\\n\\t\\t\\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\\n\\t\\t);\\n\\t\\tfloat threshold = ( x < ( 1.0 - a ) )\\n\\t\\t\\t? ( ( x < a ) ? cases.x : cases.y )\\n\\t\\t\\t: cases.z;\\n\\t\\treturn clamp( threshold , 1.0e-6, 1.0 );\\n\\t}\\n#endif\";\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\\n#endif\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\t#ifdef ALPHA_TO_COVERAGE\\n\\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\\n\\tif ( diffuseColor.a == 0.0 ) discard;\\n\\t#else\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n\\t#endif\\n#endif\";\n\nvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_CLEARCOAT ) \\n\\t\\tclearcoatSpecularIndirect *= ambientOcclusion;\\n\\t#endif\\n\\t#if defined( USE_SHEEN ) \\n\\t\\tsheenSpecularIndirect *= ambientOcclusion;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar batching_pars_vertex = \"#ifdef USE_BATCHING\\n\\t#if ! defined( GL_ANGLE_multi_draw )\\n\\t#define gl_DrawID _gl_DrawID\\n\\tuniform int _gl_DrawID;\\n\\t#endif\\n\\tuniform highp sampler2D batchingTexture;\\n\\tuniform highp usampler2D batchingIdTexture;\\n\\tmat4 getBatchingMatrix( const in float i ) {\\n\\t\\tint size = textureSize( batchingTexture, 0 ).x;\\n\\t\\tint j = int( i ) * 4;\\n\\t\\tint x = j % size;\\n\\t\\tint y = j / size;\\n\\t\\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\\n\\t\\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\\n\\t\\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\\n\\t\\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\\n\\t\\treturn mat4( v1, v2, v3, v4 );\\n\\t}\\n\\tfloat getIndirectIndex( const in int i ) {\\n\\t\\tint size = textureSize( batchingIdTexture, 0 ).x;\\n\\t\\tint x = i % size;\\n\\t\\tint y = i / size;\\n\\t\\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\\n\\t}\\n#endif\\n#ifdef USE_BATCHING_COLOR\\n\\tuniform sampler2D batchingColorTexture;\\n\\tvec3 getBatchingColor( const in float i ) {\\n\\t\\tint size = textureSize( batchingColorTexture, 0 ).x;\\n\\t\\tint j = int( i );\\n\\t\\tint x = j % size;\\n\\t\\tint y = j / size;\\n\\t\\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\\n\\t}\\n#endif\";\n\nvar batching_vertex = \"#ifdef USE_BATCHING\\n\\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\\n#endif\";\n\nvar begin_vertex = \"vec3 transformed = vec3( position );\\n#ifdef USE_ALPHAHASH\\n\\tvPosition = vec3( position );\\n#endif\";\n\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\nvar bsdfs = \"float G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n} // validated\";\n\nvar iridescence_fragment = \"#ifdef USE_IRIDESCENCE\\n\\tconst mat3 XYZ_TO_REC709 = mat3(\\n\\t\\t 3.2404542, -0.9692660,  0.0556434,\\n\\t\\t-1.5371385,  1.8760108, -0.2040259,\\n\\t\\t-0.4985314,  0.0415560,  1.0572252\\n\\t);\\n\\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\\n\\t\\tvec3 sqrtF0 = sqrt( fresnel0 );\\n\\t\\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\\n\\t}\\n\\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\\n\\t}\\n\\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\\n\\t}\\n\\tvec3 evalSensitivity( float OPD, vec3 shift ) {\\n\\t\\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\\n\\t\\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\\n\\t\\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\\n\\t\\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\\n\\t\\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\\n\\t\\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\\n\\t\\txyz /= 1.0685e-7;\\n\\t\\tvec3 rgb = XYZ_TO_REC709 * xyz;\\n\\t\\treturn rgb;\\n\\t}\\n\\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\\n\\t\\tvec3 I;\\n\\t\\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\\n\\t\\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\\n\\t\\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\\n\\t\\tif ( cosTheta2Sq < 0.0 ) {\\n\\t\\t\\treturn vec3( 1.0 );\\n\\t\\t}\\n\\t\\tfloat cosTheta2 = sqrt( cosTheta2Sq );\\n\\t\\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\\n\\t\\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\\n\\t\\tfloat T121 = 1.0 - R12;\\n\\t\\tfloat phi12 = 0.0;\\n\\t\\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\\n\\t\\tfloat phi21 = PI - phi12;\\n\\t\\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\\t\\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\\n\\t\\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\\n\\t\\tvec3 phi23 = vec3( 0.0 );\\n\\t\\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\\n\\t\\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\\n\\t\\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\\n\\t\\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\\n\\t\\tvec3 phi = vec3( phi21 ) + phi23;\\n\\t\\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\\n\\t\\tvec3 r123 = sqrt( R123 );\\n\\t\\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\\n\\t\\tvec3 C0 = R12 + Rs;\\n\\t\\tI = C0;\\n\\t\\tvec3 Cm = Rs - T121;\\n\\t\\tfor ( int m = 1; m <= 2; ++ m ) {\\n\\t\\t\\tCm *= r123;\\n\\t\\t\\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\\n\\t\\t\\tI += Cm * Sm;\\n\\t\\t}\\n\\t\\treturn max( I, vec3( 0.0 ) );\\n\\t}\\n#endif\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vBumpMapUv );\\n\\t\\tvec2 dSTdy = dFdy( vBumpMapUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\\n\\t\\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#ifdef ALPHA_TO_COVERAGE\\n\\t\\tfloat distanceToPlane, distanceGradient;\\n\\t\\tfloat clipOpacity = 1.0;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\\n\\t\\t\\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\\n\\t\\t\\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\\n\\t\\t\\tif ( clipOpacity == 0.0 ) discard;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\t\\tfloat unionClipOpacity = 1.0;\\n\\t\\t\\t#pragma unroll_loop_start\\n\\t\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\t\\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\\n\\t\\t\\t\\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\\n\\t\\t\\t\\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\\n\\t\\t\\t}\\n\\t\\t\\t#pragma unroll_loop_end\\n\\t\\t\\tclipOpacity *= 1.0 - unionClipOpacity;\\n\\t\\t#endif\\n\\t\\tdiffuseColor.a *= clipOpacity;\\n\\t\\tif ( diffuseColor.a == 0.0 ) discard;\\n\\t#else\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\t\\tbool clipped = true;\\n\\t\\t\\t#pragma unroll_loop_start\\n\\t\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t\\t}\\n\\t\\t\\t#pragma unroll_loop_end\\n\\t\\t\\tif ( clipped ) discard;\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\nvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\\n#ifdef USE_BATCHING_COLOR\\n\\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\\n\\tvColor.xyz *= batchingColor.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nvec3 pow2( const in vec3 x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\n#ifdef USE_ALPHAHASH\\n\\tvarying vec3 vPosition;\\n#endif\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n} // validated\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\\n\\t\\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\\n\\t\\tuv.x *= CUBEUV_TEXEL_WIDTH;\\n\\t\\tuv.y *= CUBEUV_TEXEL_HEIGHT;\\n\\t\\t#ifdef texture2DGradEXT\\n\\t\\t\\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( envMap, uv ).rgb;\\n\\t\\t#endif\\n\\t}\\n\\t#define cubeUV_r0 1.0\\n\\t#define cubeUV_m0 - 2.0\\n\\t#define cubeUV_r1 0.8\\n\\t#define cubeUV_m1 - 1.0\\n\\t#define cubeUV_r4 0.4\\n\\t#define cubeUV_m4 2.0\\n\\t#define cubeUV_r5 0.305\\n\\t#define cubeUV_m5 3.0\\n\\t#define cubeUV_r6 0.21\\n\\t#define cubeUV_m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= cubeUV_r1 ) {\\n\\t\\t\\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\\n\\t\\t} else if ( roughness >= cubeUV_r4 ) {\\n\\t\\t\\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\\n\\t\\t} else if ( roughness >= cubeUV_r5 ) {\\n\\t\\t\\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\\n\\t\\t} else if ( roughness >= cubeUV_r6 ) {\\n\\t\\t\\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = objectTangent;\\n#endif\\n#ifdef USE_BATCHING\\n\\tmat3 bm = mat3( batchingMatrix );\\n\\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\\n\\ttransformedNormal = bm * transformedNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\ttransformedTangent = bm * transformedTangent;\\n\\t#endif\\n#endif\\n#ifdef USE_INSTANCING\\n\\tmat3 im = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\\n\\ttransformedNormal = im * transformedNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\ttransformedTangent = im * transformedTangent;\\n\\t#endif\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\\n#endif\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\\n\\t\\temissiveColor = sRGBTransferEOTF( emissiveColor );\\n\\t#endif\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\nvar colorspace_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\nvar colorspace_pars_fragment = \"vec4 LinearTransferOETF( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 sRGBTransferEOTF( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 sRGBTransferOETF( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform mat3 envMapRotation;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\nvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn vec3( texture2D( gradientMap, coord ).r );\\n\\t#else\\n\\t\\tvec2 fw = fwidth( coord ) * 0.5;\\n\\t\\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\\n\\t#endif\\n}\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_fragment = \"LambertMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_lambert_pars_fragment = \"varying vec3 vViewPosition;\\nstruct LambertMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Lambert\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Lambert\";\n\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\n#if defined( USE_LIGHT_PROBES )\\n\\tuniform vec3 lightProbe[ 9 ];\\n#endif\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometryPosition;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometryPosition;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\nvar envmap_physical_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\tvec3 reflectVec = reflect( - viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\\n\\t\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t\\tvec3 bentNormal = cross( bitangent, viewDir );\\n\\t\\t\\t\\tbentNormal = normalize( cross( bentNormal, bitangent ) );\\n\\t\\t\\t\\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\\n\\t\\t\\t\\treturn getIBLRadiance( viewDir, bentNormal, roughness );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\nvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\tmaterial.ior = ior;\\n\\t#ifdef USE_SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULAR_COLORMAP\\n\\t\\t\\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULAR_INTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_DISPERSION\\n\\tmaterial.dispersion = dispersion;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tmaterial.iridescence = iridescence;\\n\\tmaterial.iridescenceIOR = iridescenceIOR;\\n\\t#ifdef USE_IRIDESCENCEMAP\\n\\t\\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\t\\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\\n\\t#else\\n\\t\\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\\n\\t#endif\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEEN_COLORMAP\\n\\t\\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\\n\\t#endif\\n#endif\\n#ifdef USE_ANISOTROPY\\n\\t#ifdef USE_ANISOTROPYMAP\\n\\t\\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\\n\\t\\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\\n\\t\\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\\n\\t#else\\n\\t\\tvec2 anisotropyV = anisotropyVector;\\n\\t#endif\\n\\tmaterial.anisotropy = length( anisotropyV );\\n\\tif( material.anisotropy == 0.0 ) {\\n\\t\\tanisotropyV = vec2( 1.0, 0.0 );\\n\\t} else {\\n\\t\\tanisotropyV /= material.anisotropy;\\n\\t\\tmaterial.anisotropy = saturate( material.anisotropy );\\n\\t}\\n\\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\\n\\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\\n\\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\\n#endif\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\tfloat dispersion;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tfloat iridescence;\\n\\t\\tfloat iridescenceIOR;\\n\\t\\tfloat iridescenceThickness;\\n\\t\\tvec3 iridescenceFresnel;\\n\\t\\tvec3 iridescenceF0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n\\t#ifdef IOR\\n\\t\\tfloat ior;\\n\\t#endif\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat transmission;\\n\\t\\tfloat transmissionAlpha;\\n\\t\\tfloat thickness;\\n\\t\\tfloat attenuationDistance;\\n\\t\\tvec3 attenuationColor;\\n\\t#endif\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tfloat anisotropy;\\n\\t\\tfloat alphaT;\\n\\t\\tvec3 anisotropyT;\\n\\t\\tvec3 anisotropyB;\\n\\t#endif\\n};\\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\\nvec3 sheenSpecularDirect = vec3( 0.0 );\\nvec3 sheenSpecularIndirect = vec3(0.0 );\\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\\n    float x2 = x * x;\\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\n#ifdef USE_ANISOTROPY\\n\\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\\n\\t\\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\\n\\t\\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\\n\\t\\tfloat v = 0.5 / ( gv + gl );\\n\\t\\treturn saturate(v);\\n\\t}\\n\\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\\n\\t\\tfloat a2 = alphaT * alphaB;\\n\\t\\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\\n\\t\\thighp float v2 = dot( v, v );\\n\\t\\tfloat w2 = a2 / v2;\\n\\t\\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\\n\\t}\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\\n\\t\\tvec3 f0 = material.clearcoatF0;\\n\\t\\tfloat f90 = material.clearcoatF90;\\n\\t\\tfloat roughness = material.clearcoatRoughness;\\n\\t\\tfloat alpha = pow2( roughness );\\n\\t\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\t\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\t\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\t\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\t\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\t\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\t\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\t\\tfloat D = D_GGX( alpha, dotNH );\\n\\t\\treturn F * ( V * D );\\n\\t}\\n#endif\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\\n\\tvec3 f0 = material.specularColor;\\n\\tfloat f90 = material.specularF90;\\n\\tfloat roughness = material.roughness;\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tF = mix( F, material.iridescenceFresnel, material.iridescence );\\n\\t#endif\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tfloat dotTL = dot( material.anisotropyT, lightDir );\\n\\t\\tfloat dotTV = dot( material.anisotropyT, viewDir );\\n\\t\\tfloat dotTH = dot( material.anisotropyT, halfDir );\\n\\t\\tfloat dotBL = dot( material.anisotropyB, lightDir );\\n\\t\\tfloat dotBV = dot( material.anisotropyB, viewDir );\\n\\t\\tfloat dotBH = dot( material.anisotropyB, halfDir );\\n\\t\\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\\n\\t\\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\\n\\t#else\\n\\t\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\t\\tfloat D = D_GGX( alpha, dotNH );\\n\\t#endif\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat r2 = roughness * roughness;\\n\\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\\n\\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\\n\\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\\n\\treturn saturate( DG * RECIPROCAL_PI );\\n}\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\n#ifdef USE_IRIDESCENCE\\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#else\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#endif\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\\n\\t#else\\n\\t\\tvec3 Fr = specularColor;\\n\\t#endif\\n\\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometryNormal;\\n\\t\\tvec3 viewDir = geometryViewDir;\\n\\t\\tvec3 position = geometryPosition;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\\n\\t#else\\n\\t\\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\t#endif\\n\\tvec3 totalScattering = singleScattering + multiScattering;\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\nvar lights_fragment_begin = \"\\nvec3 geometryPosition = - vViewPosition;\\nvec3 geometryNormal = normal;\\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\nvec3 geometryClearcoatNormal = vec3( 0.0 );\\n#ifdef USE_CLEARCOAT\\n\\tgeometryClearcoatNormal = clearcoatNormal;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\\n\\tif ( material.iridescenceThickness == 0.0 ) {\\n\\t\\tmaterial.iridescence = 0.0;\\n\\t} else {\\n\\t\\tmaterial.iridescence = saturate( material.iridescence );\\n\\t}\\n\\tif ( material.iridescence > 0.0 ) {\\n\\t\\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\\n\\t\\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\\n\\t}\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometryPosition, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tvec4 spotColor;\\n\\tvec3 spotLightCoord;\\n\\tbool inSpotLightMap;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\\n\\t\\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\\n\\t\\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\\n\\t\\t#else\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#endif\\n\\t\\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\\n\\t\\t\\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\\n\\t\\t\\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\\n\\t\\t\\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\\n\\t\\t\\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\\n\\t\\t#endif\\n\\t\\t#undef SPOT_LIGHT_MAP_INDEX\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#if defined( USE_LIGHT_PROBES )\\n\\t\\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometryNormal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\\n\\t#else\\n\\t\\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n#endif\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF )\\n\\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tvFragDepth = 1.0 + gl_Position.w;\\n\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n#endif\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\\n\\t#endif\\n\\tdiffuseColor *= sampledDiffuseColor;\\n#endif\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\t#if defined( USE_POINTS_UV )\\n\\t\\tvec2 uv = vUv;\\n\\t#else\\n\\t\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\t#endif\\n#endif\\n#ifdef USE_MAP\\n\\tdiffuseColor *= texture2D( map, uv );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\nvar map_particle_pars_fragment = \"#if defined( USE_POINTS_UV )\\n\\tvarying vec2 vUv;\\n#else\\n\\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\t\\tuniform mat3 uvTransform;\\n\\t#endif\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphinstance_vertex = \"#ifdef USE_INSTANCING_MORPH\\n\\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\\n\\t}\\n#endif\";\n\nvar morphcolor_vertex = \"#if defined( USE_MORPHCOLORS )\\n\\tvColor *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t#if defined( USE_COLOR_ALPHA )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t#elif defined( USE_COLOR )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\\n\\t}\\n#endif\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_INSTANCING_MORPH\\n\\t\\tuniform float morphTargetBaseInfluence;\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t#endif\\n\\tuniform sampler2DArray morphTargetsTexture;\\n\\tuniform ivec2 morphTargetsTextureSize;\\n\\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\\n\\t\\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\\n\\t\\tint y = texelIndex / morphTargetsTextureSize.x;\\n\\t\\tint x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\\n\\t\\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\\n\\t}\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\\n\\t}\\n#endif\";\n\nvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = dFdx( vViewPosition );\\n\\tvec3 fdy = dFdy( vViewPosition );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal *= faceDirection;\\n\\t#endif\\n#endif\\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\\n\\t#ifdef USE_TANGENT\\n\\t\\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\\n\\t#else\\n\\t\\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\\n\\t\\t#if defined( USE_NORMALMAP )\\n\\t\\t\\tvNormalMapUv\\n\\t\\t#elif defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tvClearcoatNormalMapUv\\n\\t\\t#else\\n\\t\\t\\tvUv\\n\\t\\t#endif\\n\\t\\t);\\n\\t#endif\\n\\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\\n\\t\\ttbn[0] *= faceDirection;\\n\\t\\ttbn[1] *= faceDirection;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\t#ifdef USE_TANGENT\\n\\t\\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\\n\\t#else\\n\\t\\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\\n\\t#endif\\n\\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\\n\\t\\ttbn2[0] *= faceDirection;\\n\\t\\ttbn2[1] *= faceDirection;\\n\\t#endif\\n#endif\\nvec3 nonPerturbedNormal = normal;\";\n\nvar normal_fragment_maps = \"#ifdef USE_NORMALMAP_OBJECTSPACE\\n\\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\tnormal = normalize( tbn * mapN );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\nvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef USE_NORMALMAP_OBJECTSPACE\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\\n\\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( uv.st );\\n\\t\\tvec2 st1 = dFdy( uv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\\n\\t\\treturn mat3( T * scale, B * scale, N );\\n\\t}\\n#endif\";\n\nvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = nonPerturbedNormal;\\n#endif\";\n\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\\n#endif\";\n\nvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\";\n\nvar iridescence_pars_fragment = \"#ifdef USE_IRIDESCENCEMAP\\n\\tuniform sampler2D iridescenceMap;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tuniform sampler2D iridescenceThicknessMap;\\n#endif\";\n\nvar opaque_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= material.transmissionAlpha;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\\nconst float Inv255 = 1. / 255.;\\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tif( v <= 0.0 )\\n\\t\\treturn vec4( 0., 0., 0., 0. );\\n\\tif( v >= 1.0 )\\n\\t\\treturn vec4( 1., 1., 1., 1. );\\n\\tfloat vuf;\\n\\tfloat af = modf( v * PackFactors.a, vuf );\\n\\tfloat bf = modf( vuf * ShiftRight8, vuf );\\n\\tfloat gf = modf( vuf * ShiftRight8, vuf );\\n\\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\\n}\\nvec3 packDepthToRGB( const in float v ) {\\n\\tif( v <= 0.0 )\\n\\t\\treturn vec3( 0., 0., 0. );\\n\\tif( v >= 1.0 )\\n\\t\\treturn vec3( 1., 1., 1. );\\n\\tfloat vuf;\\n\\tfloat bf = modf( v * PackFactors.b, vuf );\\n\\tfloat gf = modf( vuf * ShiftRight8, vuf );\\n\\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\\n}\\nvec2 packDepthToRG( const in float v ) {\\n\\tif( v <= 0.0 )\\n\\t\\treturn vec2( 0., 0. );\\n\\tif( v >= 1.0 )\\n\\t\\treturn vec2( 1., 1. );\\n\\tfloat vuf;\\n\\tfloat gf = modf( v * 256., vuf );\\n\\treturn vec2( vuf * Inv255, gf );\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors4 );\\n}\\nfloat unpackRGBToDepth( const in vec3 v ) {\\n\\treturn dot( v, UnpackFactors3 );\\n}\\nfloat unpackRGToDepth( const in vec2 v ) {\\n\\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\\n}\\nvec4 pack2HalfToRGBA( const in vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( const in vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\\n\\treturn depth * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * depth - far );\\n}\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_BATCHING\\n\\tmvPosition = batchingMatrix * mvPosition;\\n#endif\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n\\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#if NUM_SPOT_LIGHT_MAPS > 0\\n\\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\\n\\t\\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn mix( 1.0, shadow, shadowIntensity );\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\t\\n\\t\\tfloat lightToPositionLength = length( lightToPosition );\\n\\t\\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\\n\\t\\t\\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\t\\tdp += shadowBias;\\n\\t\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\t\\tshadow = (\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn mix( 1.0, shadow, shadowIntensity );\\n\\t}\\n#endif\";\n\nvar shadowmap_pars_vertex = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n\\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\\n\\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\nvar shadowmap_vertex = \"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\\n\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\tvec4 shadowWorldPosition;\\n#endif\\n#if defined( USE_SHADOWMAP )\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if NUM_SPOT_LIGHT_COORDS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition;\\n\\t\\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t\\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\\n\\t\\t#endif\\n\\t\\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\tuniform highp sampler2D boneTexture;\\n\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\tint size = textureSize( boneTexture, 0 ).x;\\n\\t\\tint j = int( i ) * 4;\\n\\t\\tint x = j % size;\\n\\t\\tint y = j / size;\\n\\t\\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\\n\\t\\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\\n\\t\\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\\n\\t\\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\\n\\t\\treturn mat4( v1, v2, v3, v4 );\\n\\t}\\n#endif\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn saturate( toneMappingExposure * color );\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 CineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\\n\\tvec3( 1.6605, - 0.1246, - 0.0182 ),\\n\\tvec3( - 0.5876, 1.1329, - 0.1006 ),\\n\\tvec3( - 0.0728, - 0.0083, 1.1187 )\\n);\\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\\n\\tvec3( 0.6274, 0.0691, 0.0164 ),\\n\\tvec3( 0.3293, 0.9195, 0.0880 ),\\n\\tvec3( 0.0433, 0.0113, 0.8956 )\\n);\\nvec3 agxDefaultContrastApprox( vec3 x ) {\\n\\tvec3 x2 = x * x;\\n\\tvec3 x4 = x2 * x2;\\n\\treturn + 15.5 * x4 * x2\\n\\t\\t- 40.14 * x4 * x\\n\\t\\t+ 31.96 * x4\\n\\t\\t- 6.868 * x2 * x\\n\\t\\t+ 0.4298 * x2\\n\\t\\t+ 0.1191 * x\\n\\t\\t- 0.00232;\\n}\\nvec3 AgXToneMapping( vec3 color ) {\\n\\tconst mat3 AgXInsetMatrix = mat3(\\n\\t\\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\\n\\t\\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\\n\\t\\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\\n\\t);\\n\\tconst mat3 AgXOutsetMatrix = mat3(\\n\\t\\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\\n\\t\\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\\n\\t\\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\\n\\t);\\n\\tconst float AgxMinEv = - 12.47393;\\tconst float AgxMaxEv = 4.026069;\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\\n\\tcolor = AgXInsetMatrix * color;\\n\\tcolor = max( color, 1e-10 );\\tcolor = log2( color );\\n\\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\\n\\tcolor = clamp( color, 0.0, 1.0 );\\n\\tcolor = agxDefaultContrastApprox( color );\\n\\tcolor = AgXOutsetMatrix * color;\\n\\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\\n\\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\\n\\tcolor = clamp( color, 0.0, 1.0 );\\n\\treturn color;\\n}\\nvec3 NeutralToneMapping( vec3 color ) {\\n\\tconst float StartCompression = 0.8 - 0.04;\\n\\tconst float Desaturation = 0.15;\\n\\tcolor *= toneMappingExposure;\\n\\tfloat x = min( color.r, min( color.g, color.b ) );\\n\\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\\n\\tcolor -= offset;\\n\\tfloat peak = max( color.r, max( color.g, color.b ) );\\n\\tif ( peak < StartCompression ) return color;\\n\\tfloat d = 1. - StartCompression;\\n\\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\\n\\tcolor *= newPeak / peak;\\n\\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\\n\\treturn mix( color, vec3( newPeak ), g );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\nvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tmaterial.transmission = transmission;\\n\\tmaterial.transmissionAlpha = 1.0;\\n\\tmaterial.thickness = thickness;\\n\\tmaterial.attenuationDistance = attenuationDistance;\\n\\tmaterial.attenuationColor = attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmitted = getIBLVolumeRefraction(\\n\\t\\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\\n\\t\\tmaterial.attenuationColor, material.attenuationDistance );\\n\\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\\n\\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\\n#endif\";\n\nvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tfloat w0( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\\n\\t}\\n\\tfloat w1( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\\n\\t}\\n\\tfloat w2( float a ){\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\\n\\t}\\n\\tfloat w3( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * a * a );\\n\\t}\\n\\tfloat g0( float a ) {\\n\\t\\treturn w0( a ) + w1( a );\\n\\t}\\n\\tfloat g1( float a ) {\\n\\t\\treturn w2( a ) + w3( a );\\n\\t}\\n\\tfloat h0( float a ) {\\n\\t\\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\\n\\t}\\n\\tfloat h1( float a ) {\\n\\t\\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\\n\\t}\\n\\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\\n\\t\\tuv = uv * texelSize.zw + 0.5;\\n\\t\\tvec2 iuv = floor( uv );\\n\\t\\tvec2 fuv = fract( uv );\\n\\t\\tfloat g0x = g0( fuv.x );\\n\\t\\tfloat g1x = g1( fuv.x );\\n\\t\\tfloat h0x = h0( fuv.x );\\n\\t\\tfloat h1x = h1( fuv.x );\\n\\t\\tfloat h0y = h0( fuv.y );\\n\\t\\tfloat h1y = h1( fuv.y );\\n\\t\\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\\n\\t\\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\\n\\t\\t\\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\\n\\t}\\n\\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\\n\\t\\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\\n\\t\\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\\n\\t\\tvec2 fLodSizeInv = 1.0 / fLodSize;\\n\\t\\tvec2 cLodSizeInv = 1.0 / cLodSize;\\n\\t\\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\\n\\t\\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\\n\\t\\treturn mix( fSample, cSample, fract( lod ) );\\n\\t}\\n\\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\\n\\t\\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\\n\\t}\\n\\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tif ( isinf( attenuationDistance ) ) {\\n\\t\\t\\treturn vec3( 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\\n\\t\\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\\n\\t\\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\\n\\t\\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tvec4 transmittedLight;\\n\\t\\tvec3 transmittance;\\n\\t\\t#ifdef USE_DISPERSION\\n\\t\\t\\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\\n\\t\\t\\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\\n\\t\\t\\tfor ( int i = 0; i < 3; i ++ ) {\\n\\t\\t\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\\n\\t\\t\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\t\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\t\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\t\\t\\trefractionCoords += 1.0;\\n\\t\\t\\t\\trefractionCoords /= 2.0;\\n\\t\\t\\t\\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\\n\\t\\t\\t\\ttransmittedLight[ i ] = transmissionSample[ i ];\\n\\t\\t\\t\\ttransmittedLight.a += transmissionSample.a;\\n\\t\\t\\t\\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\\n\\t\\t\\t}\\n\\t\\t\\ttransmittedLight.a /= 3.0;\\n\\t\\t#else\\n\\t\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\t\\trefractionCoords += 1.0;\\n\\t\\t\\trefractionCoords /= 2.0;\\n\\t\\t\\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\t\\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\t#endif\\n\\t\\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\\n\\t}\\n#endif\";\n\nvar uv_pars_fragment = \"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\\n\\tvarying vec2 vUv;\\n#endif\\n#ifdef USE_MAP\\n\\tvarying vec2 vMapUv;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tvarying vec2 vAlphaMapUv;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tvarying vec2 vLightMapUv;\\n#endif\\n#ifdef USE_AOMAP\\n\\tvarying vec2 vAoMapUv;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tvarying vec2 vBumpMapUv;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tvarying vec2 vNormalMapUv;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tvarying vec2 vEmissiveMapUv;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tvarying vec2 vMetalnessMapUv;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tvarying vec2 vRoughnessMapUv;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tvarying vec2 vAnisotropyMapUv;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tvarying vec2 vClearcoatMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvarying vec2 vClearcoatNormalMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tvarying vec2 vClearcoatRoughnessMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tvarying vec2 vIridescenceMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tvarying vec2 vIridescenceThicknessMapUv;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tvarying vec2 vSheenColorMapUv;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tvarying vec2 vSheenRoughnessMapUv;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tvarying vec2 vSpecularMapUv;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tvarying vec2 vSpecularColorMapUv;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tvarying vec2 vSpecularIntensityMapUv;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tuniform mat3 transmissionMapTransform;\\n\\tvarying vec2 vTransmissionMapUv;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tuniform mat3 thicknessMapTransform;\\n\\tvarying vec2 vThicknessMapUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\\n\\tvarying vec2 vUv;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform mat3 mapTransform;\\n\\tvarying vec2 vMapUv;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform mat3 alphaMapTransform;\\n\\tvarying vec2 vAlphaMapUv;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tuniform mat3 lightMapTransform;\\n\\tvarying vec2 vLightMapUv;\\n#endif\\n#ifdef USE_AOMAP\\n\\tuniform mat3 aoMapTransform;\\n\\tvarying vec2 vAoMapUv;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tuniform mat3 bumpMapTransform;\\n\\tvarying vec2 vBumpMapUv;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tuniform mat3 normalMapTransform;\\n\\tvarying vec2 vNormalMapUv;\\n#endif\\n#ifdef USE_DISPLACEMENTMAP\\n\\tuniform mat3 displacementMapTransform;\\n\\tvarying vec2 vDisplacementMapUv;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tuniform mat3 emissiveMapTransform;\\n\\tvarying vec2 vEmissiveMapUv;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tuniform mat3 metalnessMapTransform;\\n\\tvarying vec2 vMetalnessMapUv;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tuniform mat3 roughnessMapTransform;\\n\\tvarying vec2 vRoughnessMapUv;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tuniform mat3 anisotropyMapTransform;\\n\\tvarying vec2 vAnisotropyMapUv;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tuniform mat3 clearcoatMapTransform;\\n\\tvarying vec2 vClearcoatMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform mat3 clearcoatNormalMapTransform;\\n\\tvarying vec2 vClearcoatNormalMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform mat3 clearcoatRoughnessMapTransform;\\n\\tvarying vec2 vClearcoatRoughnessMapUv;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tuniform mat3 sheenColorMapTransform;\\n\\tvarying vec2 vSheenColorMapUv;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tuniform mat3 sheenRoughnessMapTransform;\\n\\tvarying vec2 vSheenRoughnessMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tuniform mat3 iridescenceMapTransform;\\n\\tvarying vec2 vIridescenceMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tuniform mat3 iridescenceThicknessMapTransform;\\n\\tvarying vec2 vIridescenceThicknessMapUv;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tuniform mat3 specularMapTransform;\\n\\tvarying vec2 vSpecularMapUv;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tuniform mat3 specularColorMapTransform;\\n\\tvarying vec2 vSpecularColorMapUv;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tuniform mat3 specularIntensityMapTransform;\\n\\tvarying vec2 vSpecularIntensityMapUv;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tuniform mat3 transmissionMapTransform;\\n\\tvarying vec2 vTransmissionMapUv;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tuniform mat3 thicknessMapTransform;\\n\\tvarying vec2 vThicknessMapUv;\\n#endif\";\n\nvar uv_vertex = \"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\\n\\tvUv = vec3( uv, 1 ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_AOMAP\\n\\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_DISPLACEMENTMAP\\n\\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_BATCHING\\n\\t\\tworldPosition = batchingMatrix * worldPosition;\\n\\t#endif\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\nconst vertex$h = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\nconst fragment$h = \"uniform sampler2D t2D;\\nuniform float backgroundIntensity;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\\n\\t#endif\\n\\ttexColor.rgb *= backgroundIntensity;\\n\\tgl_FragColor = texColor;\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\n\nconst vertex$g = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$g = \"#ifdef ENVMAP_TYPE_CUBE\\n\\tuniform samplerCube envMap;\\n#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\tuniform sampler2D envMap;\\n#endif\\nuniform float flipEnvMap;\\nuniform float backgroundBlurriness;\\nuniform float backgroundIntensity;\\nuniform mat3 backgroundRotation;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\\n\\t#else\\n\\t\\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t#endif\\n\\ttexColor.rgb *= backgroundIntensity;\\n\\tgl_FragColor = texColor;\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\n\nconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$f = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = texColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\n\nconst vertex$e = \"#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\nconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <clipping_planes_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#elif DEPTH_PACKING == 3202\\n\\t\\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\\n\\t#elif DEPTH_PACKING == 3203\\n\\t\\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\\n\\t#endif\\n}\";\n\nconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\nconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <clipping_planes_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\nconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\nconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\n\nconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$a = \"#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$9 = \"#define LAMBERT\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_lambert_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_lambert_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\nconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\\n\\t#ifdef OPAQUE\\n\\t\\tgl_FragColor.a = 1.0;\\n\\t#endif\\n}\";\n\nconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define USE_SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef USE_SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULAR_COLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULAR_INTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_DISPERSION\\n\\tuniform float dispersion;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tuniform float iridescence;\\n\\tuniform float iridescenceIOR;\\n\\tuniform float iridescenceThicknessMinimum;\\n\\tuniform float iridescenceThicknessMaximum;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEEN_COLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\n#ifdef USE_ANISOTROPY\\n\\tuniform vec2 anisotropyVector;\\n\\t#ifdef USE_ANISOTROPYMAP\\n\\t\\tuniform sampler2D anisotropyMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <iridescence_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <iridescence_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_SHEEN\\n\\t\\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\\n\\t\\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\\n\\t#endif\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n#ifdef USE_POINTS_UV\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\nvoid main() {\\n\\t#ifdef USE_POINTS_UV\\n\\t\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\t#endif\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$2 = \"#include <common>\\n#include <batching_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <logdepthbuf_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix[ 3 ];\\n\\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst ShaderChunk = {\n\talphahash_fragment: alphahash_fragment,\n\talphahash_pars_fragment: alphahash_pars_fragment,\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\talphatest_pars_fragment: alphatest_pars_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbatching_pars_vertex: batching_pars_vertex,\n\tbatching_vertex: batching_vertex,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tiridescence_fragment: iridescence_fragment,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tcolorspace_fragment: colorspace_fragment,\n\tcolorspace_pars_fragment: colorspace_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_fragment: lights_lambert_fragment,\n\tlights_lambert_pars_fragment: lights_lambert_pars_fragment,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_toon_fragment: lights_toon_fragment,\n\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphinstance_vertex: morphinstance_vertex,\n\tmorphcolor_vertex: morphcolor_vertex,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormal_pars_fragment: normal_pars_fragment,\n\tnormal_pars_vertex: normal_pars_vertex,\n\tnormal_vertex: normal_vertex,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\tiridescence_pars_fragment: iridescence_pars_fragment,\n\topaque_fragment: opaque_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\ttransmission_fragment: transmission_fragment,\n\ttransmission_pars_fragment: transmission_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tbackground_vert: vertex$h,\n\tbackground_frag: fragment$h,\n\tbackgroundCube_vert: vertex$g,\n\tbackgroundCube_frag: fragment$g,\n\tcube_vert: vertex$f,\n\tcube_frag: fragment$f,\n\tdepth_vert: vertex$e,\n\tdepth_frag: fragment$e,\n\tdistanceRGBA_vert: vertex$d,\n\tdistanceRGBA_frag: fragment$d,\n\tequirect_vert: vertex$c,\n\tequirect_frag: fragment$c,\n\tlinedashed_vert: vertex$b,\n\tlinedashed_frag: fragment$b,\n\tmeshbasic_vert: vertex$a,\n\tmeshbasic_frag: fragment$a,\n\tmeshlambert_vert: vertex$9,\n\tmeshlambert_frag: fragment$9,\n\tmeshmatcap_vert: vertex$8,\n\tmeshmatcap_frag: fragment$8,\n\tmeshnormal_vert: vertex$7,\n\tmeshnormal_frag: fragment$7,\n\tmeshphong_vert: vertex$6,\n\tmeshphong_frag: fragment$6,\n\tmeshphysical_vert: vertex$5,\n\tmeshphysical_frag: fragment$5,\n\tmeshtoon_vert: vertex$4,\n\tmeshtoon_frag: fragment$4,\n\tpoints_vert: vertex$3,\n\tpoints_frag: fragment$3,\n\tshadow_vert: vertex$2,\n\tshadow_frag: fragment$2,\n\tsprite_vert: vertex$1,\n\tsprite_frag: fragment$1\n};\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tmapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\n\t\talphaMap: { value: null },\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\n\t\talphaTest: { value: 0 }\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\t\tspecularMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tenvMapRotation: { value: /*@__PURE__*/ new Matrix3() },\n\t\tflipEnvMap: { value: -1 },\n\t\treflectivity: { value: 1.0 }, // basic, lambert, phong\n\t\tior: { value: 1.5 }, // physical\n\t\trefractionRatio: { value: 0.98 }, // basic, lambert, phong\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 },\n\t\taoMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 },\n\t\tlightMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tnormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null },\n\t\temissiveMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null },\n\t\tmetalnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null },\n\t\troughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tlightProbe: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {}\n\t\t} },\n\n\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\tshadowIntensity: 1,\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {}\n\t\t} },\n\n\t\tspotLightShadows: { value: [], properties: {\n\t\t\tshadowIntensity: 1,\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotLightMap: { value: [] },\n\t\tspotShadowMap: { value: [] },\n\t\tspotLightMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {}\n\t\t} },\n\n\t\tpointLightShadows: { value: [], properties: {\n\t\t\tshadowIntensity: 1,\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} },\n\n\t\tltc_1: { value: null },\n\t\tltc_2: { value: null }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tsprite: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tcenter: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },\n\t\trotation: { value: 0.0 },\n\t\tmap: { value: null },\n\t\tmapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\talphaMap: { value: null },\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\talphaTest: { value: 0 }\n\n\t}\n\n};\n\nconst ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: /*@__PURE__*/ new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 1.0 },\n\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\tenvMapIntensity: { value: 1 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\ttoon: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t},\n\n\tmatcap: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tmatcap: { value: null }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\n\t},\n\n\tsprite: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.sprite,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t},\n\n\tbackground: {\n\n\t\tuniforms: {\n\t\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tt2D: { value: null },\n\t\t\tbackgroundIntensity: { value: 1 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.background_vert,\n\t\tfragmentShader: ShaderChunk.background_frag\n\n\t},\n\n\tbackgroundCube: {\n\n\t\tuniforms: {\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: -1 },\n\t\t\tbackgroundBlurriness: { value: 0 },\n\t\t\tbackgroundIntensity: { value: 1 },\n\t\t\tbackgroundRotation: { value: /*@__PURE__*/ new Matrix3() }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.backgroundCube_vert,\n\t\tfragmentShader: ShaderChunk.backgroundCube_frag\n\n\t},\n\n\tcube: {\n\n\t\tuniforms: {\n\t\t\ttCube: { value: null },\n\t\t\ttFlip: { value: -1 },\n\t\t\topacity: { value: 1.0 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: /*@__PURE__*/ new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: /*@__PURE__*/ new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearcoat: { value: 0 },\n\t\t\tclearcoatMap: { value: null },\n\t\t\tclearcoatMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tclearcoatNormalMap: { value: null },\n\t\t\tclearcoatNormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tclearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },\n\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\tclearcoatRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tdispersion: { value: 0 },\n\t\t\tiridescence: { value: 0 },\n\t\t\tiridescenceMap: { value: null },\n\t\t\tiridescenceMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tiridescenceIOR: { value: 1.3 },\n\t\t\tiridescenceThicknessMinimum: { value: 100 },\n\t\t\tiridescenceThicknessMaximum: { value: 400 },\n\t\t\tiridescenceThicknessMap: { value: null },\n\t\t\tiridescenceThicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tsheen: { value: 0 },\n\t\t\tsheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\tsheenColorMap: { value: null },\n\t\t\tsheenColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tsheenRoughness: { value: 1 },\n\t\t\tsheenRoughnessMap: { value: null },\n\t\t\tsheenRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\ttransmission: { value: 0 },\n\t\t\ttransmissionMap: { value: null },\n\t\t\ttransmissionMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\ttransmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },\n\t\t\ttransmissionSamplerMap: { value: null },\n\t\t\tthickness: { value: 0 },\n\t\t\tthicknessMap: { value: null },\n\t\t\tthicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tattenuationDistance: { value: 0 },\n\t\t\tattenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\tspecularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },\n\t\t\tspecularColorMap: { value: null },\n\t\t\tspecularColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tspecularIntensity: { value: 1 },\n\t\t\tspecularIntensityMap: { value: null },\n\t\t\tspecularIntensityMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tanisotropyVector: { value: /*@__PURE__*/ new Vector2() },\n\t\t\tanisotropyMap: { value: null },\n\t\t\tanisotropyMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\nconst _rgb = { r: 0, b: 0, g: 0 };\nconst _e1$1 = /*@__PURE__*/ new Euler();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\n\nfunction WebGLBackground( renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha ) {\n\n\tconst clearColor = new Color( 0x000000 );\n\tlet clearAlpha = alpha === true ? 0 : 1;\n\n\tlet planeMesh;\n\tlet boxMesh;\n\n\tlet currentBackground = null;\n\tlet currentBackgroundVersion = 0;\n\tlet currentTonemapping = null;\n\n\tfunction getBackground( scene ) {\n\n\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\tif ( background && background.isTexture ) {\n\n\t\t\tconst usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background\n\t\t\tbackground = ( usePMREM ? cubeuvmaps : cubemaps ).get( background );\n\n\t\t}\n\n\t\treturn background;\n\n\t}\n\n\tfunction render( scene ) {\n\n\t\tlet forceClear = false;\n\t\tconst background = getBackground( scene );\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tconst environmentBlendMode = renderer.xr.getEnvironmentBlendMode();\n\n\t\tif ( environmentBlendMode === 'additive' ) {\n\n\t\t\tstate.buffers.color.setClear( 0, 0, 0, 1, premultipliedAlpha );\n\n\t\t} else if ( environmentBlendMode === 'alpha-blend' ) {\n\n\t\t\tstate.buffers.color.setClear( 0, 0, 0, 0, premultipliedAlpha );\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t// buffers might not be writable which is required to ensure a correct clear\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t}\n\n\tfunction addToRenderList( renderList, scene ) {\n\n\t\tconst background = getBackground( scene );\n\n\t\tif ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.backgroundCube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.backgroundCube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.backgroundCube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// add \"envMap\" material property so the renderer can evaluate it like for built-in materials\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\t_e1$1.copy( scene.backgroundRotation );\n\n\t\t\t// accommodate left-handed frame\n\t\t\t_e1$1.x *= -1; _e1$1.y *= -1; _e1$1.z *= -1;\n\n\t\t\tif ( background.isCubeTexture && background.isRenderTargetTexture === false ) {\n\n\t\t\t\t// environment maps which are not cube render targets or PMREMs follow a different convention\n\t\t\t\t_e1$1.y *= -1;\n\t\t\t\t_e1$1.z *= -1;\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? -1 : 1;\n\t\t\tboxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;\n\t\t\tboxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n\t\t\tboxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4( _m1$1.makeRotationFromEuler( _e1$1 ) );\n\t\t\tboxMesh.material.toneMapped = ColorManagement.getTransfer( background.colorSpace ) !== SRGBTransfer;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\tboxMesh.layers.enableAll();\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// add \"map\" material property so the renderer can evaluate it like for built-in materials\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\t\t\tplaneMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n\t\t\tplaneMesh.material.toneMapped = ColorManagement.getTransfer( background.colorSpace ) !== SRGBTransfer;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\tplaneMesh.layers.enableAll();\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tcolor.getRGB( _rgb, getUnlitUniformColorSpace( renderer ) );\n\n\t\tstate.buffers.color.setClear( _rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha );\n\n\t}\n\n\tfunction dispose() {\n\n\t\tif ( boxMesh !== undefined ) {\n\n\t\t\tboxMesh.geometry.dispose();\n\t\t\tboxMesh.material.dispose();\n\n\t\t\tboxMesh = undefined;\n\n\t\t}\n\n\t\tif ( planeMesh !== undefined ) {\n\n\t\t\tplaneMesh.geometry.dispose();\n\t\t\tplaneMesh.material.dispose();\n\n\t\t\tplaneMesh = undefined;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha = 1 ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render,\n\t\taddToRenderList: addToRenderList,\n\t\tdispose: dispose\n\n\t};\n\n}\n\nfunction WebGLBindingStates( gl, attributes ) {\n\n\tconst maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\n\tconst bindingStates = {};\n\n\tconst defaultState = createBindingState( null );\n\tlet currentState = defaultState;\n\tlet forceUpdate = false;\n\n\tfunction setup( object, material, program, geometry, index ) {\n\n\t\tlet updateBuffers = false;\n\n\t\tconst state = getBindingState( geometry, program, material );\n\n\t\tif ( currentState !== state ) {\n\n\t\t\tcurrentState = state;\n\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t}\n\n\t\tupdateBuffers = needsUpdate( object, geometry, program, index );\n\n\t\tif ( updateBuffers ) saveCache( object, geometry, program, index );\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tif ( updateBuffers || forceUpdate ) {\n\n\t\t\tforceUpdate = false;\n\n\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, attributes.get( index ).buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createVertexArrayObject() {\n\n\t\treturn gl.createVertexArray();\n\n\t}\n\n\tfunction bindVertexArrayObject( vao ) {\n\n\t\treturn gl.bindVertexArray( vao );\n\n\t}\n\n\tfunction deleteVertexArrayObject( vao ) {\n\n\t\treturn gl.deleteVertexArray( vao );\n\n\t}\n\n\tfunction getBindingState( geometry, program, material ) {\n\n\t\tconst wireframe = ( material.wireframe === true );\n\n\t\tlet programMap = bindingStates[ geometry.id ];\n\n\t\tif ( programMap === undefined ) {\n\n\t\t\tprogramMap = {};\n\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t}\n\n\t\tlet stateMap = programMap[ program.id ];\n\n\t\tif ( stateMap === undefined ) {\n\n\t\t\tstateMap = {};\n\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t}\n\n\t\tlet state = stateMap[ wireframe ];\n\n\t\tif ( state === undefined ) {\n\n\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\tstateMap[ wireframe ] = state;\n\n\t\t}\n\n\t\treturn state;\n\n\t}\n\n\tfunction createBindingState( vao ) {\n\n\t\tconst newAttributes = [];\n\t\tconst enabledAttributes = [];\n\t\tconst attributeDivisors = [];\n\n\t\tfor ( let i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\t\t\tenabledAttributes[ i ] = 0;\n\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false,\n\n\t\t\tnewAttributes: newAttributes,\n\t\t\tenabledAttributes: enabledAttributes,\n\t\t\tattributeDivisors: attributeDivisors,\n\t\t\tobject: vao,\n\t\t\tattributes: {},\n\t\t\tindex: null\n\n\t\t};\n\n\t}\n\n\tfunction needsUpdate( object, geometry, program, index ) {\n\n\t\tconst cachedAttributes = currentState.attributes;\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tlet attributesNum = 0;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tconst cachedAttribute = cachedAttributes[ name ];\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( cachedAttribute === undefined ) return true;\n\n\t\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) return true;\n\n\t\t\t\tif ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;\n\n\t\t\t\tattributesNum ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( currentState.attributesNum !== attributesNum ) return true;\n\n\t\tif ( currentState.index !== index ) return true;\n\n\t\treturn false;\n\n\t}\n\n\tfunction saveCache( object, geometry, program, index ) {\n\n\t\tconst cache = {};\n\t\tconst attributes = geometry.attributes;\n\t\tlet attributesNum = 0;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet attribute = attributes[ name ];\n\n\t\t\t\tif ( attribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif ( attribute && attribute.data ) {\n\n\t\t\t\t\tdata.data = attribute.data;\n\n\t\t\t\t}\n\n\t\t\t\tcache[ name ] = data;\n\n\t\t\t\tattributesNum ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcurrentState.attributes = cache;\n\t\tcurrentState.attributesNum = attributesNum;\n\n\t\tcurrentState.index = index;\n\n\t}\n\n\tfunction initAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\n\t\tfor ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\tconst attributeDivisors = currentState.attributeDivisors;\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tgl.vertexAttribDivisor( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\tfor ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset, integer ) {\n\n\t\tif ( integer === true ) {\n\n\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\n\n\t\t} else {\n\n\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t}\n\n\t}\n\n\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\tinitAttributes();\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\n\t\t\t\t\tconst attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t// check for integer attributes\n\n\t\t\t\t\tconst integer = ( type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType );\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tstride * bytesPerElement,\n\t\t\t\t\t\t\t\t( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement,\n\t\t\t\t\t\t\t\tinteger\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tsize * bytesPerElement,\n\t\t\t\t\t\t\t\t( size / programAttribute.locationSize ) * i * bytesPerElement,\n\t\t\t\t\t\t\t\tinteger\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tconst value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute.location, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t}\n\n\tfunction dispose() {\n\n\t\treset();\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tfor ( const programId in programMap ) {\n\n\t\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t}\n\n\t}\n\n\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\tif ( bindingStates[ geometry.id ] === undefined ) return;\n\n\t\tconst programMap = bindingStates[ geometry.id ];\n\n\t\tfor ( const programId in programMap ) {\n\n\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ programId ];\n\n\t\t}\n\n\t\tdelete bindingStates[ geometry.id ];\n\n\t}\n\n\tfunction releaseStatesOfProgram( program ) {\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tif ( programMap[ program.id ] === undefined ) continue;\n\n\t\t\tconst stateMap = programMap[ program.id ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ program.id ];\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\tresetDefaultState();\n\t\tforceUpdate = true;\n\n\t\tif ( currentState === defaultState ) return;\n\n\t\tcurrentState = defaultState;\n\t\tbindVertexArrayObject( currentState.object );\n\n\t}\n\n\t// for backward-compatibility\n\n\tfunction resetDefaultState() {\n\n\t\tdefaultState.geometry = null;\n\t\tdefaultState.program = null;\n\t\tdefaultState.wireframe = false;\n\n\t}\n\n\treturn {\n\n\t\tsetup: setup,\n\t\treset: reset,\n\t\tresetDefaultState: resetDefaultState,\n\t\tdispose: dispose,\n\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t};\n\n}\n\nfunction WebGLBufferRenderer( gl, extensions, info ) {\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tgl.drawArraysInstanced( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\tfunction renderMultiDraw( starts, counts, drawCount ) {\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\n\t\textension.multiDrawArraysWEBGL( mode, starts, 0, counts, 0, drawCount );\n\n\t\tlet elementCount = 0;\n\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\telementCount += counts[ i ];\n\n\t\t}\n\n\t\tinfo.update( elementCount, mode, 1 );\n\n\t}\n\n\tfunction renderMultiDrawInstances( starts, counts, drawCount, primcount ) {\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tfor ( let i = 0; i < starts.length; i ++ ) {\n\n\t\t\t\trenderInstances( starts[ i ], counts[ i ], primcount[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\textension.multiDrawArraysInstancedWEBGL( mode, starts, 0, counts, 0, primcount, 0, drawCount );\n\n\t\t\tlet elementCount = 0;\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\telementCount += counts[ i ] * primcount[ i ];\n\n\t\t\t}\n\n\t\t\tinfo.update( elementCount, mode, 1 );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\tthis.renderMultiDraw = renderMultiDraw;\n\tthis.renderMultiDrawInstances = renderMultiDrawInstances;\n\n}\n\nfunction WebGLCapabilities( gl, extensions, parameters, utils ) {\n\n\tlet maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction textureFormatReadable( textureFormat ) {\n\n\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction textureTypeReadable( textureType ) {\n\n\t\tconst halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || extensions.has( 'EXT_color_buffer_float' ) );\n\n\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\ttextureType !== FloatType && ! halfFloatSupportedByExt ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tconst maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\tconst reverseDepthBuffer = parameters.reverseDepthBuffer === true && extensions.has( 'EXT_clip_control' );\n\n\tconst maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tconst maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tconst maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tconst maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tconst maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tconst maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tconst maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tconst maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tconst vertexTextures = maxVertexTextures > 0;\n\n\tconst maxSamples = gl.getParameter( gl.MAX_SAMPLES );\n\n\treturn {\n\n\t\tisWebGL2: true, // keeping this for backwards compatibility\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\ttextureFormatReadable: textureFormatReadable,\n\t\ttextureTypeReadable: textureTypeReadable,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\treverseDepthBuffer: reverseDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\n\t\tmaxSamples: maxSamples\n\n\t};\n\n}\n\nfunction WebGLClipping( properties ) {\n\n\tconst scope = this;\n\n\tlet globalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false;\n\n\tconst plane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping ) {\n\n\t\tconst enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\n\t};\n\n\tthis.setGlobalState = function ( planes, camera ) {\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\n\t};\n\n\tthis.setState = function ( material, camera, useCache ) {\n\n\t\tconst planes = material.clippingPlanes,\n\t\t\tclipIntersection = material.clipIntersection,\n\t\t\tclipShadows = material.clipShadows;\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\tlet dstArray = materialProperties.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\n\n\t\t\tfor ( let i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\tlet dstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\tscope.numIntersection = 0;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\nfunction WebGLCubeMaps( renderer ) {\n\n\tlet cubemaps = new WeakMap();\n\n\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height );\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemap = cubemaps.get( texture );\n\n\t\tif ( cubemap !== undefined ) {\n\n\t\t\tcubemaps.delete( texture );\n\t\t\tcubemap.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubemaps = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nconst LOD_MIN = 4;\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera();\nconst _clearColor = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\nlet _oldActiveCubeFace = 0;\nlet _oldActiveMipmapLevel = 0;\nlet _oldXrEnabled = false;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( -1, 1, -1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, -1 ),\n\t/*@__PURE__*/ new Vector3( -1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 ) ];\n\nconst _origin = /*@__PURE__*/ new Vector3();\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n*/\n\nclass PMREMGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._lodMax = 0;\n\t\tthis._cubeSize = 0;\n\t\tthis._lodPlanes = [];\n\t\tthis._sizeLods = [];\n\t\tthis._sigmas = [];\n\n\t\tthis._blurMaterial = null;\n\t\tthis._cubemapMaterial = null;\n\t\tthis._equirectMaterial = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety.\n\t *\n\t * @param {Scene} scene\n\t * @param {number} sigma\n\t * @param {number} near\n\t * @param {number} far\n\t * @param {Object} [options={}]\n\t * @return {WebGLRenderTarget}\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100, options = {} ) {\n\n\t\tconst {\n\t\t\tsize = 256,\n\t\t\tposition = _origin,\n\t\t} = options;\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n\t\t_oldXrEnabled = this._renderer.xr.enabled;\n\n\t\tthis._renderer.xr.enabled = false;\n\n\t\tthis._setSize( size );\n\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\t\tcubeUVRenderTarget.depthBuffer = true;\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget, position );\n\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t * The smallest supported equirectangular image size is 64 x 32.\n\t *\n\t * @param {Texture} equirectangular\n\t * @param {?WebGLRenderTarget} [renderTarget=null] - Optional render target.\n\t * @return {WebGLRenderTarget}\n\t */\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\n\n\t\treturn this._fromTexture( equirectangular, renderTarget );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * or HDR. The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t * The smallest supported cube size is 16 x 16.\n\t *\n\t * @param {Texture} cubemap\n\t * @param {null} [renderTarget=null] - Optional render target.\n\t * @return {WebGLRenderTarget}\n\t */\n\tfromCubemap( cubemap, renderTarget = null ) {\n\n\t\treturn this._fromTexture( cubemap, renderTarget );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileCubemapShader() {\n\n\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\t\t\tthis._compileMaterial( this._cubemapMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileEquirectangularShader() {\n\n\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\t\t\tthis._compileMaterial( this._equirectMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._dispose();\n\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\n\n\t}\n\n\t// private interface\n\n\t_setSize( cubeSize ) {\n\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\n\n\t}\n\n\t_dispose() {\n\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\n\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\n\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tthis._lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );\n\t\tthis._renderer.xr.enabled = _oldXrEnabled;\n\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture, renderTarget ) {\n\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\n\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\n\n\t\t} else { // Equirectangular\n\n\t\t\tthis._setSize( texture.image.width / 4 );\n\n\t\t}\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n\t\t_oldXrEnabled = this._renderer.xr.enabled;\n\n\t\tthis._renderer.xr.enabled = false;\n\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets() {\n\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\n\t\tconst height = 4 * this._cubeSize;\n\n\t\tconst params = {\n\t\t\tmagFilter: LinearFilter,\n\t\t\tminFilter: LinearFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: HalfFloatType,\n\t\t\tformat: RGBAFormat,\n\t\t\tcolorSpace: LinearSRGBColorSpace,\n\t\t\tdepthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\n\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {\n\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\n\n\t\t\t\tthis._dispose();\n\n\t\t\t}\n\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\n\n\t\t\tconst { _lodMax } = this;\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );\n\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\n\n\t\t}\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget, position ) {\n\n\t\tconst fov = 90;\n\t\tconst aspect = 1;\n\t\tconst cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tconst upSign = [ 1, -1, 1, 1, 1, 1 ];\n\t\tconst forwardSign = [ 1, 1, 1, -1, -1, -1 ];\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\t\tconst toneMapping = renderer.toneMapping;\n\t\trenderer.getClearColor( _clearColor );\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.autoClear = false;\n\n\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\tname: 'PMREM.Background',\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false,\n\t\t\tdepthTest: false,\n\t\t} );\n\n\t\tconst backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundMaterial.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundMaterial.color.copy( _clearColor );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\n\t\t\tif ( col === 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.position.set( position.x, position.y, position.z );\n\t\t\t\tcubeCamera.lookAt( position.x + forwardSign[ i ], position.y, position.z );\n\n\t\t\t} else if ( col === 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.position.set( position.x, position.y, position.z );\n\t\t\t\tcubeCamera.lookAt( position.x, position.y + forwardSign[ i ], position.z );\n\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.position.set( position.x, position.y, position.z );\n\t\t\t\tcubeCamera.lookAt( position.x, position.y, position.z + forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\tconst size = this._cubeSize;\n\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\n\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\t\tif ( useSolidColor ) {\n\n\t\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\tbackgroundBox.geometry.dispose();\n\t\tbackgroundBox.material.dispose();\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n\n\t\tif ( isCubeTexture ) {\n\n\t\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\n\t\t\t}\n\n\t\t\tthis._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? -1 : 1;\n\n\t\t} else {\n\n\t\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\n\t\tconst mesh = new Mesh( this._lodPlanes[ 0 ], material );\n\n\t\tconst uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\tconst size = this._cubeSize;\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\t\tconst n = this._lodPlanes.length;\n\n\t\tfor ( let i = 1; i < n; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( n - i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t *\n\t * @param {WebGLRenderTarget} cubeUVRenderTarget\n\t * @param {number} lodIn\n\t * @param {number} lodOut\n\t * @param {number} sigma\n\t * @param {Vector3} [poleAxis]\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );\n\t\tconst blurUniforms = blurMaterial.uniforms;\n\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\n\t\tconst { _lodMax } = this;\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = _lodMax - lodIn;\n\n\t\tconst outputSize = this._sizeLods[ lodOut ];\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\n\n\nfunction _createPlanes( lodMax ) {\n\n\tconst lodPlanes = [];\n\tconst sizeLods = [];\n\tconst sigmas = [];\n\n\tlet lod = lodMax;\n\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\tfor ( let i = 0; i < totalLods; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\tsizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > lodMax - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\n\n\t\t} else if ( i === 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\tsigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\n\t\tconst min = - texelSize;\n\t\tconst max = 1 + texelSize;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : -1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\tconst fill = [ face, face, face, face, face, face ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\tlodPlanes.push( planes );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { lodPlanes, sizeLods, sigmas };\n\n}\n\nfunction _createRenderTarget( width, height, params ) {\n\n\tconst cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getBlurShader( lodMax, width, height ) {\n\n\tconst weights = new Float32Array( MAX_SAMPLES );\n\tconst poleAxis = new Vector3( 0, 1, 0 );\n\tconst shaderMaterial = new ShaderMaterial( {\n\n\t\tname: 'SphericalGaussianBlur',\n\n\t\tdefines: {\n\t\t\t'n': MAX_SAMPLES,\n\t\t\t'CUBEUV_TEXEL_WIDTH': 1.0 / width,\n\t\t\t'CUBEUV_TEXEL_HEIGHT': 1.0 / height,\n\t\t\t'CUBEUV_MAX_MIP': `${lodMax}.0`,\n\t\t},\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'samples': { value: 1 },\n\t\t\t'weights': { value: weights },\n\t\t\t'latitudinal': { value: false },\n\t\t\t'dTheta': { value: 0 },\n\t\t\t'mipInt': { value: 0 },\n\t\t\t'poleAxis': { value: poleAxis }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getEquirectMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'EquirectangularToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCubemapMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'CubemapToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'flipEnvMap': { value: -1 }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCommonVertexShader() {\n\n\treturn /* glsl */`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`;\n\n}\n\nfunction WebGLCubeUVMaps( renderer ) {\n\n\tlet cubeUVmaps = new WeakMap();\n\n\tlet pmremGenerator = null;\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tconst isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\n\t\t\tconst isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t\t\t// equirect/cube map to cubeUV conversion\n\n\t\t\tif ( isEquirectMap || isCubeMap ) {\n\n\t\t\t\tlet renderTarget = cubeUVmaps.get( texture );\n\n\t\t\t\tconst currentPMREMVersion = renderTarget !== undefined ? renderTarget.texture.pmremVersion : 0;\n\n\t\t\t\tif ( texture.isRenderTargetTexture && texture.pmremVersion !== currentPMREMVersion ) {\n\n\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\trenderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );\n\t\t\t\t\trenderTarget.texture.pmremVersion = texture.pmremVersion;\n\n\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\n\n\t\t\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\t\t\trenderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\n\t\t\t\t\t\t\trenderTarget.texture.pmremVersion = texture.pmremVersion;\n\n\t\t\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction isCubeTextureComplete( image ) {\n\n\t\tlet count = 0;\n\t\tconst length = 6;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t\t}\n\n\t\treturn count === length;\n\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemapUV = cubeUVmaps.get( texture );\n\n\t\tif ( cubemapUV !== undefined ) {\n\n\t\t\tcubeUVmaps.delete( texture );\n\t\t\tcubemapUV.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubeUVmaps = new WeakMap();\n\n\t\tif ( pmremGenerator !== null ) {\n\n\t\t\tpmremGenerator.dispose();\n\t\t\tpmremGenerator = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLExtensions( gl ) {\n\n\tconst extensions = {};\n\n\tfunction getExtension( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tlet extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t}\n\n\treturn {\n\n\t\thas: function ( name ) {\n\n\t\t\treturn getExtension( name ) !== null;\n\n\t\t},\n\n\t\tinit: function () {\n\n\t\t\tgetExtension( 'EXT_color_buffer_float' );\n\t\t\tgetExtension( 'WEBGL_clip_cull_distance' );\n\t\t\tgetExtension( 'OES_texture_float_linear' );\n\t\t\tgetExtension( 'EXT_color_buffer_half_float' );\n\t\t\tgetExtension( 'WEBGL_multisampled_render_to_texture' );\n\t\t\tgetExtension( 'WEBGL_render_shared_exponent' );\n\n\t\t},\n\n\t\tget: function ( name ) {\n\n\t\t\tconst extension = getExtension( name );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\twarnOnce( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\tconst geometries = {};\n\tconst wireframeAttributes = new WeakMap();\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tconst geometry = event.target;\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tattributes.remove( geometry.index );\n\n\t\t}\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tattributes.remove( geometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\tconst attribute = wireframeAttributes.get( geometry );\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\twireframeAttributes.delete( geometry );\n\n\t\t}\n\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tgeometries[ geometry.id ] = true;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t}\n\n\tfunction updateWireframeAttribute( geometry ) {\n\n\t\tconst indices = [];\n\n\t\tconst geometryIndex = geometry.index;\n\t\tconst geometryPosition = geometry.attributes.position;\n\t\tlet version = 0;\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tconst array = geometryIndex.array;\n\t\t\tversion = geometryIndex.version;\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = array[ i + 0 ];\n\t\t\t\tconst b = array[ i + 1 ];\n\t\t\t\tconst c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else if ( geometryPosition !== undefined ) {\n\n\t\t\tconst array = geometryPosition.array;\n\t\t\tversion = geometryPosition.version;\n\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tconst a = i + 0;\n\t\t\t\tconst b = i + 1;\n\t\t\t\tconst c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\tattribute.version = version;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t//\n\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\n\n\t\t//\n\n\t\twireframeAttributes.set( geometry, attribute );\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( currentAttribute ) {\n\n\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t}\n\n\t\treturn wireframeAttributes.get( geometry );\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info ) {\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tlet type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tgl.drawElementsInstanced( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\tfunction renderMultiDraw( starts, counts, drawCount ) {\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\n\t\textension.multiDrawElementsWEBGL( mode, counts, 0, type, starts, 0, drawCount );\n\n\t\tlet elementCount = 0;\n\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\telementCount += counts[ i ];\n\n\t\t}\n\n\t\tinfo.update( elementCount, mode, 1 );\n\n\n\t}\n\n\tfunction renderMultiDrawInstances( starts, counts, drawCount, primcount ) {\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tfor ( let i = 0; i < starts.length; i ++ ) {\n\n\t\t\t\trenderInstances( starts[ i ] / bytesPerElement, counts[ i ], primcount[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\textension.multiDrawElementsInstancedWEBGL( mode, counts, 0, type, starts, 0, primcount, 0, drawCount );\n\n\t\t\tlet elementCount = 0;\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\telementCount += counts[ i ] * primcount[ i ];\n\n\t\t\t}\n\n\t\t\tinfo.update( elementCount, mode, 1 );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\tthis.renderMultiDraw = renderMultiDraw;\n\tthis.renderMultiDrawInstances = renderMultiDrawInstances;\n\n}\n\nfunction WebGLInfo( gl ) {\n\n\tconst memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tconst render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase gl.TRIANGLES:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINES:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINE_STRIP:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINE_LOOP:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase gl.POINTS:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\nfunction WebGLMorphtargets( gl, capabilities, textures ) {\n\n\tconst morphTextures = new WeakMap();\n\tconst morph = new Vector4();\n\n\tfunction update( object, geometry, program ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\t// the following encodes morph targets into an array of data textures. Each layer represents a single morph target.\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\tlet entry = morphTextures.get( geometry );\n\n\t\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\n\n\t\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\n\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\t\t\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\n\n\t\t\tconst morphTargets = geometry.morphAttributes.position || [];\n\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\t\t\tconst morphColors = geometry.morphAttributes.color || [];\n\n\t\t\tlet vertexDataCount = 0;\n\n\t\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\n\t\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\n\t\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\n\n\t\t\tlet width = geometry.attributes.position.count * vertexDataCount;\n\t\t\tlet height = 1;\n\n\t\t\tif ( width > capabilities.maxTextureSize ) {\n\n\t\t\t\theight = Math.ceil( width / capabilities.maxTextureSize );\n\t\t\t\twidth = capabilities.maxTextureSize;\n\n\t\t\t}\n\n\t\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\n\n\t\t\tconst texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\n\t\t\ttexture.type = FloatType;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\t// fill buffer\n\n\t\t\tconst vertexDataStride = vertexDataCount * 4;\n\n\t\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\n\n\t\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\t\tconst morphNormal = morphNormals[ i ];\n\t\t\t\tconst morphColor = morphColors[ i ];\n\n\t\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\t\tif ( hasMorphPosition === true ) {\n\n\t\t\t\t\t\tmorph.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\t\tbuffer[ offset + stride + 0 ] = morph.x;\n\t\t\t\t\t\tbuffer[ offset + stride + 1 ] = morph.y;\n\t\t\t\t\t\tbuffer[ offset + stride + 2 ] = morph.z;\n\t\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\t\tmorph.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\t\tbuffer[ offset + stride + 4 ] = morph.x;\n\t\t\t\t\t\tbuffer[ offset + stride + 5 ] = morph.y;\n\t\t\t\t\t\tbuffer[ offset + stride + 6 ] = morph.z;\n\t\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasMorphColors === true ) {\n\n\t\t\t\t\t\tmorph.fromBufferAttribute( morphColor, j );\n\n\t\t\t\t\t\tbuffer[ offset + stride + 8 ] = morph.x;\n\t\t\t\t\t\tbuffer[ offset + stride + 9 ] = morph.y;\n\t\t\t\t\t\tbuffer[ offset + stride + 10 ] = morph.z;\n\t\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tentry = {\n\t\t\t\tcount: morphTargetsCount,\n\t\t\t\ttexture: texture,\n\t\t\t\tsize: new Vector2( width, height )\n\t\t\t};\n\n\t\t\tmorphTextures.set( geometry, entry );\n\n\t\t\tfunction disposeTexture() {\n\n\t\t\t\ttexture.dispose();\n\n\t\t\t\tmorphTextures.delete( geometry );\n\n\t\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\n\n\t\t\t}\n\n\t\t\tgeometry.addEventListener( 'dispose', disposeTexture );\n\n\t\t}\n\n\t\t//\n\t\tif ( object.isInstancedMesh === true && object.morphTexture !== null ) {\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTexture', object.morphTexture, textures );\n\n\t\t} else {\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\n\n\t\t}\n\n\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\n\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\nfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\tlet updateMap = new WeakMap();\n\n\tfunction update( object ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\tconst geometry = object.geometry;\n\t\tconst buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\tif ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\n\n\t\t\t\tobject.addEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\t\t}\n\n\t\t\tif ( updateMap.get( object ) !== frame ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, gl.ARRAY_BUFFER );\n\n\t\t\t\tif ( object.instanceColor !== null ) {\n\n\t\t\t\t\tattributes.update( object.instanceColor, gl.ARRAY_BUFFER );\n\n\t\t\t\t}\n\n\t\t\t\tupdateMap.set( object, frame );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tconst skeleton = object.skeleton;\n\n\t\t\tif ( updateMap.get( skeleton ) !== frame ) {\n\n\t\t\t\tskeleton.update();\n\n\t\t\t\tupdateMap.set( skeleton, frame );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateMap = new WeakMap();\n\n\t}\n\n\tfunction onInstancedMeshDispose( event ) {\n\n\t\tconst instancedMesh = event.target;\n\n\t\tinstancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\tattributes.remove( instancedMesh.instanceMatrix );\n\n\t\tif ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\n/**\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\n\nconst emptyTexture = /*@__PURE__*/ new Texture();\n\nconst emptyShadowTexture = /*@__PURE__*/ new DepthTexture( 1, 1 );\n\nconst emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();\nconst empty3dTexture = /*@__PURE__*/ new Data3DTexture();\nconst emptyCubeTexture = /*@__PURE__*/ new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nconst arrayCacheF32 = [];\nconst arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nconst mat4array = new Float32Array( 16 );\nconst mat3array = new Float32Array( 9 );\nconst mat2array = new Float32Array( 4 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tconst firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tconst n = nBlocks * blockSize;\n\tlet r = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\nfunction arraysEqual( a, b ) {\n\n\tif ( a.length !== b.length ) return false;\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction copyArray( a, b ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ i ] = b[ i ];\n\n\t}\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( textures, n ) {\n\n\tlet r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t}\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1f( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\tcache[ 0 ] = v.r;\n\t\t\tcache[ 1 ] = v.g;\n\t\t\tcache[ 2 ] = v.b;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single matrix (from flat array or THREE.MatrixN)\n\nfunction setValueM2( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat2array.set( elements );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM3( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat3array.set( elements );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM4( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat4array.set( elements );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\n// Single integer / boolean\n\nfunction setValueV1i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1i( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single integer / boolean vector (from flat array or THREE.VectorN)\n\nfunction setValueV2i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2i( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3i( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4i( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single unsigned integer\n\nfunction setValueV1ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1ui( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single unsigned integer vector (from flat array or THREE.VectorN)\n\nfunction setValueV2ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2ui( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3ui( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4ui( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\tlet emptyTexture2D;\n\n\tif ( this.type === gl.SAMPLER_2D_SHADOW ) {\n\n\t\temptyShadowTexture.compareFunction = LessEqualCompare; // #28670\n\t\temptyTexture2D = emptyShadowTexture;\n\n\t} else {\n\n\t\temptyTexture2D = emptyTexture;\n\n\t}\n\n\ttextures.setTexture2D( v || emptyTexture2D, unit );\n\n}\n\nfunction setValueT3D1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture3D( v || empty3dTexture, unit );\n\n}\n\nfunction setValueT6( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTextureCube( v || emptyCubeTexture, unit );\n\n}\n\nfunction setValueT2DArray1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2DArray( v || emptyArrayTexture, unit );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\tcase 0x1405: return setValueV1ui; // UINT\n\t\tcase 0x8dc6: return setValueV2ui; // _VEC2\n\t\tcase 0x8dc7: return setValueV3ui; // _VEC3\n\t\tcase 0x8dc8: return setValueV4ui; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3D1;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArray1;\n\n\t}\n\n}\n\n\n// Array of scalars\n\nfunction setValueV1fArray( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\n\n// Array of vectors (from flat array or array of THREE.VectorN)\n\nfunction setValueV2fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 2 );\n\n\tgl.uniform2fv( this.addr, data );\n\n}\n\nfunction setValueV3fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 3 );\n\n\tgl.uniform3fv( this.addr, data );\n\n}\n\nfunction setValueV4fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniform4fv( this.addr, data );\n\n}\n\n// Array of matrices (from flat array or array of THREE.MatrixN)\n\nfunction setValueM2Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniformMatrix2fv( this.addr, false, data );\n\n}\n\nfunction setValueM3Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 9 );\n\n\tgl.uniformMatrix3fv( this.addr, false, data );\n\n}\n\nfunction setValueM4Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 16 );\n\n\tgl.uniformMatrix4fv( this.addr, false, data );\n\n}\n\n// Array of integer / boolean\n\nfunction setValueV1iArray( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of integer / boolean vectors (from flat array)\n\nfunction setValueV2iArray( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValueV3iArray( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValueV4iArray( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Array of unsigned integer\n\nfunction setValueV1uiArray( gl, v ) {\n\n\tgl.uniform1uiv( this.addr, v );\n\n}\n\n// Array of unsigned integer vectors (from flat array)\n\nfunction setValueV2uiArray( gl, v ) {\n\n\tgl.uniform2uiv( this.addr, v );\n\n}\n\nfunction setValueV3uiArray( gl, v ) {\n\n\tgl.uniform3uiv( this.addr, v );\n\n}\n\nfunction setValueV4uiArray( gl, v ) {\n\n\tgl.uniform4uiv( this.addr, v );\n\n}\n\n\n// Array of textures (2D / 3D / Cube / 2DArray)\n\nfunction setValueT1Array( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT3DArray( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6Array( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT2DArrayArray( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );\n\n\t}\n\n}\n\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\tcase 0x1405: return setValueV1uiArray; // UINT\n\t\tcase 0x8dc6: return setValueV2uiArray; // _VEC2\n\t\tcase 0x8dc7: return setValueV3uiArray; // _VEC3\n\t\tcase 0x8dc8: return setValueV4uiArray; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1Array;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3DArray;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6Array;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArrayArray;\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nclass SingleUniform {\n\n\tconstructor( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.type = activeInfo.type;\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n}\n\nclass PureArrayUniform {\n\n\tconstructor( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.type = activeInfo.type;\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n}\n\nclass StructuredUniform {\n\n\tconstructor( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tsetValue( gl, value, textures ) {\n\n\t\tconst seq = this.seq;\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t}\n\n}\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tconst path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\twhile ( true ) {\n\n\t\tconst match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\tlet id = match[ 1 ];\n\t\tconst idIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tconst map = container.map;\n\t\t\tlet next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nclass WebGLUniforms {\n\n\tconstructor( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tconst n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\tfor ( let i = 0; i < n; ++ i ) {\n\n\t\t\tconst info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tsetValue( gl, name, value, textures ) {\n\n\t\tconst u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, textures );\n\n\t}\n\n\tsetOptional( gl, object, name ) {\n\n\t\tconst v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t}\n\n\tstatic upload( gl, seq, values, textures ) {\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic seqWithValue( seq, values ) {\n\n\t\tconst r = [];\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n}\n\nfunction WebGLShader( gl, type, string ) {\n\n\tconst shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\treturn shader;\n\n}\n\n// From https://www.khronos.org/registry/webgl/extensions/KHR_parallel_shader_compile/\nconst COMPLETION_STATUS_KHR = 0x91B1;\n\nlet programIdCount = 0;\n\nfunction handleSource( string, errorLine ) {\n\n\tconst lines = string.split( '\\n' );\n\tconst lines2 = [];\n\n\tconst from = Math.max( errorLine - 6, 0 );\n\tconst to = Math.min( errorLine + 6, lines.length );\n\n\tfor ( let i = from; i < to; i ++ ) {\n\n\t\tconst line = i + 1;\n\t\tlines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );\n\n\t}\n\n\treturn lines2.join( '\\n' );\n\n}\n\nconst _m0 = /*@__PURE__*/ new Matrix3();\n\nfunction getEncodingComponents( colorSpace ) {\n\n\tColorManagement._getMatrix( _m0, ColorManagement.workingColorSpace, colorSpace );\n\n\tconst encodingMatrix = `mat3( ${ _m0.elements.map( ( v ) => v.toFixed( 4 ) ) } )`;\n\n\tswitch ( ColorManagement.getTransfer( colorSpace ) ) {\n\n\t\tcase LinearTransfer:\n\t\t\treturn [ encodingMatrix, 'LinearTransferOETF' ];\n\n\t\tcase SRGBTransfer:\n\t\t\treturn [ encodingMatrix, 'sRGBTransferOETF' ];\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported color space: ', colorSpace );\n\t\t\treturn [ encodingMatrix, 'LinearTransferOETF' ];\n\n\t}\n\n}\n\nfunction getShaderErrors( gl, shader, type ) {\n\n\tconst status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );\n\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\tif ( status && errors === '' ) return '';\n\n\tconst errorMatches = /ERROR: 0:(\\d+)/.exec( errors );\n\tif ( errorMatches ) {\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tconst errorLine = parseInt( errorMatches[ 1 ] );\n\t\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + handleSource( gl.getShaderSource( shader ), errorLine );\n\n\t} else {\n\n\t\treturn errors;\n\n\t}\n\n}\n\nfunction getTexelEncodingFunction( functionName, colorSpace ) {\n\n\tconst components = getEncodingComponents( colorSpace );\n\n\treturn [\n\n\t\t`vec4 ${functionName}( vec4 value ) {`,\n\n\t\t`\treturn ${components[ 1 ]}( vec4( value.rgb * ${components[ 0 ]}, value.a ) );`,\n\n\t\t'}',\n\n\t].join( '\\n' );\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tlet toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'Cineon';\n\t\t\tbreak;\n\n\t\tcase ACESFilmicToneMapping:\n\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\tbreak;\n\n\t\tcase AgXToneMapping:\n\t\t\ttoneMappingName = 'AgX';\n\t\t\tbreak;\n\n\t\tcase NeutralToneMapping:\n\t\t\ttoneMappingName = 'Neutral';\n\t\t\tbreak;\n\n\t\tcase CustomToneMapping:\n\t\t\ttoneMappingName = 'Custom';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\ttoneMappingName = 'Linear';\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nconst _v0 = /*@__PURE__*/ new Vector3();\n\nfunction getLuminanceFunction() {\n\n\tColorManagement.getLuminanceCoefficients( _v0 );\n\n\tconst r = _v0.x.toFixed( 4 );\n\tconst g = _v0.y.toFixed( 4 );\n\tconst b = _v0.z.toFixed( 4 );\n\n\treturn [\n\n\t\t'float luminance( const in vec3 rgb ) {',\n\n\t\t`\tconst vec3 weights = vec3( ${ r }, ${ g }, ${ b } );`,\n\n\t\t'\treturn dot( weights, rgb );',\n\n\t\t'}'\n\n\t].join( '\\n' );\n\n}\n\nfunction generateVertexExtensions( parameters ) {\n\n\tconst chunks = [\n\t\tparameters.extensionClipCullDistance ? '#extension GL_ANGLE_clip_cull_distance : require' : '',\n\t\tparameters.extensionMultiDraw ? '#extension GL_ANGLE_multi_draw : require' : '',\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tconst chunks = [];\n\n\tfor ( const name in defines ) {\n\n\t\tconst value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tconst attributes = {};\n\n\tconst n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\tfor ( let i = 0; i < n; i ++ ) {\n\n\t\tconst info = gl.getActiveAttrib( program, i );\n\t\tconst name = info.name;\n\n\t\tlet locationSize = 1;\n\t\tif ( info.type === gl.FLOAT_MAT2 ) locationSize = 2;\n\t\tif ( info.type === gl.FLOAT_MAT3 ) locationSize = 3;\n\t\tif ( info.type === gl.FLOAT_MAT4 ) locationSize = 4;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = {\n\t\t\ttype: info.type,\n\t\t\tlocation: gl.getAttribLocation( program, name ),\n\t\t\tlocationSize: locationSize\n\t\t};\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\tconst numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )\n\t\t.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\n// Resolve Includes\n\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\nfunction resolveIncludes( string ) {\n\n\treturn string.replace( includePattern, includeReplacer );\n\n}\n\nconst shaderChunkMap = new Map();\n\nfunction includeReplacer( match, include ) {\n\n\tlet string = ShaderChunk[ include ];\n\n\tif ( string === undefined ) {\n\n\t\tconst newInclude = shaderChunkMap.get( include );\n\n\t\tif ( newInclude !== undefined ) {\n\n\t\t\tstring = ShaderChunk[ newInclude ];\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Shader chunk \"%s\" has been deprecated. Use \"%s\" instead.', include, newInclude );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t}\n\n\treturn resolveIncludes( string );\n\n}\n\n// Unroll Loops\n\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\nfunction unrollLoops( string ) {\n\n\treturn string.replace( unrollLoopPattern, loopReplacer );\n\n}\n\nfunction loopReplacer( match, start, end, snippet ) {\n\n\tlet string = '';\n\n\tfor ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\tstring += snippet\n\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t}\n\n\treturn string;\n\n}\n\n//\n\nfunction generatePrecision( parameters ) {\n\n\tlet precisionstring = `precision ${parameters.precision} float;\n\tprecision ${parameters.precision} int;\n\tprecision ${parameters.precision} sampler2D;\n\tprecision ${parameters.precision} samplerCube;\n\tprecision ${parameters.precision} sampler3D;\n\tprecision ${parameters.precision} sampler2DArray;\n\tprecision ${parameters.precision} sampler2DShadow;\n\tprecision ${parameters.precision} samplerCubeShadow;\n\tprecision ${parameters.precision} sampler2DArrayShadow;\n\tprecision ${parameters.precision} isampler2D;\n\tprecision ${parameters.precision} isampler3D;\n\tprecision ${parameters.precision} isamplerCube;\n\tprecision ${parameters.precision} isampler2DArray;\n\tprecision ${parameters.precision} usampler2D;\n\tprecision ${parameters.precision} usampler3D;\n\tprecision ${parameters.precision} usamplerCube;\n\tprecision ${parameters.precision} usampler2DArray;\n\t`;\n\n\tif ( parameters.precision === 'highp' ) {\n\n\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\n\t} else if ( parameters.precision === 'mediump' ) {\n\n\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\n\t} else if ( parameters.precision === 'lowp' ) {\n\n\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\n\t}\n\n\treturn precisionstring;\n\n}\n\nfunction generateShadowMapTypeDefine( parameters ) {\n\n\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t}\n\n\treturn shadowMapTypeDefine;\n\n}\n\nfunction generateEnvMapTypeDefine( parameters ) {\n\n\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapTypeDefine;\n\n}\n\nfunction generateEnvMapModeDefine( parameters ) {\n\n\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeRefractionMapping:\n\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapModeDefine;\n\n}\n\nfunction generateEnvMapBlendingDefine( parameters ) {\n\n\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapBlendingDefine;\n\n}\n\nfunction generateCubeUVSize( parameters ) {\n\n\tconst imageHeight = parameters.envMapCubeUVHeight;\n\n\tif ( imageHeight === null ) return null;\n\n\tconst maxMip = Math.log2( imageHeight ) - 2;\n\n\tconst texelHeight = 1.0 / imageHeight;\n\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\n\n\treturn { texelWidth, texelHeight, maxMip };\n\n}\n\nfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t// TODO Send this event to Three.js DevTools\n\t// console.log( 'WebGLProgram', cacheKey );\n\n\tconst gl = renderer.getContext();\n\n\tconst defines = parameters.defines;\n\n\tlet vertexShader = parameters.vertexShader;\n\tlet fragmentShader = parameters.fragmentShader;\n\n\tconst shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\tconst envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\tconst envMapModeDefine = generateEnvMapModeDefine( parameters );\n\tconst envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\tconst envMapCubeUVSize = generateCubeUVSize( parameters );\n\n\tconst customVertexExtensions = generateVertexExtensions( parameters );\n\n\tconst customDefines = generateDefines( defines );\n\n\tconst program = gl.createProgram();\n\n\tlet prefixVertex, prefixFragment;\n\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\tif ( parameters.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.extensionClipCullDistance ? '#define USE_CLIP_DISTANCE' : '',\n\t\t\tparameters.batching ? '#define USE_BATCHING' : '',\n\t\t\tparameters.batchingColor ? '#define USE_BATCHING_COLOR' : '',\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n\t\t\tparameters.instancingMorph ? '#define USE_INSTANCING_MORPH' : '',\n\n\t\t\tparameters.useFog && parameters.fog ? '#define USE_FOG' : '',\n\t\t\tparameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',\n\t\t\tparameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',\n\t\t\tparameters.displacementMap ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\n\t\t\tparameters.anisotropy ? '#define USE_ANISOTROPY' : '',\n\t\t\tparameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',\n\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaHash ? '#define USE_ALPHAHASH' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',\n\n\t\t\t//\n\n\t\t\tparameters.mapUv ? '#define MAP_UV ' + parameters.mapUv : '',\n\t\t\tparameters.alphaMapUv ? '#define ALPHAMAP_UV ' + parameters.alphaMapUv : '',\n\t\t\tparameters.lightMapUv ? '#define LIGHTMAP_UV ' + parameters.lightMapUv : '',\n\t\t\tparameters.aoMapUv ? '#define AOMAP_UV ' + parameters.aoMapUv : '',\n\t\t\tparameters.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + parameters.emissiveMapUv : '',\n\t\t\tparameters.bumpMapUv ? '#define BUMPMAP_UV ' + parameters.bumpMapUv : '',\n\t\t\tparameters.normalMapUv ? '#define NORMALMAP_UV ' + parameters.normalMapUv : '',\n\t\t\tparameters.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + parameters.displacementMapUv : '',\n\n\t\t\tparameters.metalnessMapUv ? '#define METALNESSMAP_UV ' + parameters.metalnessMapUv : '',\n\t\t\tparameters.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + parameters.roughnessMapUv : '',\n\n\t\t\tparameters.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + parameters.anisotropyMapUv : '',\n\n\t\t\tparameters.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + parameters.clearcoatMapUv : '',\n\t\t\tparameters.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + parameters.clearcoatNormalMapUv : '',\n\t\t\tparameters.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + parameters.clearcoatRoughnessMapUv : '',\n\n\t\t\tparameters.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + parameters.iridescenceMapUv : '',\n\t\t\tparameters.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + parameters.iridescenceThicknessMapUv : '',\n\n\t\t\tparameters.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + parameters.sheenColorMapUv : '',\n\t\t\tparameters.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + parameters.sheenRoughnessMapUv : '',\n\n\t\t\tparameters.specularMapUv ? '#define SPECULARMAP_UV ' + parameters.specularMapUv : '',\n\t\t\tparameters.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + parameters.specularColorMapUv : '',\n\t\t\tparameters.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + parameters.specularIntensityMapUv : '',\n\n\t\t\tparameters.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + parameters.transmissionMapUv : '',\n\t\t\tparameters.thicknessMapUv ? '#define THICKNESSMAP_UV ' + parameters.thicknessMapUv : '',\n\n\t\t\t//\n\n\t\t\tparameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUv1s ? '#define USE_UV1' : '',\n\t\t\tparameters.vertexUv2s ? '#define USE_UV2' : '',\n\t\t\tparameters.vertexUv3s ? '#define USE_UV3' : '',\n\n\t\t\tparameters.pointsUvs ? '#define USE_POINTS_UV' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t( parameters.morphColors ) ? '#define USE_MORPHCOLORS' : '',\n\t\t\t( parameters.morphTargetsCount > 0 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',\n\t\t\t( parameters.morphTargetsCount > 0 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\tparameters.reverseDepthBuffer ? '#define USE_REVERSEDEPTHBUF' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t'\tattribute mat4 instanceMatrix;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_INSTANCING_COLOR',\n\n\t\t\t'\tattribute vec3 instanceColor;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_INSTANCING_MORPH',\n\n\t\t\t'\tuniform sampler2D morphTexture;',\n\n\t\t\t'#endif',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_UV1',\n\n\t\t\t'\tattribute vec2 uv1;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_UV2',\n\n\t\t\t'\tattribute vec2 uv2;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_UV3',\n\n\t\t\t'\tattribute vec2 uv3;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if defined( USE_COLOR_ALPHA )',\n\n\t\t\t'\tattribute vec4 color;',\n\n\t\t\t'#elif defined( USE_COLOR )',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.useFog && parameters.fog ? '#define USE_FOG' : '',\n\t\t\tparameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.alphaToCoverage ? '#define ALPHA_TO_COVERAGE' : '',\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',\n\t\t\tparameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\n\t\t\tparameters.anisotropy ? '#define USE_ANISOTROPY' : '',\n\t\t\tparameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',\n\n\t\t\tparameters.clearcoat ? '#define USE_CLEARCOAT' : '',\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.dispersion ? '#define USE_DISPERSION' : '',\n\n\t\t\tparameters.iridescence ? '#define USE_IRIDESCENCE' : '',\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaTest ? '#define USE_ALPHATEST' : '',\n\t\t\tparameters.alphaHash ? '#define USE_ALPHAHASH' : '',\n\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors || parameters.instancingColor || parameters.batchingColor ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUv1s ? '#define USE_UV1' : '',\n\t\t\tparameters.vertexUv2s ? '#define USE_UV2' : '',\n\t\t\tparameters.vertexUv3s ? '#define USE_UV3' : '',\n\n\t\t\tparameters.pointsUvs ? '#define USE_POINTS_UV' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',\n\n\t\t\tparameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',\n\t\t\tparameters.decodeVideoTextureEmissive ? '#define DECODE_VIDEO_TEXTURE_EMISSIVE' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\tparameters.reverseDepthBuffer ? '#define USE_REVERSEDEPTHBUF' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\t\t\tparameters.opaque ? '#define OPAQUE' : '',\n\n\t\t\tShaderChunk[ 'colorspace_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputColorSpace ),\n\t\t\tgetLuminanceFunction(),\n\n\t\t\tparameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = resolveIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = resolveIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tif ( parameters.isRawShaderMaterial !== true ) {\n\n\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n\t\tversionString = '#version 300 es\\n';\n\n\t\tprefixVertex = [\n\t\t\tcustomVertexExtensions,\n\t\t\t'#define attribute in',\n\t\t\t'#define varying out',\n\t\t\t'#define texture2D texture'\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\tprefixFragment = [\n\t\t\t'#define varying in',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t'#define texture2D texture',\n\t\t\t'#define textureCube texture',\n\t\t\t'#define texture2DProj textureProj',\n\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t}\n\n\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tconst glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\tconst glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\tfunction onFirstUse( self ) {\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tconst programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tconst vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tconst fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tlet runnable = true;\n\t\t\tlet haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tif ( typeof renderer.debug.onShaderError === 'function' ) {\n\n\t\t\t\t\trenderer.debug.onShaderError( gl, program, glVertexShader, glFragmentShader );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// default error reporting\n\n\t\t\t\t\tconst vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\t\tconst fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + '\\n\\n' +\n\t\t\t\t\t\t'Material Name: ' + self.name + '\\n' +\n\t\t\t\t\t\t'Material Type: ' + self.type + '\\n\\n' +\n\t\t\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\t\t\tfragmentErrors\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tself.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Clean up\n\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t}\n\n\t// set up caching for uniform locations\n\n\tlet cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t// Populates cachedUniforms and cachedAttributes\n\t\t\tonFirstUse( this );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tlet cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t// Populates cachedAttributes and cachedUniforms\n\t\t\tonFirstUse( this );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// indicate when the program is ready to be used. if the KHR_parallel_shader_compile extension isn't supported,\n\t// flag the program as ready immediately. It may cause a stall when it's first used.\n\n\tlet programReady = ( parameters.rendererExtensionParallelShaderCompile === false );\n\n\tthis.isReady = function () {\n\n\t\tif ( programReady === false ) {\n\n\t\t\tprogramReady = gl.getProgramParameter( program, COMPLETION_STATUS_KHR );\n\n\t\t}\n\n\t\treturn programReady;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t//\n\n\tthis.type = parameters.shaderType;\n\tthis.name = parameters.shaderName;\n\tthis.id = programIdCount ++;\n\tthis.cacheKey = cacheKey;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\nlet _id = 0;\n\nclass WebGLShaderCache {\n\n\tconstructor() {\n\n\t\tthis.shaderCache = new Map();\n\t\tthis.materialCache = new Map();\n\n\t}\n\n\tupdate( material ) {\n\n\t\tconst vertexShader = material.vertexShader;\n\t\tconst fragmentShader = material.fragmentShader;\n\n\t\tconst vertexShaderStage = this._getShaderStage( vertexShader );\n\t\tconst fragmentShaderStage = this._getShaderStage( fragmentShader );\n\n\t\tconst materialShaders = this._getShaderCacheForMaterial( material );\n\n\t\tif ( materialShaders.has( vertexShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( vertexShaderStage );\n\t\t\tvertexShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\tif ( materialShaders.has( fragmentShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( fragmentShaderStage );\n\t\t\tfragmentShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( material ) {\n\n\t\tconst materialShaders = this.materialCache.get( material );\n\n\t\tfor ( const shaderStage of materialShaders ) {\n\n\t\t\tshaderStage.usedTimes --;\n\n\t\t\tif ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );\n\n\t\t}\n\n\t\tthis.materialCache.delete( material );\n\n\t\treturn this;\n\n\t}\n\n\tgetVertexShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.vertexShader ).id;\n\n\t}\n\n\tgetFragmentShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.fragmentShader ).id;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shaderCache.clear();\n\t\tthis.materialCache.clear();\n\n\t}\n\n\t_getShaderCacheForMaterial( material ) {\n\n\t\tconst cache = this.materialCache;\n\t\tlet set = cache.get( material );\n\n\t\tif ( set === undefined ) {\n\n\t\t\tset = new Set();\n\t\t\tcache.set( material, set );\n\n\t\t}\n\n\t\treturn set;\n\n\t}\n\n\t_getShaderStage( code ) {\n\n\t\tconst cache = this.shaderCache;\n\t\tlet stage = cache.get( code );\n\n\t\tif ( stage === undefined ) {\n\n\t\t\tstage = new WebGLShaderStage( code );\n\t\t\tcache.set( code, stage );\n\n\t\t}\n\n\t\treturn stage;\n\n\t}\n\n}\n\nclass WebGLShaderStage {\n\n\tconstructor( code ) {\n\n\t\tthis.id = _id ++;\n\n\t\tthis.code = code;\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\n\n\tconst _programLayers = new Layers();\n\tconst _customShaders = new WebGLShaderCache();\n\tconst _activeChannels = new Set();\n\tconst programs = [];\n\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tconst SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;\n\n\tlet precision = capabilities.precision;\n\n\tconst shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tfunction getChannel( value ) {\n\n\t\t_activeChannels.add( value );\n\n\t\tif ( value === 0 ) return 'uv';\n\n\t\treturn `uv${ value }`;\n\n\t}\n\n\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\tconst fog = scene.fog;\n\t\tconst geometry = object.geometry;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\tlet morphTextureStride = 0;\n\n\t\tif ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;\n\t\tif ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;\n\t\tif ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;\n\n\t\t//\n\n\t\tlet vertexShader, fragmentShader;\n\t\tlet customVertexShaderID, customFragmentShaderID;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\n\t\t\tvertexShader = shader.vertexShader;\n\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t} else {\n\n\t\t\tvertexShader = material.vertexShader;\n\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t\t_customShaders.update( material );\n\n\t\t\tcustomVertexShaderID = _customShaders.getVertexShaderID( material );\n\t\t\tcustomFragmentShaderID = _customShaders.getFragmentShaderID( material );\n\n\t\t}\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst reverseDepthBuffer = renderer.state.buffers.depth.getReversed();\n\n\t\tconst IS_INSTANCEDMESH = object.isInstancedMesh === true;\n\t\tconst IS_BATCHEDMESH = object.isBatchedMesh === true;\n\n\t\tconst HAS_MAP = !! material.map;\n\t\tconst HAS_MATCAP = !! material.matcap;\n\t\tconst HAS_ENVMAP = !! envMap;\n\t\tconst HAS_AOMAP = !! material.aoMap;\n\t\tconst HAS_LIGHTMAP = !! material.lightMap;\n\t\tconst HAS_BUMPMAP = !! material.bumpMap;\n\t\tconst HAS_NORMALMAP = !! material.normalMap;\n\t\tconst HAS_DISPLACEMENTMAP = !! material.displacementMap;\n\t\tconst HAS_EMISSIVEMAP = !! material.emissiveMap;\n\n\t\tconst HAS_METALNESSMAP = !! material.metalnessMap;\n\t\tconst HAS_ROUGHNESSMAP = !! material.roughnessMap;\n\n\t\tconst HAS_ANISOTROPY = material.anisotropy > 0;\n\t\tconst HAS_CLEARCOAT = material.clearcoat > 0;\n\t\tconst HAS_DISPERSION = material.dispersion > 0;\n\t\tconst HAS_IRIDESCENCE = material.iridescence > 0;\n\t\tconst HAS_SHEEN = material.sheen > 0;\n\t\tconst HAS_TRANSMISSION = material.transmission > 0;\n\n\t\tconst HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !! material.anisotropyMap;\n\n\t\tconst HAS_CLEARCOATMAP = HAS_CLEARCOAT && !! material.clearcoatMap;\n\t\tconst HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !! material.clearcoatNormalMap;\n\t\tconst HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !! material.clearcoatRoughnessMap;\n\n\t\tconst HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !! material.iridescenceMap;\n\t\tconst HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !! material.iridescenceThicknessMap;\n\n\t\tconst HAS_SHEEN_COLORMAP = HAS_SHEEN && !! material.sheenColorMap;\n\t\tconst HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !! material.sheenRoughnessMap;\n\n\t\tconst HAS_SPECULARMAP = !! material.specularMap;\n\t\tconst HAS_SPECULAR_COLORMAP = !! material.specularColorMap;\n\t\tconst HAS_SPECULAR_INTENSITYMAP = !! material.specularIntensityMap;\n\n\t\tconst HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !! material.transmissionMap;\n\t\tconst HAS_THICKNESSMAP = HAS_TRANSMISSION && !! material.thicknessMap;\n\n\t\tconst HAS_GRADIENTMAP = !! material.gradientMap;\n\n\t\tconst HAS_ALPHAMAP = !! material.alphaMap;\n\n\t\tconst HAS_ALPHATEST = material.alphaTest > 0;\n\n\t\tconst HAS_ALPHAHASH = !! material.alphaHash;\n\n\t\tconst HAS_EXTENSIONS = !! material.extensions;\n\n\t\tlet toneMapping = NoToneMapping;\n\n\t\tif ( material.toneMapped ) {\n\n\t\t\tif ( currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true ) {\n\n\t\t\t\ttoneMapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst parameters = {\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderType: material.type,\n\t\t\tshaderName: material.name,\n\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tcustomVertexShaderID: customVertexShaderID,\n\t\t\tcustomFragmentShaderID: customFragmentShaderID,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\tglslVersion: material.glslVersion,\n\n\t\t\tprecision: precision,\n\n\t\t\tbatching: IS_BATCHEDMESH,\n\t\t\tbatchingColor: IS_BATCHEDMESH && object._colorsTexture !== null,\n\t\t\tinstancing: IS_INSTANCEDMESH,\n\t\t\tinstancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,\n\t\t\tinstancingMorph: IS_INSTANCEDMESH && object.morphTexture !== null,\n\n\t\t\tsupportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,\n\t\t\toutputColorSpace: ( currentRenderTarget === null ) ? renderer.outputColorSpace : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace ),\n\t\t\talphaToCoverage: !! material.alphaToCoverage,\n\n\t\t\tmap: HAS_MAP,\n\t\t\tmatcap: HAS_MATCAP,\n\t\t\tenvMap: HAS_ENVMAP,\n\t\t\tenvMapMode: HAS_ENVMAP && envMap.mapping,\n\t\t\tenvMapCubeUVHeight: envMapCubeUVHeight,\n\t\t\taoMap: HAS_AOMAP,\n\t\t\tlightMap: HAS_LIGHTMAP,\n\t\t\tbumpMap: HAS_BUMPMAP,\n\t\t\tnormalMap: HAS_NORMALMAP,\n\t\t\tdisplacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,\n\t\t\temissiveMap: HAS_EMISSIVEMAP,\n\n\t\t\tnormalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,\n\t\t\tnormalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,\n\n\t\t\tmetalnessMap: HAS_METALNESSMAP,\n\t\t\troughnessMap: HAS_ROUGHNESSMAP,\n\n\t\t\tanisotropy: HAS_ANISOTROPY,\n\t\t\tanisotropyMap: HAS_ANISOTROPYMAP,\n\n\t\t\tclearcoat: HAS_CLEARCOAT,\n\t\t\tclearcoatMap: HAS_CLEARCOATMAP,\n\t\t\tclearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,\n\t\t\tclearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,\n\n\t\t\tdispersion: HAS_DISPERSION,\n\n\t\t\tiridescence: HAS_IRIDESCENCE,\n\t\t\tiridescenceMap: HAS_IRIDESCENCEMAP,\n\t\t\tiridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,\n\n\t\t\tsheen: HAS_SHEEN,\n\t\t\tsheenColorMap: HAS_SHEEN_COLORMAP,\n\t\t\tsheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,\n\n\t\t\tspecularMap: HAS_SPECULARMAP,\n\t\t\tspecularColorMap: HAS_SPECULAR_COLORMAP,\n\t\t\tspecularIntensityMap: HAS_SPECULAR_INTENSITYMAP,\n\n\t\t\ttransmission: HAS_TRANSMISSION,\n\t\t\ttransmissionMap: HAS_TRANSMISSIONMAP,\n\t\t\tthicknessMap: HAS_THICKNESSMAP,\n\n\t\t\tgradientMap: HAS_GRADIENTMAP,\n\n\t\t\topaque: material.transparent === false && material.blending === NormalBlending && material.alphaToCoverage === false,\n\n\t\t\talphaMap: HAS_ALPHAMAP,\n\t\t\talphaTest: HAS_ALPHATEST,\n\t\t\talphaHash: HAS_ALPHAHASH,\n\n\t\t\tcombine: material.combine,\n\n\t\t\t//\n\n\t\t\tmapUv: HAS_MAP && getChannel( material.map.channel ),\n\t\t\taoMapUv: HAS_AOMAP && getChannel( material.aoMap.channel ),\n\t\t\tlightMapUv: HAS_LIGHTMAP && getChannel( material.lightMap.channel ),\n\t\t\tbumpMapUv: HAS_BUMPMAP && getChannel( material.bumpMap.channel ),\n\t\t\tnormalMapUv: HAS_NORMALMAP && getChannel( material.normalMap.channel ),\n\t\t\tdisplacementMapUv: HAS_DISPLACEMENTMAP && getChannel( material.displacementMap.channel ),\n\t\t\temissiveMapUv: HAS_EMISSIVEMAP && getChannel( material.emissiveMap.channel ),\n\n\t\t\tmetalnessMapUv: HAS_METALNESSMAP && getChannel( material.metalnessMap.channel ),\n\t\t\troughnessMapUv: HAS_ROUGHNESSMAP && getChannel( material.roughnessMap.channel ),\n\n\t\t\tanisotropyMapUv: HAS_ANISOTROPYMAP && getChannel( material.anisotropyMap.channel ),\n\n\t\t\tclearcoatMapUv: HAS_CLEARCOATMAP && getChannel( material.clearcoatMap.channel ),\n\t\t\tclearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel( material.clearcoatNormalMap.channel ),\n\t\t\tclearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel( material.clearcoatRoughnessMap.channel ),\n\n\t\t\tiridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel( material.iridescenceMap.channel ),\n\t\t\tiridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel( material.iridescenceThicknessMap.channel ),\n\n\t\t\tsheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel( material.sheenColorMap.channel ),\n\t\t\tsheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel( material.sheenRoughnessMap.channel ),\n\n\t\t\tspecularMapUv: HAS_SPECULARMAP && getChannel( material.specularMap.channel ),\n\t\t\tspecularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel( material.specularColorMap.channel ),\n\t\t\tspecularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel( material.specularIntensityMap.channel ),\n\n\t\t\ttransmissionMapUv: HAS_TRANSMISSIONMAP && getChannel( material.transmissionMap.channel ),\n\t\t\tthicknessMapUv: HAS_THICKNESSMAP && getChannel( material.thicknessMap.channel ),\n\n\t\t\talphaMapUv: HAS_ALPHAMAP && getChannel( material.alphaMap.channel ),\n\n\t\t\t//\n\n\t\t\tvertexTangents: !! geometry.attributes.tangent && ( HAS_NORMALMAP || HAS_ANISOTROPY ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,\n\n\t\t\tpointsUvs: object.isPoints === true && !! geometry.attributes.uv && ( HAS_MAP || HAS_ALPHAMAP ),\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog === true,\n\t\t\tfogExp2: ( !! fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: material.flatShading === true,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation === true,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\treverseDepthBuffer: reverseDepthBuffer,\n\n\t\t\tskinning: object.isSkinnedMesh === true,\n\n\t\t\tmorphTargets: geometry.morphAttributes.position !== undefined,\n\t\t\tmorphNormals: geometry.morphAttributes.normal !== undefined,\n\t\t\tmorphColors: geometry.morphAttributes.color !== undefined,\n\t\t\tmorphTargetsCount: morphTargetsCount,\n\t\t\tmorphTextureStride: morphTextureStride,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumSpotLightMaps: lights.spotLightMap.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\tnumSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,\n\n\t\t\tnumLightProbes: lights.numLightProbes,\n\n\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: toneMapping,\n\n\t\t\tdecodeVideoTexture: HAS_MAP && ( material.map.isVideoTexture === true ) && ( ColorManagement.getTransfer( material.map.colorSpace ) === SRGBTransfer ),\n\t\t\tdecodeVideoTextureEmissive: HAS_EMISSIVEMAP && ( material.emissiveMap.isVideoTexture === true ) && ( ColorManagement.getTransfer( material.emissiveMap.colorSpace ) === SRGBTransfer ),\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tuseDepthPacking: material.depthPacking >= 0,\n\t\t\tdepthPacking: material.depthPacking || 0,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionClipCullDistance: HAS_EXTENSIONS && material.extensions.clipCullDistance === true && extensions.has( 'WEBGL_clip_cull_distance' ),\n\t\t\textensionMultiDraw: ( HAS_EXTENSIONS && material.extensions.multiDraw === true || IS_BATCHEDMESH ) && extensions.has( 'WEBGL_multi_draw' ),\n\n\t\t\trendererExtensionParallelShaderCompile: extensions.has( 'KHR_parallel_shader_compile' ),\n\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t};\n\n\t\t// the usage of getChannel() determines the active texture channels for this shader\n\n\t\tparameters.vertexUv1s = _activeChannels.has( 1 );\n\t\tparameters.vertexUv2s = _activeChannels.has( 2 );\n\t\tparameters.vertexUv3s = _activeChannels.has( 3 );\n\n\t\t_activeChannels.clear();\n\n\t\treturn parameters;\n\n\t}\n\n\tfunction getProgramCacheKey( parameters ) {\n\n\t\tconst array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( parameters.customVertexShaderID );\n\t\t\tarray.push( parameters.customFragmentShaderID );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( const name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\tgetProgramCacheKeyParameters( array, parameters );\n\t\t\tgetProgramCacheKeyBooleans( array, parameters );\n\t\t\tarray.push( renderer.outputColorSpace );\n\n\t\t}\n\n\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\treturn array.join();\n\n\t}\n\n\tfunction getProgramCacheKeyParameters( array, parameters ) {\n\n\t\tarray.push( parameters.precision );\n\t\tarray.push( parameters.outputColorSpace );\n\t\tarray.push( parameters.envMapMode );\n\t\tarray.push( parameters.envMapCubeUVHeight );\n\t\tarray.push( parameters.mapUv );\n\t\tarray.push( parameters.alphaMapUv );\n\t\tarray.push( parameters.lightMapUv );\n\t\tarray.push( parameters.aoMapUv );\n\t\tarray.push( parameters.bumpMapUv );\n\t\tarray.push( parameters.normalMapUv );\n\t\tarray.push( parameters.displacementMapUv );\n\t\tarray.push( parameters.emissiveMapUv );\n\t\tarray.push( parameters.metalnessMapUv );\n\t\tarray.push( parameters.roughnessMapUv );\n\t\tarray.push( parameters.anisotropyMapUv );\n\t\tarray.push( parameters.clearcoatMapUv );\n\t\tarray.push( parameters.clearcoatNormalMapUv );\n\t\tarray.push( parameters.clearcoatRoughnessMapUv );\n\t\tarray.push( parameters.iridescenceMapUv );\n\t\tarray.push( parameters.iridescenceThicknessMapUv );\n\t\tarray.push( parameters.sheenColorMapUv );\n\t\tarray.push( parameters.sheenRoughnessMapUv );\n\t\tarray.push( parameters.specularMapUv );\n\t\tarray.push( parameters.specularColorMapUv );\n\t\tarray.push( parameters.specularIntensityMapUv );\n\t\tarray.push( parameters.transmissionMapUv );\n\t\tarray.push( parameters.thicknessMapUv );\n\t\tarray.push( parameters.combine );\n\t\tarray.push( parameters.fogExp2 );\n\t\tarray.push( parameters.sizeAttenuation );\n\t\tarray.push( parameters.morphTargetsCount );\n\t\tarray.push( parameters.morphAttributeCount );\n\t\tarray.push( parameters.numDirLights );\n\t\tarray.push( parameters.numPointLights );\n\t\tarray.push( parameters.numSpotLights );\n\t\tarray.push( parameters.numSpotLightMaps );\n\t\tarray.push( parameters.numHemiLights );\n\t\tarray.push( parameters.numRectAreaLights );\n\t\tarray.push( parameters.numDirLightShadows );\n\t\tarray.push( parameters.numPointLightShadows );\n\t\tarray.push( parameters.numSpotLightShadows );\n\t\tarray.push( parameters.numSpotLightShadowsWithMaps );\n\t\tarray.push( parameters.numLightProbes );\n\t\tarray.push( parameters.shadowMapType );\n\t\tarray.push( parameters.toneMapping );\n\t\tarray.push( parameters.numClippingPlanes );\n\t\tarray.push( parameters.numClipIntersection );\n\t\tarray.push( parameters.depthPacking );\n\n\t}\n\n\tfunction getProgramCacheKeyBooleans( array, parameters ) {\n\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.supportsVertexTextures )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.instancing )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.instancingColor )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.instancingMorph )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.matcap )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.envMap )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.normalMapObjectSpace )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.normalMapTangentSpace )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.clearcoat )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.iridescence )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.alphaTest )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.vertexColors )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.vertexAlphas )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.vertexUv1s )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.vertexUv2s )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.vertexUv3s )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.vertexTangents )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.anisotropy )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.alphaHash )\n\t\t\t_programLayers.enable( 18 );\n\t\tif ( parameters.batching )\n\t\t\t_programLayers.enable( 19 );\n\t\tif ( parameters.dispersion )\n\t\t\t_programLayers.enable( 20 );\n\t\tif ( parameters.batchingColor )\n\t\t\t_programLayers.enable( 21 );\n\n\t\tarray.push( _programLayers.mask );\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.fog )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.useFog )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.flatShading )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.logarithmicDepthBuffer )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.reverseDepthBuffer )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.skinning )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.morphTargets )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.morphNormals )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.morphColors )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.premultipliedAlpha )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.shadowMapEnabled )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.doubleSided )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.flipSided )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.useDepthPacking )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.dithering )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.transmission )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.sheen )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.opaque )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.pointsUvs )\n\t\t\t_programLayers.enable( 18 );\n\t\tif ( parameters.decodeVideoTexture )\n\t\t\t_programLayers.enable( 19 );\n\t\tif ( parameters.decodeVideoTextureEmissive )\n\t\t\t_programLayers.enable( 20 );\n\t\tif ( parameters.alphaToCoverage )\n\t\t\t_programLayers.enable( 21 );\n\n\t\tarray.push( _programLayers.mask );\n\n\t}\n\n\tfunction getUniforms( material ) {\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\t\tlet uniforms;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t} else {\n\n\t\t\tuniforms = material.uniforms;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\tlet program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tconst preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\tfunction releaseProgram( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tconst i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t}\n\n\tfunction releaseShaderCache( material ) {\n\n\t\t_customShaders.remove( material );\n\n\t}\n\n\tfunction dispose() {\n\n\t\t_customShaders.dispose();\n\n\t}\n\n\treturn {\n\t\tgetParameters: getParameters,\n\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\tgetUniforms: getUniforms,\n\t\tacquireProgram: acquireProgram,\n\t\treleaseProgram: releaseProgram,\n\t\treleaseShaderCache: releaseShaderCache,\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tprograms: programs,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLProperties() {\n\n\tlet properties = new WeakMap();\n\n\tfunction has( object ) {\n\n\t\treturn properties.has( object );\n\n\t}\n\n\tfunction get( object ) {\n\n\t\tlet map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\thas: has,\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n\nfunction WebGLRenderList() {\n\n\tconst renderItems = [];\n\tlet renderItemsIndex = 0;\n\n\tconst opaque = [];\n\tconst transmissive = [];\n\tconst transparent = [];\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransmissive.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = renderItems[ renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\trenderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.push( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.push( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.push( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.unshift( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.unshift( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.unshift( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfunction finish() {\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\topaque: opaque,\n\t\ttransmissive: transmissive,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\t\tunshift: unshift,\n\t\tfinish: finish,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists() {\n\n\tlet lists = new WeakMap();\n\n\tfunction get( scene, renderCallDepth ) {\n\n\t\tconst listArray = lists.get( scene );\n\t\tlet list;\n\n\t\tif ( listArray === undefined ) {\n\n\t\t\tlist = new WebGLRenderList();\n\t\t\tlists.set( scene, [ list ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= listArray.length ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlistArray.push( list );\n\n\t\t\t} else {\n\n\t\t\t\tlist = listArray[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction UniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction ShadowUniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowIntensity: 1,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowIntensity: 1,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowIntensity: 1,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\n\n\nlet nextVersion = 0;\n\nfunction shadowCastingAndTexturingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );\n\n}\n\nfunction WebGLLights( extensions ) {\n\n\tconst cache = new UniformsCache();\n\n\tconst shadowCache = ShadowUniformsCache();\n\n\tconst state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: -1,\n\t\t\tpointLength: -1,\n\t\t\tspotLength: -1,\n\t\t\trectAreaLength: -1,\n\t\t\themiLength: -1,\n\n\t\t\tnumDirectionalShadows: -1,\n\t\t\tnumPointShadows: -1,\n\t\t\tnumSpotShadows: -1,\n\t\t\tnumSpotMaps: -1,\n\n\t\t\tnumLightProbes: -1\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadow: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotLightMap: [],\n\t\tspotShadow: [],\n\t\tspotShadowMap: [],\n\t\tspotLightMatrix: [],\n\t\trectArea: [],\n\t\trectAreaLTC1: null,\n\t\trectAreaLTC2: null,\n\t\tpoint: [],\n\t\tpointShadow: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\t\tnumSpotLightShadowsWithMaps: 0,\n\t\tnumLightProbes: 0\n\n\t};\n\n\tfor ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tconst vector3 = new Vector3();\n\tconst matrix4 = new Matrix4();\n\tconst matrix42 = new Matrix4();\n\n\tfunction setup( lights ) {\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tlet numDirectionalShadows = 0;\n\t\tlet numPointShadows = 0;\n\t\tlet numSpotShadows = 0;\n\t\tlet numSpotMaps = 0;\n\t\tlet numSpotShadowsWithMaps = 0;\n\n\t\tlet numLightProbes = 0;\n\n\t\t// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]\n\t\tlights.sort( shadowCastingAndTexturingLightsFirst );\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tconst color = light.color;\n\t\t\tconst intensity = light.intensity;\n\t\t\tconst distance = light.distance;\n\n\t\t\tconst shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t\tnumLightProbes ++;\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowIntensity = shadow.intensity;\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif ( light.map ) {\n\n\t\t\t\t\tstate.spotLightMap[ numSpotMaps ] = light.map;\n\t\t\t\t\tnumSpotMaps ++;\n\n\t\t\t\t\t// make sure the lightMatrix is up to date\n\t\t\t\t\t// TODO : do it if required only\n\t\t\t\t\tshadow.updateMatrices( light );\n\n\t\t\t\t\tif ( light.castShadow ) numSpotShadowsWithMaps ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spotLightMatrix[ spotLength ] = shadow.matrix;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowIntensity = shadow.intensity;\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowIntensity = shadow.intensity;\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( rectAreaLength > 0 ) {\n\n\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) === true ) {\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t} else {\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tconst hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ||\n\t\t\thash.numSpotMaps !== numSpotMaps ||\n\t\t\thash.numLightProbes !== numLightProbes ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;\n\t\t\tstate.spotLightMap.length = numSpotMaps;\n\t\t\tstate.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;\n\t\t\tstate.numLightProbes = numLightProbes;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\thash.numSpotMaps = numSpotMaps;\n\n\t\t\thash.numLightProbes = numLightProbes;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\tfunction setupView( lights, camera ) {\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = state.directional[ directionalLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = state.spot[ spotLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = state.rectArea[ rectAreaLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = state.point[ pointLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = state.hemi[ hemiLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tsetupView: setupView,\n\t\tstate: state\n\t};\n\n}\n\nfunction WebGLRenderState( extensions ) {\n\n\tconst lights = new WebGLLights( extensions );\n\n\tconst lightsArray = [];\n\tconst shadowsArray = [];\n\n\tfunction init( camera ) {\n\n\t\tstate.camera = camera;\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights() {\n\n\t\tlights.setup( lightsArray );\n\n\t}\n\n\tfunction setupLightsView( camera ) {\n\n\t\tlights.setupView( lightsArray, camera );\n\n\t}\n\n\tconst state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\n\t\tcamera: null,\n\n\t\tlights: lights,\n\n\t\ttransmissionRenderTarget: {}\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\t\tsetupLightsView: setupLightsView,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow\n\t};\n\n}\n\nfunction WebGLRenderStates( extensions ) {\n\n\tlet renderStates = new WeakMap();\n\n\tfunction get( scene, renderCallDepth = 0 ) {\n\n\t\tconst renderStateArray = renderStates.get( scene );\n\t\tlet renderState;\n\n\t\tif ( renderStateArray === undefined ) {\n\n\t\t\trenderState = new WebGLRenderState( extensions );\n\t\t\trenderStates.set( scene, [ renderState ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= renderStateArray.length ) {\n\n\t\t\t\trenderState = new WebGLRenderState( extensions );\n\t\t\t\trenderStateArray.push( renderState );\n\n\t\t\t} else {\n\n\t\t\t\trenderState = renderStateArray[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\nconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\nfunction WebGLShadowMap( renderer, objects, capabilities ) {\n\n\tlet _frustum = new Frustum();\n\n\tconst _shadowMapSize = new Vector2(),\n\t\t_viewportSize = new Vector2(),\n\n\t\t_viewport = new Vector4(),\n\n\t\t_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\n\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\n\t\t_materialCache = {},\n\n\t\t_maxTextureSize = capabilities.maxTextureSize;\n\n\tconst shadowSide = { [ FrontSide ]: BackSide, [ BackSide ]: FrontSide, [ DoubleSide ]: DoubleSide };\n\n\tconst shadowMaterialVertical = new ShaderMaterial( {\n\t\tdefines: {\n\t\t\tVSM_SAMPLES: 8\n\t\t},\n\t\tuniforms: {\n\t\t\tshadow_pass: { value: null },\n\t\t\tresolution: { value: new Vector2() },\n\t\t\tradius: { value: 4.0 }\n\t\t},\n\n\t\tvertexShader: vertex,\n\t\tfragmentShader: fragment\n\n\t} );\n\n\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\n\tconst fullScreenTri = new BufferGeometry();\n\tfullScreenTri.setAttribute(\n\t\t'position',\n\t\tnew BufferAttribute(\n\t\t\tnew Float32Array( [ -1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5 ] ),\n\t\t\t3\n\t\t)\n\t);\n\n\tconst fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\tconst scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\tlet _previousType = this.type;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst activeCubeFace = renderer.getActiveCubeFace();\n\t\tconst activeMipmapLevel = renderer.getActiveMipmapLevel();\n\n\t\tconst _state = renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.setBlending( NoBlending );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// check for shadow map type changes\n\n\t\tconst toVSM = ( _previousType !== VSMShadowMap && this.type === VSMShadowMap );\n\t\tconst fromVSM = ( _previousType === VSMShadowMap && this.type !== VSMShadowMap );\n\n\t\t// render depth map\n\n\t\tfor ( let i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\t\t\tconst shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\tif ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\tif ( _shadowMapSize.x > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null || toVSM === true || fromVSM === true ) {\n\n\t\t\t\tconst pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};\n\n\t\t\t\tif ( shadow.map !== null ) {\n\n\t\t\t\t\tshadow.map.dispose();\n\n\t\t\t\t}\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( shadow.map );\n\t\t\trenderer.clear();\n\n\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\tconst viewport = shadow.getViewport( vp );\n\n\t\t\t\t_viewport.set(\n\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t);\n\n\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t}\n\n\t\t\t// do blur pass for VSM\n\n\t\t\tif ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {\n\n\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t}\n\n\t\t\tshadow.needsUpdate = false;\n\n\t\t}\n\n\t\t_previousType = this.type;\n\n\t\tscope.needsUpdate = false;\n\n\t\trenderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t};\n\n\tfunction VSMPass( shadow, camera ) {\n\n\t\tconst geometry = objects.update( fullScreenMesh );\n\n\t\tif ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {\n\n\t\t\tshadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n\t\t\tshadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n\n\t\t\tshadowMaterialVertical.needsUpdate = true;\n\t\t\tshadowMaterialHorizontal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( shadow.mapPass === null ) {\n\n\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );\n\n\t\t}\n\n\t\t// vertical pass\n\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\trenderer.setRenderTarget( shadow.mapPass );\n\t\trenderer.clear();\n\t\trenderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t// horizontal pass\n\n\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\t\trenderer.setRenderTarget( shadow.map );\n\t\trenderer.clear();\n\t\trenderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\n\n\t}\n\n\tfunction getDepthMaterial( object, material, light, type ) {\n\n\t\tlet result = null;\n\n\t\tconst customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\tif ( customMaterial !== undefined ) {\n\n\t\t\tresult = customMaterial;\n\n\t\t} else {\n\n\t\t\tresult = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\n\n\t\t\tif ( ( renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||\n\t\t\t\t( material.displacementMap && material.displacementScale !== 0 ) ||\n\t\t\t\t( material.alphaMap && material.alphaTest > 0 ) ||\n\t\t\t\t( material.map && material.alphaTest > 0 ) ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tconst keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tlet materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\t\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tif ( type === VSMShadowMap ) {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t} else {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t}\n\n\t\tresult.alphaMap = material.alphaMap;\n\t\tresult.alphaTest = material.alphaTest;\n\t\tresult.map = material.map;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.displacementMap = material.displacementMap;\n\t\tresult.displacementScale = material.displacementScale;\n\t\tresult.displacementBias = material.displacementBias;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\tconst materialProperties = renderer.properties.get( result );\n\t\t\tmaterialProperties.light = light;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\tfor ( let k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ k ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, groupMaterial, light, type );\n\n\t\t\t\t\t\t\tobject.onBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, group );\n\n\t\t\t\t\t\t\trenderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\tobject.onAfterShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, material, light, type );\n\n\t\t\t\t\tobject.onBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, null );\n\n\t\t\t\t\trenderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\tobject.onAfterShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t}\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tconst material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t// make sure to remove the unique distance/depth materials used for shadow map rendering\n\n\t\tfor ( const id in _materialCache ) {\n\n\t\t\tconst cache = _materialCache[ id ];\n\n\t\t\tconst uuid = event.target.uuid;\n\n\t\t\tif ( uuid in cache ) {\n\n\t\t\t\tconst shadowMaterial = cache[ uuid ];\n\t\t\t\tshadowMaterial.dispose();\n\t\t\t\tdelete cache[ uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nconst reversedFuncs = {\n\t[ NeverDepth ]: AlwaysDepth,\n\t[ LessDepth ]: GreaterDepth,\n\t[ EqualDepth ]: NotEqualDepth,\n\t[ LessEqualDepth ]: GreaterEqualDepth,\n\n\t[ AlwaysDepth ]: NeverDepth,\n\t[ GreaterDepth ]: LessDepth,\n\t[ NotEqualDepth ]: EqualDepth,\n\t[ GreaterEqualDepth ]: LessEqualDepth,\n};\n\nfunction WebGLState( gl, extensions ) {\n\n\tfunction ColorBuffer() {\n\n\t\tlet locked = false;\n\n\t\tconst color = new Vector4();\n\t\tlet currentColorMask = null;\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( -1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tlet locked = false;\n\t\tlet reversed = false;\n\n\t\tlet currentDepthMask = null;\n\t\tlet currentDepthFunc = null;\n\t\tlet currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetReversed: function ( value ) {\n\n\t\t\t\tif ( reversed !== value ) {\n\n\t\t\t\t\tconst ext = extensions.get( 'EXT_clip_control' );\n\n\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\text.clipControlEXT( ext.LOWER_LEFT_EXT, ext.ZERO_TO_ONE_EXT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\text.clipControlEXT( ext.LOWER_LEFT_EXT, ext.NEGATIVE_ONE_TO_ONE_EXT );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst oldDepth = currentDepthClear;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t\tthis.setClear( oldDepth );\n\n\t\t\t\t}\n\n\t\t\t\treversed = value;\n\n\t\t\t},\n\n\t\t\tgetReversed: function () {\n\n\t\t\t\treturn reversed;\n\n\t\t\t},\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( reversed ) depthFunc = reversedFuncs[ depthFunc ];\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\tdepth = 1 - depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\t\t\t\treversed = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentStencilMask = null;\n\t\tlet currentStencilFunc = null;\n\t\tlet currentStencilRef = null;\n\t\tlet currentStencilFuncMask = null;\n\t\tlet currentStencilFail = null;\n\t\tlet currentStencilZFail = null;\n\t\tlet currentStencilZPass = null;\n\t\tlet currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef !== stencilRef ||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tconst colorBuffer = new ColorBuffer();\n\tconst depthBuffer = new DepthBuffer();\n\tconst stencilBuffer = new StencilBuffer();\n\n\tconst uboBindings = new WeakMap();\n\tconst uboProgramMap = new WeakMap();\n\n\tlet enabledCapabilities = {};\n\n\tlet currentBoundFramebuffers = {};\n\tlet currentDrawbuffers = new WeakMap();\n\tlet defaultDrawbuffers = [];\n\n\tlet currentProgram = null;\n\n\tlet currentBlendingEnabled = false;\n\tlet currentBlending = null;\n\tlet currentBlendEquation = null;\n\tlet currentBlendSrc = null;\n\tlet currentBlendDst = null;\n\tlet currentBlendEquationAlpha = null;\n\tlet currentBlendSrcAlpha = null;\n\tlet currentBlendDstAlpha = null;\n\tlet currentBlendColor = new Color( 0, 0, 0 );\n\tlet currentBlendAlpha = 0;\n\tlet currentPremultipledAlpha = false;\n\n\tlet currentFlipSided = null;\n\tlet currentCullFace = null;\n\n\tlet currentLineWidth = null;\n\n\tlet currentPolygonOffsetFactor = null;\n\tlet currentPolygonOffsetUnits = null;\n\n\tconst maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\tlet lineWidthAvailable = false;\n\tlet version = 0;\n\tconst glVersion = gl.getParameter( gl.VERSION );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== -1 ) {\n\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== -1 ) {\n\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tlet currentTextureSlot = null;\n\tlet currentBoundTextures = {};\n\n\tconst scissorParam = gl.getParameter( gl.SCISSOR_BOX );\n\tconst viewportParam = gl.getParameter( gl.VIEWPORT );\n\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\n\n\tfunction createTexture( type, target, count, dimensions ) {\n\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tconst texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tif ( type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\tgl.texImage3D( target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t} else {\n\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tconst emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\temptyTextures[ gl.TEXTURE_2D_ARRAY ] = createTexture( gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1 );\n\temptyTextures[ gl.TEXTURE_3D ] = createTexture( gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( gl.DEPTH_TEST );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( gl.CULL_FACE );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction bindFramebuffer( target, framebuffer ) {\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\n\t\t\tif ( target === gl.DRAW_FRAMEBUFFER ) {\n\n\t\t\t\tcurrentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;\n\n\t\t\t}\n\n\t\t\tif ( target === gl.FRAMEBUFFER ) {\n\n\t\t\t\tcurrentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction drawBuffers( renderTarget, framebuffer ) {\n\n\t\tlet drawBuffers = defaultDrawbuffers;\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tdrawBuffers = currentDrawbuffers.get( framebuffer );\n\n\t\t\tif ( drawBuffers === undefined ) {\n\n\t\t\t\tdrawBuffers = [];\n\t\t\t\tcurrentDrawbuffers.set( framebuffer, drawBuffers );\n\n\t\t\t}\n\n\t\t\tconst textures = renderTarget.textures;\n\n\t\t\tif ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {\n\n\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\tdrawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;\n\n\t\t\t\t}\n\n\t\t\t\tdrawBuffers.length = textures.length;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( drawBuffers[ 0 ] !== gl.BACK ) {\n\n\t\t\t\tdrawBuffers[ 0 ] = gl.BACK;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tgl.drawBuffers( drawBuffers );\n\n\t\t}\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tconst equationToGL = {\n\t\t[ AddEquation ]: gl.FUNC_ADD,\n\t\t[ SubtractEquation ]: gl.FUNC_SUBTRACT,\n\t\t[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT\n\t};\n\n\tequationToGL[ MinEquation ] = gl.MIN;\n\tequationToGL[ MaxEquation ] = gl.MAX;\n\n\tconst factorToGL = {\n\t\t[ ZeroFactor ]: gl.ZERO,\n\t\t[ OneFactor ]: gl.ONE,\n\t\t[ SrcColorFactor ]: gl.SRC_COLOR,\n\t\t[ SrcAlphaFactor ]: gl.SRC_ALPHA,\n\t\t[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,\n\t\t[ DstColorFactor ]: gl.DST_COLOR,\n\t\t[ DstAlphaFactor ]: gl.DST_ALPHA,\n\t\t[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,\n\t\t[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,\n\t\t[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA,\n\t\t[ ConstantColorFactor ]: gl.CONSTANT_COLOR,\n\t\t[ OneMinusConstantColorFactor ]: gl.ONE_MINUS_CONSTANT_COLOR,\n\t\t[ ConstantAlphaFactor ]: gl.CONSTANT_ALPHA,\n\t\t[ OneMinusConstantAlphaFactor ]: gl.ONE_MINUS_CONSTANT_ALPHA\n\t};\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled === true ) {\n\n\t\t\t\tdisable( gl.BLEND );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( currentBlendingEnabled === false ) {\n\n\t\t\tenable( gl.BLEND );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\tcurrentBlendColor.set( 0, 0, 0 );\n\t\t\t\tcurrentBlendAlpha = 0;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tif ( blendColor.equals( currentBlendColor ) === false || blendAlpha !== currentBlendAlpha ) {\n\n\t\t\tgl.blendColor( blendColor.r, blendColor.g, blendColor.b, blendAlpha );\n\n\t\t\tcurrentBlendColor.copy( blendColor );\n\t\t\tcurrentBlendAlpha = blendAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = false;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( gl.CULL_FACE )\n\t\t\t: enable( gl.CULL_FACE );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true\n\t\t\t? enable( gl.SAMPLE_ALPHA_TO_COVERAGE )\n\t\t\t: disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture, webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\twebglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\t} else {\n\n\t\t\t\twebglSlot = currentTextureSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ webglSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ webglSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction unbindTexture() {\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D( ...arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage3D( ...arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage2D( ...arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage3D( ...arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexSubImage2D( ...arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexSubImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexSubImage3D( ...arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage2D( ...arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage3D( ...arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D( ...arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D( ...arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\tfunction updateUBOMapping( uniformsGroup, program ) {\n\n\t\tlet mapping = uboProgramMap.get( program );\n\n\t\tif ( mapping === undefined ) {\n\n\t\t\tmapping = new WeakMap();\n\n\t\t\tuboProgramMap.set( program, mapping );\n\n\t\t}\n\n\t\tlet blockIndex = mapping.get( uniformsGroup );\n\n\t\tif ( blockIndex === undefined ) {\n\n\t\t\tblockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );\n\n\t\t\tmapping.set( uniformsGroup, blockIndex );\n\n\t\t}\n\n\t}\n\n\tfunction uniformBlockBinding( uniformsGroup, program ) {\n\n\t\tconst mapping = uboProgramMap.get( program );\n\t\tconst blockIndex = mapping.get( uniformsGroup );\n\n\t\tif ( uboBindings.get( program ) !== blockIndex ) {\n\n\t\t\t// bind shader specific block index to global block point\n\t\t\tgl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );\n\n\t\t\tuboBindings.set( program, blockIndex );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\t// reset state\n\n\t\tgl.disable( gl.BLEND );\n\t\tgl.disable( gl.CULL_FACE );\n\t\tgl.disable( gl.DEPTH_TEST );\n\t\tgl.disable( gl.POLYGON_OFFSET_FILL );\n\t\tgl.disable( gl.SCISSOR_TEST );\n\t\tgl.disable( gl.STENCIL_TEST );\n\t\tgl.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\n\n\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\tgl.blendFunc( gl.ONE, gl.ZERO );\n\t\tgl.blendFuncSeparate( gl.ONE, gl.ZERO, gl.ONE, gl.ZERO );\n\t\tgl.blendColor( 0, 0, 0, 0 );\n\n\t\tgl.colorMask( true, true, true, true );\n\t\tgl.clearColor( 0, 0, 0, 0 );\n\n\t\tgl.depthMask( true );\n\t\tgl.depthFunc( gl.LESS );\n\n\t\tdepthBuffer.setReversed( false );\n\n\t\tgl.clearDepth( 1 );\n\n\t\tgl.stencilMask( 0xffffffff );\n\t\tgl.stencilFunc( gl.ALWAYS, 0, 0xffffffff );\n\t\tgl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );\n\t\tgl.clearStencil( 0 );\n\n\t\tgl.cullFace( gl.BACK );\n\t\tgl.frontFace( gl.CCW );\n\n\t\tgl.polygonOffset( 0, 0 );\n\n\t\tgl.activeTexture( gl.TEXTURE0 );\n\n\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\n\t\tgl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );\n\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );\n\n\t\tgl.useProgram( null );\n\n\t\tgl.lineWidth( 1 );\n\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\t// reset internals\n\n\t\tenabledCapabilities = {};\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBoundFramebuffers = {};\n\t\tcurrentDrawbuffers = new WeakMap();\n\t\tdefaultDrawbuffers = [];\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlendingEnabled = false;\n\t\tcurrentBlending = null;\n\t\tcurrentBlendEquation = null;\n\t\tcurrentBlendSrc = null;\n\t\tcurrentBlendDst = null;\n\t\tcurrentBlendEquationAlpha = null;\n\t\tcurrentBlendSrcAlpha = null;\n\t\tcurrentBlendDstAlpha = null;\n\t\tcurrentBlendColor = new Color( 0, 0, 0 );\n\t\tcurrentBlendAlpha = 0;\n\t\tcurrentPremultipledAlpha = false;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcurrentLineWidth = null;\n\n\t\tcurrentPolygonOffsetFactor = null;\n\t\tcurrentPolygonOffsetUnits = null;\n\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tenable: enable,\n\t\tdisable: disable,\n\n\t\tbindFramebuffer: bindFramebuffer,\n\t\tdrawBuffers: drawBuffers,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tunbindTexture: unbindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\tcompressedTexImage3D: compressedTexImage3D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\tupdateUBOMapping: updateUBOMapping,\n\t\tuniformBlockBinding: uniformBlockBinding,\n\n\t\ttexStorage2D: texStorage2D,\n\t\ttexStorage3D: texStorage3D,\n\t\ttexSubImage2D: texSubImage2D,\n\t\ttexSubImage3D: texSubImage3D,\n\t\tcompressedTexSubImage2D: compressedTexSubImage2D,\n\t\tcompressedTexSubImage3D: compressedTexSubImage3D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;\n\tconst supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );\n\n\tconst _imageDimensions = new Vector2();\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\tconst _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\tconst dimensions = getDimensions( image );\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( dimensions.width > maxSize || dimensions.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( dimensions.width, dimensions.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ||\n\t\t\t\t( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) ) {\n\n\t\t\t\tconst width = Math.floor( scale * dimensions.width );\n\t\t\t\tconst height = Math.floor( scale * dimensions.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + dimensions.width + 'x' + dimensions.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + dimensions.width + 'x' + dimensions.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture ) {\n\n\t\treturn texture.generateMipmaps;\n\n\t}\n\n\tfunction generateMipmap( target ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t}\n\n\tfunction getTargetType( texture ) {\n\n\t\tif ( texture.isWebGLCubeRenderTarget ) return _gl.TEXTURE_CUBE_MAP;\n\t\tif ( texture.isWebGL3DRenderTarget ) return _gl.TEXTURE_3D;\n\t\tif ( texture.isWebGLArrayRenderTarget || texture.isCompressedArrayTexture ) return _gl.TEXTURE_2D_ARRAY;\n\t\treturn _gl.TEXTURE_2D;\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === _gl.RED ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RED_INTEGER ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8UI;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.R16UI;\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.R32UI;\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.R8I;\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.R16I;\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RG ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RG_INTEGER ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8UI;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RG16UI;\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RG32UI;\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.RG8I;\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.RG16I;\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.RG32I;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGB_INTEGER ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGB8UI;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RGB16UI;\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RGB32UI;\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.RGB8I;\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.RGB16I;\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.RGB32I;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGBA_INTEGER ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGBA8UI;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RGBA16UI;\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RGBA32UI;\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.RGBA8I;\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.RGBA16I;\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.RGBA32I;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGB ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_INT_5_9_9_9_REV ) internalFormat = _gl.RGB9_E5;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGBA ) {\n\n\t\t\tconst transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer( colorSpace );\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( transfer === SRGBTransfer ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;\n\n\t\t}\n\n\t\tif ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||\n\t\t\tinternalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||\n\t\t\tinternalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tfunction getInternalDepthFormat( useStencil, depthType ) {\n\n\t\tlet glInternalFormat;\n\t\tif ( useStencil ) {\n\n\t\t\tif ( depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\n\t\t\t} else if ( depthType === FloatType ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH32F_STENCIL8;\n\n\t\t\t} else if ( depthType === UnsignedShortType ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\t\t\t\tconsole.warn( 'DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.' );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\n\t\t\t} else if ( depthType === FloatType ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t} else if ( depthType === UnsignedShortType ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn glInternalFormat;\n\n\t}\n\n\tfunction getMipLevels( texture, image ) {\n\n\t\tif ( textureNeedsGenerateMipmaps( texture ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {\n\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\n\n\t\t} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {\n\n\t\t\t// user-defined mipmaps\n\n\t\t\treturn texture.mipmaps.length;\n\n\t\t} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {\n\n\t\t\treturn image.mipmaps.length;\n\n\t\t} else {\n\n\t\t\t// texture without mipmaps (only base level)\n\n\t\t\treturn 1;\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t// check if it's necessary to remove the WebGLTexture object\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures ) {\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\t\t\twebglTexture.usedTimes --;\n\n\t\t\t// the WebGLTexture object is not used anymore, remove it\n\n\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\tdeleteTexture( texture );\n\n\t\t\t}\n\n\t\t\t// remove the weak map entry if no WebGLTexture uses the source anymore\n\n\t\t\tif ( Object.keys( webglTextures ).length === 0 ) {\n\n\t\t\t\t_sources.delete( source );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deleteTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\t\tdelete webglTextures[ textureProperties.__cacheKey ];\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\tproperties.remove( renderTarget.depthTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( Array.isArray( renderTargetProperties.__webglFramebuffer[ i ] ) ) {\n\n\t\t\t\t\tfor ( let level = 0; level < renderTargetProperties.__webglFramebuffer[ i ].length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ][ level ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( Array.isArray( renderTargetProperties.__webglFramebuffer ) ) {\n\n\t\t\t\tfor ( let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ level ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\n\t\t\t}\n\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) {\n\n\t\t\t\tfor ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {\n\n\t\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tconst textures = renderTarget.textures;\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\tinfo.memory.textures --;\n\n\t\t\t}\n\n\t\t\tproperties.remove( textures[ i ] );\n\n\t\t}\n\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tfunction getTextureCacheKey( texture ) {\n\n\t\tconst array = [];\n\n\t\tarray.push( texture.wrapS );\n\t\tarray.push( texture.wrapT );\n\t\tarray.push( texture.wrapR || 0 );\n\t\tarray.push( texture.magFilter );\n\t\tarray.push( texture.minFilter );\n\t\tarray.push( texture.anisotropy );\n\t\tarray.push( texture.internalFormat );\n\t\tarray.push( texture.format );\n\t\tarray.push( texture.type );\n\t\tarray.push( texture.generateMipmaps );\n\t\tarray.push( texture.premultiplyAlpha );\n\t\tarray.push( texture.flipY );\n\t\tarray.push( texture.unpackAlignment );\n\t\tarray.push( texture.colorSpace );\n\n\t\treturn array.join();\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: _gl.REPEAT,\n\t\t[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,\n\t\t[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: _gl.NEAREST,\n\t\t[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t[ LinearFilter ]: _gl.LINEAR,\n\t\t[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR\n\t};\n\n\tconst compareToGL = {\n\t\t[ NeverCompare ]: _gl.NEVER,\n\t\t[ AlwaysCompare ]: _gl.ALWAYS,\n\t\t[ LessCompare ]: _gl.LESS,\n\t\t[ LessEqualCompare ]: _gl.LEQUAL,\n\t\t[ EqualCompare ]: _gl.EQUAL,\n\t\t[ GreaterEqualCompare ]: _gl.GEQUAL,\n\t\t[ GreaterCompare ]: _gl.GREATER,\n\t\t[ NotEqualCompare ]: _gl.NOTEQUAL\n\t};\n\n\tfunction setTextureParameters( textureType, texture ) {\n\n\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false &&\n\t\t\t( texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter ||\n\t\t\ttexture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.' );\n\n\t\t}\n\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t}\n\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\n\n\t\tif ( texture.compareFunction ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tlet forceUpload = false;\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t}\n\n\t\t// create Source <-> WebGLTextures mapping if necessary\n\n\t\tconst source = texture.source;\n\t\tlet webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures === undefined ) {\n\n\t\t\twebglTextures = {};\n\t\t\t_sources.set( source, webglTextures );\n\n\t\t}\n\n\t\t// check if there is already a WebGLTexture object for the given texture parameters\n\n\t\tconst textureCacheKey = getTextureCacheKey( texture );\n\n\t\tif ( textureCacheKey !== textureProperties.__cacheKey ) {\n\n\t\t\t// if not, create a new instance of WebGLTexture\n\n\t\t\tif ( webglTextures[ textureCacheKey ] === undefined ) {\n\n\t\t\t\t// create new entry\n\n\t\t\t\twebglTextures[ textureCacheKey ] = {\n\t\t\t\t\ttexture: _gl.createTexture(),\n\t\t\t\t\tusedTimes: 0\n\t\t\t\t};\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t// when a new instance of WebGLTexture was created, a texture upload is required\n\t\t\t\t// even if the image contents are identical\n\n\t\t\t\tforceUpload = true;\n\n\t\t\t}\n\n\t\t\twebglTextures[ textureCacheKey ].usedTimes ++;\n\n\t\t\t// every time the texture cache key changes, it's necessary to check if an instance of\n\t\t\t// WebGLTexture can be deleted in order to avoid a memory leak.\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\n\t\t\tif ( webglTexture !== undefined ) {\n\n\t\t\t\twebglTextures[ textureProperties.__cacheKey ].usedTimes --;\n\n\t\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\t\tdeleteTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// store references to cache key and WebGLTexture object\n\n\t\t\ttextureProperties.__cacheKey = textureCacheKey;\n\t\t\ttextureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;\n\n\t\t}\n\n\t\treturn forceUpload;\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = _gl.TEXTURE_2D;\n\n\t\tif ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\tif ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\t\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\n\t\t\tconst texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );\n\t\t\tconst unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );\n\n\t\t\tlet image = resizeImage( texture.image, false, capabilities.maxTextureSize );\n\t\t\timage = verifyColorSpace( texture, image );\n\n\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\n\t\t\tconst glType = utils.convert( texture.type );\n\t\t\tlet glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );\n\n\t\t\tsetTextureParameters( textureType, texture );\n\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tconst useTexStorage = ( texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tconst dataReady = source.dataReady;\n\t\t\tconst levels = getMipLevels( texture, image );\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\tglInternalFormat = getInternalDepthFormat( texture.format === DepthStencilFormat, texture.type );\n\n\t\t\t\t//\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tif ( texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( texture.layerUpdates.size > 0 ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst layerByteLength = getByteLength( mipmap.width, mipmap.height, texture.format, texture.type );\n\n\t\t\t\t\t\t\t\t\t\t\tfor ( const layerIndex of texture.layerUpdates ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst layerData = mipmap.data.subarray(\n\t\t\t\t\t\t\t\t\t\t\t\t\tlayerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t\t\t\t\t\t( layerIndex + 1 ) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\ttexture.clearLayerUpdates();\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\tif ( texture.layerUpdates.size > 0 ) {\n\n\t\t\t\t\t\t\tconst layerByteLength = getByteLength( image.width, image.height, texture.format, texture.type );\n\n\t\t\t\t\t\t\tfor ( const layerIndex of texture.layerUpdates ) {\n\n\t\t\t\t\t\t\t\tconst layerData = image.data.subarray(\n\t\t\t\t\t\t\t\t\tlayerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t\t( layerIndex + 1 ) * layerByteLength / image.data.BYTES_PER_ELEMENT\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttexture.clearLayerUpdates();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isFramebufferTexture ) {\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlet width = image.width, height = image.height;\n\n\t\t\t\t\t\tfor ( let i = 0; i < levels; i ++ ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );\n\n\t\t\t\t\t\t\twidth >>= 1;\n\t\t\t\t\t\t\theight >>= 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tconst dimensions = getDimensions( mipmaps[ 0 ] );\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tconst dimensions = getDimensions( image );\n\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\n\n\t\t\t\tgenerateMipmap( textureType );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\t\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\n\t\t\tconst texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );\n\t\t\tconst unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );\n\n\t\t\tconst isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );\n\t\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], true, capabilities.maxCubemapSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );\n\n\t\t\t}\n\n\t\t\tconst image = cubeImage[ 0 ],\n\t\t\t\tglFormat = utils.convert( texture.format, texture.colorSpace ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\n\t\t\tconst useTexStorage = ( texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tconst dataReady = source.dataReady;\n\t\t\tlet levels = getMipLevels( texture, image );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture );\n\n\t\t\tlet mipmaps;\n\n\t\t\tif ( isCompressed ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t// TODO: Uniformly handle mipmap definitions\n\t\t\t\t\t// Normal textures and compressed cube textures define base level + mips with their mipmap array\n\t\t\t\t\t// Uncompressed cube textures use their mipmap array only for mips (no base level)\n\n\t\t\t\t\tif ( mipmaps.length > 0 ) levels ++;\n\n\t\t\t\t\tconst dimensions = getDimensions( cubeImage[ 0 ] );\n\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\n\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget, level ) {\n\n\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\ttextureProperties.__renderTarget = renderTarget;\n\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\tconst width = Math.max( 1, renderTarget.width >> level );\n\t\t\tconst height = Math.max( 1, renderTarget.height >> level );\n\n\t\t\tif ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\tstate.texImage3D( textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\n\n\t\t} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, level );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t// retrieve the depth attachment types\n\t\t\tconst depthTexture = renderTarget.depthTexture;\n\t\t\tconst depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;\n\t\t\tconst glInternalFormat = getInternalDepthFormat( renderTarget.stencilBuffer, depthType );\n\t\t\tconst glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\n\t\t\t// set up the attachment\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\tconst isUseMultisampledRTT = useMultisampledRTT( renderTarget );\n\t\t\tif ( isUseMultisampledRTT ) {\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( isMultisample ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\tconst textures = renderTarget.textures;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\tconst textureProperties = properties.get( renderTarget.depthTexture );\n\t\ttextureProperties.__renderTarget = renderTarget;\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! textureProperties.__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = textureProperties.__webglTexture;\n\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\t// if the bound depth texture has changed\n\t\tif ( renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture ) {\n\n\t\t\t// fire the dispose event to get rid of stored state associated with the previously bound depth buffer\n\t\t\tconst depthTexture = renderTarget.depthTexture;\n\t\t\tif ( renderTargetProperties.__depthDisposeCallback ) {\n\n\t\t\t\trenderTargetProperties.__depthDisposeCallback();\n\n\t\t\t}\n\n\t\t\t// set up dispose listeners to track when the currently attached buffer is implicitly unbound\n\t\t\tif ( depthTexture ) {\n\n\t\t\t\tconst disposeEvent = () => {\n\n\t\t\t\t\tdelete renderTargetProperties.__boundDepthTexture;\n\t\t\t\t\tdelete renderTargetProperties.__depthDisposeCallback;\n\t\t\t\t\tdepthTexture.removeEventListener( 'dispose', disposeEvent );\n\n\t\t\t\t};\n\n\t\t\t\tdepthTexture.addEventListener( 'dispose', disposeEvent );\n\t\t\t\trenderTargetProperties.__depthDisposeCallback = disposeEvent;\n\n\t\t\t}\n\n\t\t\trenderTargetProperties.__boundDepthTexture = depthTexture;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer[ i ] === undefined ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// attach buffer if it's been created already\n\t\t\t\t\t\tconst glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\t\t\t\t\t\tconst renderbuffer = renderTargetProperties.__webglDepthbuffer[ i ];\n\t\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer === undefined ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// attach buffer if it's been created already\n\t\t\t\t\tconst glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\t\t\t\t\tconst renderbuffer = renderTargetProperties.__webglDepthbuffer;\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// rebind framebuffer with external textures\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( colorTexture !== undefined ) {\n\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0 );\n\n\t\t}\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tconst textures = renderTarget.textures;\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( textures.length > 1 );\n\n\t\tif ( ! isMultipleRenderTargets ) {\n\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = [];\n\n\t\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ][ level ] = _gl.createFramebuffer();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ level ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = [];\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ][ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, attachment );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment ) ) {\n\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\n\n\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture );\n\n\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0 );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst textures = renderTarget.textures;\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\n\n\t\t\t\tconst targetType = getTargetType( renderTarget );\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( targetType, webglTexture );\n\t\t\t\tgenerateMipmap( targetType );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst invalidationArrayRead = [];\n\tconst invalidationArrayDraw = [];\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( renderTarget.samples > 0 ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\tconst textures = renderTarget.textures;\n\t\t\t\tconst width = renderTarget.width;\n\t\t\t\tconst height = renderTarget.height;\n\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\t\tconst depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\t\tconst isMultipleRenderTargets = ( textures.length > 1 );\n\n\t\t\t\t// If MRT we need to remove FBO attachments\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );\n\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tif ( renderTarget.resolveDepthBuffer ) {\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;\n\n\t\t\t\t\t\t// resolving stencil is slow with a D3D backend. disable it for all transmission render targets (see #27799)\n\n\t\t\t\t\t\tif ( renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );\n\n\t\t\t\t\tif ( supportsInvalidateFramebuffer === true ) {\n\n\t\t\t\t\t\tinvalidationArrayRead.length = 0;\n\t\t\t\t\t\tinvalidationArrayDraw.length = 0;\n\n\t\t\t\t\t\tinvalidationArrayRead.push( _gl.COLOR_ATTACHMENT0 + i );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false ) {\n\n\t\t\t\t\t\t\tinvalidationArrayRead.push( depthStyle );\n\t\t\t\t\t\t\tinvalidationArrayDraw.push( depthStyle );\n\n\t\t\t\t\t\t\t_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, invalidationArrayDraw );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArrayRead );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );\n\n\t\t\t\t// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer ) {\n\n\t\t\t\t\tconst depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn Math.min( capabilities.maxSamples, renderTarget.samples );\n\n\t}\n\n\tfunction useMultisampledRTT( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\treturn renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\tfunction verifyColorSpace( texture, image ) {\n\n\t\tconst colorSpace = texture.colorSpace;\n\t\tconst format = texture.format;\n\t\tconst type = texture.type;\n\n\t\tif ( texture.isCompressedTexture === true || texture.isVideoTexture === true ) return image;\n\n\t\tif ( colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace ) {\n\n\t\t\t// sRGB\n\n\t\t\tif ( ColorManagement.getTransfer( colorSpace ) === SRGBTransfer ) {\n\n\t\t\t\t// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n\n\t\t\t\tif ( format !== RGBAFormat || type !== UnsignedByteType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.WebGLTextures: Unsupported texture color space:', colorSpace );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction getDimensions( image ) {\n\n\t\tif ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) {\n\n\t\t\t// if intrinsic data are not available, fallback to width/height\n\n\t\t\t_imageDimensions.width = image.naturalWidth || image.width;\n\t\t\t_imageDimensions.height = image.naturalHeight || image.height;\n\n\t\t} else if ( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) {\n\n\t\t\t_imageDimensions.width = image.displayWidth;\n\t\t\t_imageDimensions.height = image.displayHeight;\n\n\t\t} else {\n\n\t\t\t_imageDimensions.width = image.width;\n\t\t\t_imageDimensions.height = image.height;\n\n\t\t}\n\n\t\treturn _imageDimensions;\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.rebindTextures = rebindTextures;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\n\tthis.useMultisampledRTT = useMultisampledRTT;\n\n}\n\nfunction WebGLUtils( gl, extensions ) {\n\n\tfunction convert( p, colorSpace = NoColorSpace ) {\n\n\t\tlet extension;\n\n\t\tconst transfer = ColorManagement.getTransfer( colorSpace );\n\n\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === UnsignedInt5999Type ) return gl.UNSIGNED_INT_5_9_9_9_REV;\n\n\t\tif ( p === ByteType ) return gl.BYTE;\n\t\tif ( p === ShortType ) return gl.SHORT;\n\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\tif ( p === IntType ) return gl.INT;\n\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\tif ( p === FloatType ) return gl.FLOAT;\n\t\tif ( p === HalfFloatType ) return gl.HALF_FLOAT;\n\n\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\tif ( p === RGBFormat ) return gl.RGB;\n\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedFormat ) return gl.RED;\n\t\tif ( p === RedIntegerFormat ) return gl.RED_INTEGER;\n\t\tif ( p === RGFormat ) return gl.RG;\n\t\tif ( p === RGIntegerFormat ) return gl.RG_INTEGER;\n\t\tif ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;\n\n\t\t// S3TC\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\tif ( transfer === SRGBTransfer ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// PVRTC\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC\n\n\t\tif ( p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC1_Format || p === RGB_ETC2_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ASTC\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_ASTC_4x4_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x4_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x8_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x8_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x10_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x10_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x12_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// BPTC\n\n\t\tif ( p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n\t\t\t\tif ( p === RGB_BPTC_SIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;\n\t\t\t\tif ( p === RGB_BPTC_UNSIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// RGTC\n\n\t\tif ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_rgtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;\n\t\t\t\tif ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( p === UnsignedInt248Type ) return gl.UNSIGNED_INT_24_8;\n\n\t\t// if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\n\n\t\treturn ( gl[ p ] !== undefined ) ? gl[ p ] : null;\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\nconst _occlusion_vertex = `\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}`;\n\nconst _occlusion_fragment = `\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}`;\n\nclass WebXRDepthSensing {\n\n\tconstructor() {\n\n\t\tthis.texture = null;\n\t\tthis.mesh = null;\n\n\t\tthis.depthNear = 0;\n\t\tthis.depthFar = 0;\n\n\t}\n\n\tinit( renderer, depthData, renderState ) {\n\n\t\tif ( this.texture === null ) {\n\n\t\t\tconst texture = new Texture();\n\n\t\t\tconst texProps = renderer.properties.get( texture );\n\t\t\ttexProps.__webglTexture = depthData.texture;\n\n\t\t\tif ( ( depthData.depthNear !== renderState.depthNear ) || ( depthData.depthFar !== renderState.depthFar ) ) {\n\n\t\t\t\tthis.depthNear = depthData.depthNear;\n\t\t\t\tthis.depthFar = depthData.depthFar;\n\n\t\t\t}\n\n\t\t\tthis.texture = texture;\n\n\t\t}\n\n\t}\n\n\tgetMesh( cameraXR ) {\n\n\t\tif ( this.texture !== null ) {\n\n\t\t\tif ( this.mesh === null ) {\n\n\t\t\t\tconst viewport = cameraXR.cameras[ 0 ].viewport;\n\t\t\t\tconst material = new ShaderMaterial( {\n\t\t\t\t\tvertexShader: _occlusion_vertex,\n\t\t\t\t\tfragmentShader: _occlusion_fragment,\n\t\t\t\t\tuniforms: {\n\t\t\t\t\t\tdepthColor: { value: this.texture },\n\t\t\t\t\t\tdepthWidth: { value: viewport.z },\n\t\t\t\t\t\tdepthHeight: { value: viewport.w }\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tthis.mesh = new Mesh( new PlaneGeometry( 20, 20 ), material );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this.mesh;\n\n\t}\n\n\treset() {\n\n\t\tthis.texture = null;\n\t\tthis.mesh = null;\n\n\t}\n\n\tgetDepthTexture() {\n\n\t\treturn this.texture;\n\n\t}\n\n}\n\nclass WebXRManager extends EventDispatcher {\n\n\tconstructor( renderer, gl ) {\n\n\t\tsuper();\n\n\t\tconst scope = this;\n\n\t\tlet session = null;\n\n\t\tlet framebufferScaleFactor = 1.0;\n\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\t\t// Set default foveation to maximum.\n\t\tlet foveation = 1.0;\n\t\tlet customReferenceSpace = null;\n\n\t\tlet pose = null;\n\t\tlet glBinding = null;\n\t\tlet glProjLayer = null;\n\t\tlet glBaseLayer = null;\n\t\tlet xrFrame = null;\n\n\t\tconst depthSensing = new WebXRDepthSensing();\n\t\tconst attributes = gl.getContextAttributes();\n\n\t\tlet initialRenderTarget = null;\n\t\tlet newRenderTarget = null;\n\n\t\tconst controllers = [];\n\t\tconst controllerInputSources = [];\n\n\t\tconst currentSize = new Vector2();\n\t\tlet currentPixelRatio = null;\n\n\t\t//\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.viewport = new Vector4();\n\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.viewport = new Vector4();\n\n\t\tconst cameras = [ cameraL, cameraR ];\n\n\t\tconst cameraXR = new ArrayCamera();\n\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.cameraAutoUpdate = true;\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tconst controllerIndex = controllerInputSources.indexOf( event.inputSource );\n\n\t\t\tif ( controllerIndex === -1 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\tif ( controller !== undefined ) {\n\n\t\t\t\tcontroller.update( event.inputSource, event.frame, customReferenceSpace || referenceSpace );\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tsession.removeEventListener( 'select', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectstart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeeze', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezestart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezeend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'end', onSessionEnd );\n\t\t\tsession.removeEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\n\t\t\t\tif ( inputSource === null ) continue;\n\n\t\t\t\tcontrollerInputSources[ i ] = null;\n\n\t\t\t\tcontrollers[ i ].disconnect( inputSource );\n\n\t\t\t}\n\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null;\n\n\t\t\tdepthSensing.reset();\n\n\t\t\t// restore framebuffer/rendering state\n\n\t\t\trenderer.setRenderTarget( initialRenderTarget );\n\n\t\t\tglBaseLayer = null;\n\t\t\tglProjLayer = null;\n\t\t\tglBinding = null;\n\t\t\tsession = null;\n\t\t\tnewRenderTarget = null;\n\n\t\t\t//\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\trenderer.setPixelRatio( currentPixelRatio );\n\t\t\trenderer.setSize( currentSize.width, currentSize.height, false );\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn customReferenceSpace || referenceSpace;\n\n\t\t};\n\n\t\tthis.setReferenceSpace = function ( space ) {\n\n\t\t\tcustomReferenceSpace = space;\n\n\t\t};\n\n\t\tthis.getBaseLayer = function () {\n\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\n\t\t};\n\n\t\tthis.getBinding = function () {\n\n\t\t\treturn glBinding;\n\n\t\t};\n\n\t\tthis.getFrame = function () {\n\n\t\t\treturn xrFrame;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = async function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tinitialRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tawait gl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\t\trenderer.getSize( currentSize );\n\n\t\t\t\t// Check that the browser implements the necessary APIs to use an\n\t\t\t\t// XRProjectionLayer rather than an XRWebGLLayer\n\t\t\t\tconst useLayers = typeof XRWebGLBinding !== 'undefined' && 'createProjectionLayer' in XRWebGLBinding.prototype;\n\n\t\t\t\tif ( ! useLayers ) {\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\talpha: true,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\t\trenderer.setPixelRatio( 1 );\n\t\t\t\t\trenderer.setSize( glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglBaseLayer.framebufferWidth,\n\t\t\t\t\t\tglBaseLayer.framebufferHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\tresolveDepthBuffer: ( glBaseLayer.ignoreDepthValues === false ),\n\t\t\t\t\t\t\tresolveStencilBuffer: ( glBaseLayer.ignoreDepthValues === false )\n\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet depthFormat = null;\n\t\t\t\t\tlet depthType = null;\n\t\t\t\t\tlet glDepthFormat = null;\n\n\t\t\t\t\tif ( attributes.depth ) {\n\n\t\t\t\t\t\tglDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\n\t\t\t\t\t\tdepthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\tcolorFormat: gl.RGBA8,\n\t\t\t\t\t\tdepthFormat: glDepthFormat,\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\n\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\n\n\t\t\t\t\trenderer.setPixelRatio( 1 );\n\t\t\t\t\trenderer.setSize( glProjLayer.textureWidth, glProjLayer.textureHeight, false );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tdepthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\t\tsamples: attributes.antialias ? 4 : 0,\n\t\t\t\t\t\t\tresolveDepthBuffer: ( glProjLayer.ignoreDepthValues === false ),\n\t\t\t\t\t\t\tresolveStencilBuffer: ( glProjLayer.ignoreDepthValues === false )\n\t\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tnewRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278\n\n\t\t\t\tthis.setFoveation( foveation );\n\n\t\t\t\tcustomReferenceSpace = null;\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n\n\t\t\t\tanimation.setContext( session );\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.isPresenting = true;\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getEnvironmentBlendMode = function () {\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\treturn session.environmentBlendMode;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getDepthTexture = function () {\n\n\t\t\treturn depthSensing.getDepthTexture();\n\n\t\t};\n\n\t\tfunction onInputSourcesChange( event ) {\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.removed[ i ];\n\t\t\t\tconst index = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( index >= 0 ) {\n\n\t\t\t\t\tcontrollerInputSources[ index ] = null;\n\t\t\t\t\tcontrollers[ index ].disconnect( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.added[ i ];\n\n\t\t\t\tlet controllerIndex = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( controllerIndex === -1 ) {\n\n\t\t\t\t\t// Assign input source a controller that currently has no input source\n\n\t\t\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\t\t\tif ( i >= controllerInputSources.length ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources.push( inputSource );\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t} else if ( controllerInputSources[ i ] === null ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources[ i ] = inputSource;\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// If all controllers do currently receive input we ignore new ones\n\n\t\t\t\t\tif ( controllerIndex === -1 ) break;\n\n\t\t\t\t}\n\n\t\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.connect( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t *\n\t\t * @param {ArrayCamera} camera - The camera to update.\n\t\t * @param {PerspectiveCamera} cameraL - The left camera.\n\t\t * @param {PerspectiveCamera} cameraR - The right camera.\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t\t// Check if the projection uses an infinite far plane.\n\t\t\tif ( projL[ 10 ] === -1 ) {\n\n\t\t\t\t// Use the projection matrix from the left eye.\n\t\t\t\t// The camera offset is sufficient to include the view volumes\n\t\t\t\t// of both eyes (assuming symmetric projections).\n\t\t\t\tcamera.projectionMatrix.copy( cameraL.projectionMatrix );\n\t\t\t\tcamera.projectionMatrixInverse.copy( cameraL.projectionMatrixInverse );\n\n\t\t\t} else {\n\n\t\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t\t// although must now be relative to the new union camera.\n\t\t\t\tconst near2 = near + zOffset;\n\t\t\t\tconst far2 = far + zOffset;\n\t\t\t\tconst left2 = left - xOffset;\n\t\t\t\tconst right2 = right + ( ipd - xOffset );\n\t\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\t\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t}\n\n\t\tthis.updateCamera = function ( camera ) {\n\n\t\t\tif ( session === null ) return;\n\n\t\t\tlet depthNear = camera.near;\n\t\t\tlet depthFar = camera.far;\n\n\t\t\tif ( depthSensing.texture !== null ) {\n\n\t\t\t\tif ( depthSensing.depthNear > 0 ) depthNear = depthSensing.depthNear;\n\t\t\t\tif ( depthSensing.depthFar > 0 ) depthFar = depthSensing.depthFar;\n\n\t\t\t}\n\n\t\t\tcameraXR.near = cameraR.near = cameraL.near = depthNear;\n\t\t\tcameraXR.far = cameraR.far = cameraL.far = depthFar;\n\n\t\t\tif ( _currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraXR.near,\n\t\t\t\t\tdepthFar: cameraXR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraXR.near;\n\t\t\t\t_currentDepthFar = cameraXR.far;\n\n\t\t\t}\n\n\t\t\tcameraL.layers.mask = camera.layers.mask | 0b010;\n\t\t\tcameraR.layers.mask = camera.layers.mask | 0b100;\n\t\t\tcameraXR.layers.mask = cameraL.layers.mask | cameraR.layers.mask;\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraXR.cameras;\n\n\t\t\tupdateCamera( cameraXR, parent );\n\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraXR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraXR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t\t// update user camera and its children\n\n\t\t\tupdateUserCamera( camera, cameraXR, parent );\n\n\t\t};\n\n\t\tfunction updateUserCamera( camera, cameraXR, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrix.copy( cameraXR.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrix.copy( parent.matrixWorld );\n\t\t\t\tcamera.matrix.invert();\n\t\t\t\tcamera.matrix.multiply( cameraXR.matrixWorld );\n\n\t\t\t}\n\n\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.updateMatrixWorld( true );\n\n\t\t\tcamera.projectionMatrix.copy( cameraXR.projectionMatrix );\n\t\t\tcamera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );\n\n\t\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\t\tcamera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );\n\t\t\t\tcamera.zoom = 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.getCamera = function () {\n\n\t\t\treturn cameraXR;\n\n\t\t};\n\n\t\tthis.getFoveation = function () {\n\n\t\t\tif ( glProjLayer === null && glBaseLayer === null ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn foveation;\n\n\t\t};\n\n\t\tthis.setFoveation = function ( value ) {\n\n\t\t\t// 0 = no foveation = full resolution\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\n\t\t\tfoveation = value;\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\tglProjLayer.fixedFoveation = value;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\t\tglBaseLayer.fixedFoveation = value;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.hasDepthSensing = function () {\n\n\t\t\treturn depthSensing.texture !== null;\n\n\t\t};\n\n\t\tthis.getDepthSensingMesh = function () {\n\n\t\t\treturn depthSensing.getMesh( cameraXR );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( customReferenceSpace || referenceSpace );\n\t\t\txrFrame = frame;\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tconst views = pose.views;\n\n\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\trenderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );\n\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tlet cameraXRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraXR's camera list\n\n\t\t\t\tif ( views.length !== cameraXR.cameras.length ) {\n\n\t\t\t\t\tcameraXR.cameras.length = 0;\n\t\t\t\t\tcameraXRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tconst view = views[ i ];\n\n\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n\t\t\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\n\t\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\t\trenderer.setRenderTargetTextures(\n\t\t\t\t\t\t\t\tnewRenderTarget,\n\t\t\t\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\t\t\t\tglProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );\n\n\t\t\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet camera = cameras[ i ];\n\n\t\t\t\t\tif ( camera === undefined ) {\n\n\t\t\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\t\t\tcamera.layers.enable( i );\n\t\t\t\t\t\tcamera.viewport = new Vector4();\n\t\t\t\t\t\tcameras[ i ] = camera;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraXR.matrix.copy( camera.matrix );\n\t\t\t\t\t\tcameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraXRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraXR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tconst enabledFeatures = session.enabledFeatures;\n\t\t\t\tconst gpuDepthSensingEnabled = enabledFeatures &&\n\t\t\t\t\tenabledFeatures.includes( 'depth-sensing' ) &&\n\t\t\t\t\tsession.depthUsage == 'gpu-optimized';\n\n\t\t\t\tif ( gpuDepthSensingEnabled && glBinding ) {\n\n\t\t\t\t\tconst depthData = glBinding.getDepthInformation( views[ 0 ] );\n\n\t\t\t\t\tif ( depthData && depthData.isValid && depthData.texture ) {\n\n\t\t\t\t\t\tdepthSensing.init( renderer, depthData, session.renderState );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\t\t\t\tconst controller = controllers[ i ];\n\n\t\t\t\tif ( inputSource !== null && controller !== undefined ) {\n\n\t\t\t\t\tcontroller.update( inputSource, frame, customReferenceSpace || referenceSpace );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t\t\tif ( frame.detectedPlanes ) {\n\n\t\t\t\tscope.dispatchEvent( { type: 'planesdetected', data: frame } );\n\n\t\t\t}\n\n\t\t\txrFrame = null;\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n}\n\nconst _e1 = /*@__PURE__*/ new Euler();\nconst _m1 = /*@__PURE__*/ new Matrix4();\n\nfunction WebGLMaterials( renderer, properties ) {\n\n\tfunction refreshTransformUniform( map, uniform ) {\n\n\t\tif ( map.matrixAutoUpdate === true ) {\n\n\t\t\tmap.updateMatrix();\n\n\t\t}\n\n\t\tuniform.value.copy( map.matrix );\n\n\t}\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tfog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\n\t\t\trefreshTransformUniform( material.bumpMap, uniforms.bumpMapTransform );\n\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.bumpScale.value *= -1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\n\t\t\trefreshTransformUniform( material.normalMap, uniforms.normalMapTransform );\n\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.normalScale.value.negate();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\n\t\t\trefreshTransformUniform( material.displacementMap, uniforms.displacementMapTransform );\n\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\trefreshTransformUniform( material.emissiveMap, uniforms.emissiveMapTransform );\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\trefreshTransformUniform( material.specularMap, uniforms.specularMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tconst envMap = materialProperties.envMap;\n\t\tconst envMapRotation = materialProperties.envMapRotation;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\t_e1.copy( envMapRotation );\n\n\t\t\t// accommodate left-handed frame\n\t\t\t_e1.x *= -1; _e1.y *= -1; _e1.z *= -1;\n\n\t\t\tif ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) {\n\n\t\t\t\t// environment maps which are not cube render targets or PMREMs follow a different convention\n\t\t\t\t_e1.y *= -1;\n\t\t\t\t_e1.z *= -1;\n\n\t\t\t}\n\n\t\t\tuniforms.envMapRotation.value.setFromMatrix4( _m1.makeRotationFromEuler( _e1 ) );\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? -1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\trefreshTransformUniform( material.lightMap, uniforms.lightMapTransform );\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\trefreshTransformUniform( material.aoMap, uniforms.aoMapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.uvTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\trefreshTransformUniform( material.metalnessMap, uniforms.metalnessMapTransform );\n\n\t\t}\n\n\t\tuniforms.roughness.value = material.roughness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\trefreshTransformUniform( material.roughnessMap, uniforms.roughnessMapTransform );\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\tif ( material.sheenColorMap ) {\n\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\n\t\t\t\trefreshTransformUniform( material.sheenColorMap, uniforms.sheenColorMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.sheenRoughnessMap ) {\n\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\n\t\t\t\trefreshTransformUniform( material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatMap, uniforms.clearcoatMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform );\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.dispersion > 0 ) {\n\n\t\t\tuniforms.dispersion.value = material.dispersion;\n\n\t\t}\n\n\t\tif ( material.iridescence > 0 ) {\n\n\t\t\tuniforms.iridescence.value = material.iridescence;\n\t\t\tuniforms.iridescenceIOR.value = material.iridescenceIOR;\n\t\t\tuniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];\n\t\t\tuniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];\n\n\t\t\tif ( material.iridescenceMap ) {\n\n\t\t\t\tuniforms.iridescenceMap.value = material.iridescenceMap;\n\n\t\t\t\trefreshTransformUniform( material.iridescenceMap, uniforms.iridescenceMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tuniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\n\n\t\t\t\trefreshTransformUniform( material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t\trefreshTransformUniform( material.transmissionMap, uniforms.transmissionMapTransform );\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t\trefreshTransformUniform( material.thicknessMap, uniforms.thicknessMapTransform );\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\n\n\t\t}\n\n\t\tif ( material.anisotropy > 0 ) {\n\n\t\t\tuniforms.anisotropyVector.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );\n\n\t\t\tif ( material.anisotropyMap ) {\n\n\t\t\t\tuniforms.anisotropyMap.value = material.anisotropyMap;\n\n\t\t\t\trefreshTransformUniform( material.anisotropyMap, uniforms.anisotropyMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularColor.value.copy( material.specularColor );\n\n\t\tif ( material.specularColorMap ) {\n\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\n\t\t\trefreshTransformUniform( material.specularColorMap, uniforms.specularColorMapTransform );\n\n\t\t}\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t\trefreshTransformUniform( material.specularIntensityMap, uniforms.specularIntensityMapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tconst light = properties.get( material ).light;\n\n\t\tuniforms.referencePosition.value.setFromMatrixPosition( light.matrixWorld );\n\t\tuniforms.nearDistance.value = light.shadow.camera.near;\n\t\tuniforms.farDistance.value = light.shadow.camera.far;\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nfunction WebGLUniformsGroups( gl, info, capabilities, state ) {\n\n\tlet buffers = {};\n\tlet updateList = {};\n\tlet allocatedBindingPoints = [];\n\n\tconst maxBindingPoints = gl.getParameter( gl.MAX_UNIFORM_BUFFER_BINDINGS ); // binding points are global whereas block indices are per shader program\n\n\tfunction bind( uniformsGroup, program ) {\n\n\t\tconst webglProgram = program.program;\n\t\tstate.uniformBlockBinding( uniformsGroup, webglProgram );\n\n\t}\n\n\tfunction update( uniformsGroup, program ) {\n\n\t\tlet buffer = buffers[ uniformsGroup.id ];\n\n\t\tif ( buffer === undefined ) {\n\n\t\t\tprepareUniformsGroup( uniformsGroup );\n\n\t\t\tbuffer = createBuffer( uniformsGroup );\n\t\t\tbuffers[ uniformsGroup.id ] = buffer;\n\n\t\t\tuniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );\n\n\t\t}\n\n\t\t// ensure to update the binding points/block indices mapping for this program\n\n\t\tconst webglProgram = program.program;\n\t\tstate.updateUBOMapping( uniformsGroup, webglProgram );\n\n\t\t// update UBO once per frame\n\n\t\tconst frame = info.render.frame;\n\n\t\tif ( updateList[ uniformsGroup.id ] !== frame ) {\n\n\t\t\tupdateBufferData( uniformsGroup );\n\n\t\t\tupdateList[ uniformsGroup.id ] = frame;\n\n\t\t}\n\n\t}\n\n\tfunction createBuffer( uniformsGroup ) {\n\n\t\t// the setup of an UBO is independent of a particular shader program but global\n\n\t\tconst bindingPointIndex = allocateBindingPointIndex();\n\t\tuniformsGroup.__bindingPointIndex = bindingPointIndex;\n\n\t\tconst buffer = gl.createBuffer();\n\t\tconst size = uniformsGroup.__size;\n\t\tconst usage = uniformsGroup.usage;\n\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, buffer );\n\t\tgl.bufferData( gl.UNIFORM_BUFFER, size, usage );\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, null );\n\t\tgl.bindBufferBase( gl.UNIFORM_BUFFER, bindingPointIndex, buffer );\n\n\t\treturn buffer;\n\n\t}\n\n\tfunction allocateBindingPointIndex() {\n\n\t\tfor ( let i = 0; i < maxBindingPoints; i ++ ) {\n\n\t\t\tif ( allocatedBindingPoints.indexOf( i ) === -1 ) {\n\n\t\t\t\tallocatedBindingPoints.push( i );\n\t\t\t\treturn i;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconsole.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );\n\n\t\treturn 0;\n\n\t}\n\n\tfunction updateBufferData( uniformsGroup ) {\n\n\t\tconst buffer = buffers[ uniformsGroup.id ];\n\t\tconst uniforms = uniformsGroup.uniforms;\n\t\tconst cache = uniformsGroup.__cache;\n\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, buffer );\n\n\t\tfor ( let i = 0, il = uniforms.length; i < il; i ++ ) {\n\n\t\t\tconst uniformArray = Array.isArray( uniforms[ i ] ) ? uniforms[ i ] : [ uniforms[ i ] ];\n\n\t\t\tfor ( let j = 0, jl = uniformArray.length; j < jl; j ++ ) {\n\n\t\t\t\tconst uniform = uniformArray[ j ];\n\n\t\t\t\tif ( hasUniformChanged( uniform, i, j, cache ) === true ) {\n\n\t\t\t\t\tconst offset = uniform.__offset;\n\n\t\t\t\t\tconst values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];\n\n\t\t\t\t\tlet arrayOffset = 0;\n\n\t\t\t\t\tfor ( let k = 0; k < values.length; k ++ ) {\n\n\t\t\t\t\t\tconst value = values[ k ];\n\n\t\t\t\t\t\tconst info = getUniformSize( value );\n\n\t\t\t\t\t\t// TODO add integer and struct support\n\t\t\t\t\t\tif ( typeof value === 'number' || typeof value === 'boolean' ) {\n\n\t\t\t\t\t\t\tuniform.__data[ 0 ] = value;\n\t\t\t\t\t\t\tgl.bufferSubData( gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data );\n\n\t\t\t\t\t\t} else if ( value.isMatrix3 ) {\n\n\t\t\t\t\t\t\t// manually converting 3x3 to 3x4\n\n\t\t\t\t\t\t\tuniform.__data[ 0 ] = value.elements[ 0 ];\n\t\t\t\t\t\t\tuniform.__data[ 1 ] = value.elements[ 1 ];\n\t\t\t\t\t\t\tuniform.__data[ 2 ] = value.elements[ 2 ];\n\t\t\t\t\t\t\tuniform.__data[ 3 ] = 0;\n\t\t\t\t\t\t\tuniform.__data[ 4 ] = value.elements[ 3 ];\n\t\t\t\t\t\t\tuniform.__data[ 5 ] = value.elements[ 4 ];\n\t\t\t\t\t\t\tuniform.__data[ 6 ] = value.elements[ 5 ];\n\t\t\t\t\t\t\tuniform.__data[ 7 ] = 0;\n\t\t\t\t\t\t\tuniform.__data[ 8 ] = value.elements[ 6 ];\n\t\t\t\t\t\t\tuniform.__data[ 9 ] = value.elements[ 7 ];\n\t\t\t\t\t\t\tuniform.__data[ 10 ] = value.elements[ 8 ];\n\t\t\t\t\t\t\tuniform.__data[ 11 ] = 0;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvalue.toArray( uniform.__data, arrayOffset );\n\n\t\t\t\t\t\t\tarrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgl.bufferSubData( gl.UNIFORM_BUFFER, offset, uniform.__data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, null );\n\n\t}\n\n\tfunction hasUniformChanged( uniform, index, indexArray, cache ) {\n\n\t\tconst value = uniform.value;\n\t\tconst indexString = index + '_' + indexArray;\n\n\t\tif ( cache[ indexString ] === undefined ) {\n\n\t\t\t// cache entry does not exist so far\n\n\t\t\tif ( typeof value === 'number' || typeof value === 'boolean' ) {\n\n\t\t\t\tcache[ indexString ] = value;\n\n\t\t\t} else {\n\n\t\t\t\tcache[ indexString ] = value.clone();\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\tconst cachedObject = cache[ indexString ];\n\n\t\t\t// compare current value with cached entry\n\n\t\t\tif ( typeof value === 'number' || typeof value === 'boolean' ) {\n\n\t\t\t\tif ( cachedObject !== value ) {\n\n\t\t\t\t\tcache[ indexString ] = value;\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( cachedObject.equals( value ) === false ) {\n\n\t\t\t\t\tcachedObject.copy( value );\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction prepareUniformsGroup( uniformsGroup ) {\n\n\t\t// determine total buffer size according to the STD140 layout\n\t\t// Hint: STD140 is the only supported layout in WebGL 2\n\n\t\tconst uniforms = uniformsGroup.uniforms;\n\n\t\tlet offset = 0; // global buffer offset in bytes\n\t\tconst chunkSize = 16; // size of a chunk in bytes\n\n\t\tfor ( let i = 0, l = uniforms.length; i < l; i ++ ) {\n\n\t\t\tconst uniformArray = Array.isArray( uniforms[ i ] ) ? uniforms[ i ] : [ uniforms[ i ] ];\n\n\t\t\tfor ( let j = 0, jl = uniformArray.length; j < jl; j ++ ) {\n\n\t\t\t\tconst uniform = uniformArray[ j ];\n\n\t\t\t\tconst values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];\n\n\t\t\t\tfor ( let k = 0, kl = values.length; k < kl; k ++ ) {\n\n\t\t\t\t\tconst value = values[ k ];\n\n\t\t\t\t\tconst info = getUniformSize( value );\n\n\t\t\t\t\tconst chunkOffset = offset % chunkSize; // offset in the current chunk\n\t\t\t\t\tconst chunkPadding = chunkOffset % info.boundary; // required padding to match boundary\n\t\t\t\t\tconst chunkStart = chunkOffset + chunkPadding; // the start position in the current chunk for the data\n\n\t\t\t\t\toffset += chunkPadding;\n\n\t\t\t\t\t// Check for chunk overflow\n\t\t\t\t\tif ( chunkStart !== 0 && ( chunkSize - chunkStart ) < info.storage ) {\n\n\t\t\t\t\t\t// Add padding and adjust offset\n\t\t\t\t\t\toffset += ( chunkSize - chunkStart );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the following two properties will be used for partial buffer updates\n\t\t\t\t\tuniform.__data = new Float32Array( info.storage / Float32Array.BYTES_PER_ELEMENT );\n\t\t\t\t\tuniform.__offset = offset;\n\n\t\t\t\t\t// Update the global offset\n\t\t\t\t\toffset += info.storage;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ensure correct final padding\n\n\t\tconst chunkOffset = offset % chunkSize;\n\n\t\tif ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );\n\n\t\t//\n\n\t\tuniformsGroup.__size = offset;\n\t\tuniformsGroup.__cache = {};\n\n\t\treturn this;\n\n\t}\n\n\tfunction getUniformSize( value ) {\n\n\t\tconst info = {\n\t\t\tboundary: 0, // bytes\n\t\t\tstorage: 0 // bytes\n\t\t};\n\n\t\t// determine sizes according to STD140\n\n\t\tif ( typeof value === 'number' || typeof value === 'boolean' ) {\n\n\t\t\t// float/int/bool\n\n\t\t\tinfo.boundary = 4;\n\t\t\tinfo.storage = 4;\n\n\t\t} else if ( value.isVector2 ) {\n\n\t\t\t// vec2\n\n\t\t\tinfo.boundary = 8;\n\t\t\tinfo.storage = 8;\n\n\t\t} else if ( value.isVector3 || value.isColor ) {\n\n\t\t\t// vec3\n\n\t\t\tinfo.boundary = 16;\n\t\t\tinfo.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes\n\n\t\t} else if ( value.isVector4 ) {\n\n\t\t\t// vec4\n\n\t\t\tinfo.boundary = 16;\n\t\t\tinfo.storage = 16;\n\n\t\t} else if ( value.isMatrix3 ) {\n\n\t\t\t// mat3 (in STD140 a 3x3 matrix is represented as 3x4)\n\n\t\t\tinfo.boundary = 48;\n\t\t\tinfo.storage = 48;\n\n\t\t} else if ( value.isMatrix4 ) {\n\n\t\t\t// mat4\n\n\t\t\tinfo.boundary = 64;\n\t\t\tinfo.storage = 64;\n\n\t\t} else if ( value.isTexture ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );\n\n\t\t}\n\n\t\treturn info;\n\n\t}\n\n\tfunction onUniformsGroupsDispose( event ) {\n\n\t\tconst uniformsGroup = event.target;\n\n\t\tuniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );\n\n\t\tconst index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );\n\t\tallocatedBindingPoints.splice( index, 1 );\n\n\t\tgl.deleteBuffer( buffers[ uniformsGroup.id ] );\n\n\t\tdelete buffers[ uniformsGroup.id ];\n\t\tdelete updateList[ uniformsGroup.id ];\n\n\t}\n\n\tfunction dispose() {\n\n\t\tfor ( const id in buffers ) {\n\n\t\t\tgl.deleteBuffer( buffers[ id ] );\n\n\t\t}\n\n\t\tallocatedBindingPoints = [];\n\t\tbuffers = {};\n\t\tupdateList = {};\n\n\t}\n\n\treturn {\n\n\t\tbind: bind,\n\t\tupdate: update,\n\n\t\tdispose: dispose\n\n\t};\n\n}\n\nclass WebGLRenderer {\n\n\tconstructor( parameters = {} ) {\n\n\t\tconst {\n\t\t\tcanvas = createCanvasElement(),\n\t\t\tcontext = null,\n\t\t\tdepth = true,\n\t\t\tstencil = false,\n\t\t\talpha = false,\n\t\t\tantialias = false,\n\t\t\tpremultipliedAlpha = true,\n\t\t\tpreserveDrawingBuffer = false,\n\t\t\tpowerPreference = 'default',\n\t\t\tfailIfMajorPerformanceCaveat = false,\n\t\t\treverseDepthBuffer = false,\n\t\t} = parameters;\n\n\t\tthis.isWebGLRenderer = true;\n\n\t\tlet _alpha;\n\n\t\tif ( context !== null ) {\n\n\t\t\tif ( typeof WebGLRenderingContext !== 'undefined' && context instanceof WebGLRenderingContext ) {\n\n\t\t\t\tthrow new Error( 'THREE.WebGLRenderer: WebGL 1 is not supported since r163.' );\n\n\t\t\t}\n\n\t\t\t_alpha = context.getContextAttributes().alpha;\n\n\t\t} else {\n\n\t\t\t_alpha = alpha;\n\n\t\t}\n\n\t\tconst uintClearColor = new Uint32Array( 4 );\n\t\tconst intClearColor = new Int32Array( 4 );\n\n\t\tlet currentRenderList = null;\n\t\tlet currentRenderState = null;\n\n\t\t// render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tconst renderListStack = [];\n\t\tconst renderStateStack = [];\n\n\t\t// public properties\n\n\t\tthis.domElement = canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true,\n\t\t\t/**\n\t\t\t * Callback for custom error reporting.\n\t\t\t * @type {?Function}\n\t\t\t */\n\t\t\tonShaderError: null\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis._outputColorSpace = SRGBColorSpace;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\n\t\t// internal properties\n\n\t\tconst _this = this;\n\n\t\tlet _isContextLost = false;\n\n\t\t// internal state cache\n\n\t\tlet _currentActiveCubeFace = 0;\n\t\tlet _currentActiveMipmapLevel = 0;\n\t\tlet _currentRenderTarget = null;\n\t\tlet _currentMaterialId = -1;\n\n\t\tlet _currentCamera = null;\n\n\t\tconst _currentViewport = new Vector4();\n\t\tconst _currentScissor = new Vector4();\n\t\tlet _currentScissorTest = null;\n\n\t\tconst _currentClearColor = new Color( 0x000000 );\n\t\tlet _currentClearAlpha = 0;\n\n\t\t//\n\n\t\tlet _width = canvas.width;\n\t\tlet _height = canvas.height;\n\n\t\tlet _pixelRatio = 1;\n\t\tlet _opaqueSort = null;\n\t\tlet _transparentSort = null;\n\n\t\tconst _viewport = new Vector4( 0, 0, _width, _height );\n\t\tconst _scissor = new Vector4( 0, 0, _width, _height );\n\t\tlet _scissorTest = false;\n\n\t\t// frustum\n\n\t\tconst _frustum = new Frustum();\n\n\t\t// clipping\n\n\t\tlet _clippingEnabled = false;\n\t\tlet _localClippingEnabled = false;\n\n\t\t// transmission render target scale\n\t\tthis.transmissionResolutionScale = 1.0;\n\n\t\t// camera matrices cache\n\n\t\tconst _currentProjectionMatrix = new Matrix4();\n\t\tconst _projScreenMatrix = new Matrix4();\n\n\t\tconst _vector3 = new Vector3();\n\n\t\tconst _vector4 = new Vector4();\n\n\t\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\t\tlet _renderBackground = false;\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tlet _gl = context;\n\n\t\tfunction getContext( contextName, contextAttributes ) {\n\n\t\t\treturn canvas.getContext( contextName, contextAttributes );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\tconst contextAttributes = {\n\t\t\t\talpha: true,\n\t\t\t\tdepth,\n\t\t\t\tstencil,\n\t\t\t\tantialias,\n\t\t\t\tpremultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer,\n\t\t\t\tpowerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat,\n\t\t\t};\n\n\t\t\t// OffscreenCanvas does not have setAttribute, see #22811\n\t\t\tif ( 'setAttribute' in canvas ) canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\t\t\tcanvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\tcanvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\t\t\tcanvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tconst contextName = 'webgl2';\n\n\t\t\t\t_gl = getContext( contextName, contextAttributes );\n\n\t\t\t\tif ( _gl === null ) {\n\n\t\t\t\t\tif ( getContext( contextName ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tlet extensions, capabilities, state, info;\n\t\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tlet utils, bindingStates, uniformsGroups;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\t\t\textensions.init();\n\n\t\t\tutils = new WebGLUtils( _gl, extensions );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters, utils );\n\n\t\t\tstate = new WebGLState( _gl, extensions );\n\n\t\t\tif ( capabilities.reverseDepthBuffer && reverseDepthBuffer ) {\n\n\t\t\t\tstate.buffers.depth.setReversed( true );\n\n\t\t\t}\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\t\tcubeuvmaps = new WebGLCubeUVMaps( _this );\n\t\t\tattributes = new WebGLAttributes( _gl );\n\t\t\tbindingStates = new WebGLBindingStates( _gl, attributes );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\n\t\t\tclipping = new WebGLClipping( properties );\n\t\t\tprogramCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\n\t\t\tmaterials = new WebGLMaterials( _this, properties );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates( extensions );\n\t\t\tbackground = new WebGLBackground( _this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha );\n\t\t\tshadowMap = new WebGLShadowMap( _this, objects, capabilities );\n\t\t\tuniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.shadowMap = shadowMap;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tconst xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.loseContext();\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.restoreContext();\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) return;\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle = true ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\tcanvas.width = Math.floor( width * _pixelRatio );\n\t\t\tcanvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle === true ) {\n\n\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\tcanvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\tcanvas.width = Math.floor( width * pixelRatio );\n\t\t\tcanvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).round() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).round() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function ( target ) {\n\n\t\t\treturn target.copy( background.getClearColor() );\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor( ...arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha( ...arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color = true, depth = true, stencil = true ) {\n\n\t\t\tlet bits = 0;\n\n\t\t\tif ( color ) {\n\n\t\t\t\t// check if we're trying to clear an integer target\n\t\t\t\tlet isIntegerFormat = false;\n\t\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t\tconst targetFormat = _currentRenderTarget.texture.format;\n\t\t\t\t\tisIntegerFormat = targetFormat === RGBAIntegerFormat ||\n\t\t\t\t\t\ttargetFormat === RGIntegerFormat ||\n\t\t\t\t\t\ttargetFormat === RedIntegerFormat;\n\n\t\t\t\t}\n\n\t\t\t\t// use the appropriate clear functions to clear the target if it's a signed\n\t\t\t\t// or unsigned integer target\n\t\t\t\tif ( isIntegerFormat ) {\n\n\t\t\t\t\tconst targetType = _currentRenderTarget.texture.type;\n\t\t\t\t\tconst isUnsignedType = targetType === UnsignedByteType ||\n\t\t\t\t\t\ttargetType === UnsignedIntType ||\n\t\t\t\t\t\ttargetType === UnsignedShortType ||\n\t\t\t\t\t\ttargetType === UnsignedInt248Type ||\n\t\t\t\t\t\ttargetType === UnsignedShort4444Type ||\n\t\t\t\t\t\ttargetType === UnsignedShort5551Type;\n\n\t\t\t\t\tconst clearColor = background.getClearColor();\n\t\t\t\t\tconst a = background.getClearAlpha();\n\t\t\t\t\tconst r = clearColor.r;\n\t\t\t\t\tconst g = clearColor.g;\n\t\t\t\t\tconst b = clearColor.b;\n\n\t\t\t\t\tif ( isUnsignedType ) {\n\n\t\t\t\t\t\tuintClearColor[ 0 ] = r;\n\t\t\t\t\t\tuintClearColor[ 1 ] = g;\n\t\t\t\t\t\tuintClearColor[ 2 ] = b;\n\t\t\t\t\t\tuintClearColor[ 3 ] = a;\n\t\t\t\t\t\t_gl.clearBufferuiv( _gl.COLOR, 0, uintClearColor );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tintClearColor[ 0 ] = r;\n\t\t\t\t\t\tintClearColor[ 1 ] = g;\n\t\t\t\t\t\tintClearColor[ 2 ] = b;\n\t\t\t\t\t\tintClearColor[ 3 ] = a;\n\t\t\t\t\t\t_gl.clearBufferiv( _gl.COLOR, 0, intClearColor );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbits |= _gl.COLOR_BUFFER_BIT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( depth ) {\n\n\t\t\t\tbits |= _gl.DEPTH_BUFFER_BIT;\n\n\t\t\t}\n\n\t\t\tif ( stencil ) {\n\n\t\t\t\tbits |= _gl.STENCIL_BUFFER_BIT;\n\t\t\t\tthis.state.buffers.stencil.setMask( 0xffffffff );\n\n\t\t\t}\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\tcanvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\tcanvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\t\t\tcanvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );\n\n\t\t\tbackground.dispose();\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tcubeuvmaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\tuniformsGroups.dispose();\n\t\t\tprogramCache.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\txr.removeEventListener( 'sessionstart', onXRSessionStart );\n\t\t\txr.removeEventListener( 'sessionend', onXRSessionEnd );\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tconst infoAutoReset = info.autoReset;\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\t\tconst shadowMapType = shadowMap.type;\n\n\t\t\tinitGLContext();\n\n\t\t\tinfo.autoReset = infoAutoReset;\n\t\t\tshadowMap.enabled = shadowMapEnabled;\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\t\tshadowMap.type = shadowMapType;\n\n\t\t}\n\n\t\tfunction onContextCreationError( event ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tconst material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReferences( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReferences( material ) {\n\n\t\t\tconst programs = properties.get( material ).programs;\n\n\t\t\tif ( programs !== undefined ) {\n\n\t\t\t\tprograms.forEach( function ( program ) {\n\n\t\t\t\t\tprogramCache.releaseProgram( program );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tprogramCache.releaseShaderCache( material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tconst program = setProgram( camera, scene, geometry, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\t//\n\n\t\t\tlet index = geometry.index;\n\t\t\tlet rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\n\t\t\t\tif ( index === undefined ) return;\n\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst drawRange = geometry.drawRange;\n\t\t\tconst position = geometry.attributes.position;\n\n\t\t\tlet drawStart = drawRange.start * rangeFactor;\n\t\t\tlet drawEnd = ( drawRange.start + drawRange.count ) * rangeFactor;\n\n\t\t\tif ( group !== null ) {\n\n\t\t\t\tdrawStart = Math.max( drawStart, group.start * rangeFactor );\n\t\t\t\tdrawEnd = Math.min( drawEnd, ( group.start + group.count ) * rangeFactor );\n\n\t\t\t}\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdrawStart = Math.max( drawStart, 0 );\n\t\t\t\tdrawEnd = Math.min( drawEnd, index.count );\n\n\t\t\t} else if ( position !== undefined && position !== null ) {\n\n\t\t\t\tdrawStart = Math.max( drawStart, 0 );\n\t\t\t\tdrawEnd = Math.min( drawEnd, position.count );\n\n\t\t\t}\n\n\t\t\tconst drawCount = drawEnd - drawStart;\n\n\t\t\tif ( drawCount < 0 || drawCount === Infinity ) return;\n\n\t\t\t//\n\n\t\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\t\tlet attribute;\n\t\t\tlet renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tlet lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t}\n\n\t\t\tif ( object.isBatchedMesh ) {\n\n\t\t\t\tif ( object._multiDrawInstances !== null ) {\n\n\t\t\t\t\t// @deprecated, r174\n\t\t\t\t\twarnOnce( 'THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.' );\n\t\t\t\t\trenderer.renderMultiDrawInstances( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! extensions.get( 'WEBGL_multi_draw' ) ) {\n\n\t\t\t\t\t\tconst starts = object._multiDrawStarts;\n\t\t\t\t\t\tconst counts = object._multiDrawCounts;\n\t\t\t\t\t\tconst drawCount = object._multiDrawCount;\n\t\t\t\t\t\tconst bytesPerElement = index ? attributes.get( index ).bytesPerElement : 1;\n\t\t\t\t\t\tconst uniforms = properties.get( material ).currentProgram.getUniforms();\n\t\t\t\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\t\t\t\tuniforms.setValue( _gl, '_gl_DrawID', i );\n\t\t\t\t\t\t\trenderer.render( starts[ i ] / bytesPerElement, counts[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trenderer.renderMultiDraw( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tconst maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;\n\t\t\t\tconst instanceCount = Math.min( geometry.instanceCount, maxInstanceCount );\n\n\t\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Compile\n\n\t\tfunction prepareMaterial( material, scene, object ) {\n\n\t\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\t\tmaterial.side = BackSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t} else {\n\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.compile = function ( scene, camera, targetScene = null ) {\n\n\t\t\tif ( targetScene === null ) targetScene = scene;\n\n\t\t\tcurrentRenderState = renderStates.get( targetScene );\n\t\t\tcurrentRenderState.init( camera );\n\n\t\t\trenderStateStack.push( currentRenderState );\n\n\t\t\t// gather lights from both the target scene and the new object that will be added to the scene.\n\n\t\t\ttargetScene.traverseVisible( function ( object ) {\n\n\t\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( scene !== targetScene ) {\n\n\t\t\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tcurrentRenderState.setupLights();\n\n\t\t\t// Only initialize materials in the new scene, not the targetScene.\n\n\t\t\tconst materials = new Set();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( ! ( object.isMesh || object.isPoints || object.isLine || object.isSprite ) ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( material ) {\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\t\tconst material2 = material[ i ];\n\n\t\t\t\t\t\t\tprepareMaterial( material2, targetScene, object );\n\t\t\t\t\t\t\tmaterials.add( material2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tprepareMaterial( material, targetScene, object );\n\t\t\t\t\t\tmaterials.add( material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState = renderStateStack.pop();\n\n\t\t\treturn materials;\n\n\t\t};\n\n\t\t// compileAsync\n\n\t\tthis.compileAsync = function ( scene, camera, targetScene = null ) {\n\n\t\t\tconst materials = this.compile( scene, camera, targetScene );\n\n\t\t\t// Wait for all the materials in the new object to indicate that they're\n\t\t\t// ready to be used before resolving the promise.\n\n\t\t\treturn new Promise( ( resolve ) => {\n\n\t\t\t\tfunction checkMaterialsReady() {\n\n\t\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\t\tconst materialProperties = properties.get( material );\n\t\t\t\t\t\tconst program = materialProperties.currentProgram;\n\n\t\t\t\t\t\tif ( program.isReady() ) {\n\n\t\t\t\t\t\t\t// remove any programs that report they're ready to use from the list\n\t\t\t\t\t\t\tmaterials.delete( material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\t// once the list of compiling materials is empty, call the callback\n\n\t\t\t\t\tif ( materials.size === 0 ) {\n\n\t\t\t\t\t\tresolve( scene );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if some materials are still not ready, wait a bit and check again\n\n\t\t\t\t\tsetTimeout( checkMaterialsReady, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extensions.get( 'KHR_parallel_shader_compile' ) !== null ) {\n\n\t\t\t\t\t// If we can check the compilation status of the materials without\n\t\t\t\t\t// blocking then do so right away.\n\n\t\t\t\t\tcheckMaterialsReady();\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise start by waiting a bit to give the materials we just\n\t\t\t\t\t// initialized a chance to finish.\n\n\t\t\t\t\tsetTimeout( checkMaterialsReady, 10 );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t\t}\n\n\t\tfunction onXRSessionStart() {\n\n\t\t\tanimation.stop();\n\n\t\t}\n\n\t\tfunction onXRSessionEnd() {\n\n\t\t\tanimation.start();\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof self !== 'undefined' ) animation.setContext( self );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t\t};\n\n\t\txr.addEventListener( 'sessionstart', onXRSessionStart );\n\t\txr.addEventListener( 'sessionend', onXRSessionEnd );\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost === true ) return;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\t\tif ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\n\n\t\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\n\t\t\t}\n\n\t\t\t//\n\t\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\n\n\t\t\tcurrentRenderState = renderStates.get( scene, renderStateStack.length );\n\t\t\tcurrentRenderState.init( camera );\n\n\t\t\trenderStateStack.push( currentRenderState );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, renderListStack.length );\n\t\t\tcurrentRenderList.init();\n\n\t\t\trenderListStack.push( currentRenderList );\n\n\t\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\t\tconst depthSensingMesh = _this.xr.getDepthSensingMesh();\n\n\t\t\t\tif ( depthSensingMesh !== null ) {\n\n\t\t\t\t\tprojectObject( depthSensingMesh, camera, - Infinity, _this.sortObjects );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t_renderBackground = xr.enabled === false || xr.isPresenting === false || xr.hasDepthSensing() === false;\n\t\t\tif ( _renderBackground ) {\n\n\t\t\t\tbackground.addToRenderList( currentRenderList, scene );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tthis.info.render.frame ++;\n\n\t\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\n\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tif ( _clippingEnabled === true ) clipping.endShadows();\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t\t// render scene\n\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\n\t\t\tcurrentRenderState.setupLights();\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\tif ( transmissiveObjects.length > 0 ) {\n\n\t\t\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst camera2 = cameras[ i ];\n\n\t\t\t\t\t\trenderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( _renderBackground ) background.render( scene );\n\n\t\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst camera2 = cameras[ i ];\n\n\t\t\t\t\trenderScene( currentRenderList, scene, camera2, camera2.viewport );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera );\n\n\t\t\t\tif ( _renderBackground ) background.render( scene );\n\n\t\t\t\trenderScene( currentRenderList, scene, camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null && _currentActiveMipmapLevel === 0 ) {\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n\n\t\t\t// _gl.finish();\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null;\n\n\t\t\trenderStateStack.pop();\n\n\t\t\tif ( renderStateStack.length > 0 ) {\n\n\t\t\t\tcurrentRenderState = renderStateStack[ renderStateStack.length - 1 ];\n\n\t\t\t\tif ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, currentRenderState.state.camera );\n\n\t\t\t} else {\n\n\t\t\t\tcurrentRenderState = null;\n\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif ( renderListStack.length > 0 ) {\n\n\t\t\t\tcurrentRenderList = renderListStack[ renderListStack.length - 1 ];\n\n\t\t\t} else {\n\n\t\t\t\tcurrentRenderList = null;\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tconst visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector4.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector4.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\tif ( object.boundingSphere !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\n\t\t\t\t\t\t\t\t_vector4.copy( object.boundingSphere.center );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\t\t\t\t\t\t\t_vector4.copy( geometry.boundingSphere.center );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_vector4\n\t\t\t\t\t\t\t\t.applyMatrix4( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector4.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector4.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderScene( currentRenderList, scene, camera, viewport ) {\n\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\t\tconst transparentObjects = currentRenderList.transparent;\n\n\t\t\tcurrentRenderState.setupLightsView( camera );\n\n\t\t\tif ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );\n\n\t\t\tif ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\n\n\t\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n\t\t\tif ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\n\t\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t}\n\n\t\tfunction renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera ) {\n\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tif ( overrideMaterial !== null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( currentRenderState.state.transmissionRenderTarget[ camera.id ] === undefined ) {\n\n\t\t\t\tcurrentRenderState.state.transmissionRenderTarget[ camera.id ] = new WebGLRenderTarget( 1, 1, {\n\t\t\t\t\tgenerateMipmaps: true,\n\t\t\t\t\ttype: ( extensions.has( 'EXT_color_buffer_half_float' ) || extensions.has( 'EXT_color_buffer_float' ) ) ? HalfFloatType : UnsignedByteType,\n\t\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\t\tsamples: 4,\n\t\t\t\t\tstencilBuffer: stencil,\n\t\t\t\t\tresolveDepthBuffer: false,\n\t\t\t\t\tresolveStencilBuffer: false,\n\t\t\t\t\tcolorSpace: ColorManagement.workingColorSpace,\n\t\t\t\t} );\n\n\t\t\t\t// debug\n\n\t\t\t\t/*\n\t\t\t\tconst geometry = new PlaneGeometry();\n\t\t\t\tconst material = new MeshBasicMaterial( { map: _transmissionRenderTarget.texture } );\n\n\t\t\t\tconst mesh = new Mesh( geometry, material );\n\t\t\t\tscene.add( mesh );\n\t\t\t\t*/\n\n\t\t\t}\n\n\t\t\tconst transmissionRenderTarget = currentRenderState.state.transmissionRenderTarget[ camera.id ];\n\n\t\t\tconst activeViewport = camera.viewport || _currentViewport;\n\t\t\ttransmissionRenderTarget.setSize( activeViewport.z * _this.transmissionResolutionScale, activeViewport.w * _this.transmissionResolutionScale );\n\n\t\t\t//\n\n\t\t\tconst currentRenderTarget = _this.getRenderTarget();\n\t\t\t_this.setRenderTarget( transmissionRenderTarget );\n\n\t\t\t_this.getClearColor( _currentClearColor );\n\t\t\t_currentClearAlpha = _this.getClearAlpha();\n\t\t\tif ( _currentClearAlpha < 1 ) _this.setClearColor( 0xffffff, 0.5 );\n\n\t\t\t_this.clear();\n\n\t\t\tif ( _renderBackground ) background.render( scene );\n\n\t\t\t// Turn off the features which can affect the frag color for opaque objects pass.\n\t\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\t\t\tconst currentToneMapping = _this.toneMapping;\n\t\t\t_this.toneMapping = NoToneMapping;\n\n\t\t\t// Remove viewport from camera to avoid nested render calls resetting viewport to it (e.g Reflector).\n\t\t\t// Transmission render pass requires viewport to match the transmissionRenderTarget.\n\t\t\tconst currentCameraViewport = camera.viewport;\n\t\t\tif ( camera.viewport !== undefined ) camera.viewport = undefined;\n\n\t\t\tcurrentRenderState.setupLightsView( camera );\n\n\t\t\tif ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );\n\n\t\t\trenderObjects( opaqueObjects, scene, camera );\n\n\t\t\ttextures.updateMultisampleRenderTarget( transmissionRenderTarget );\n\t\t\ttextures.updateRenderTargetMipmap( transmissionRenderTarget );\n\n\t\t\tif ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === false ) { // see #28131\n\n\t\t\t\tlet renderTargetNeedsUpdate = false;\n\n\t\t\t\tfor ( let i = 0, l = transmissiveObjects.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst renderItem = transmissiveObjects[ i ];\n\n\t\t\t\t\tconst object = renderItem.object;\n\t\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\t\tconst material = renderItem.material;\n\t\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\t\tif ( material.side === DoubleSide && object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\t\tconst currentSide = material.side;\n\n\t\t\t\t\t\tmaterial.side = BackSide;\n\t\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t\t\tmaterial.side = currentSide;\n\t\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t\t\trenderTargetNeedsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderTargetNeedsUpdate === true ) {\n\n\t\t\t\t\ttextures.updateMultisampleRenderTarget( transmissionRenderTarget );\n\t\t\t\t\ttextures.updateRenderTargetMipmap( transmissionRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_this.setRenderTarget( currentRenderTarget );\n\n\t\t\t_this.setClearColor( _currentClearColor, _currentClearAlpha );\n\n\t\t\tif ( currentCameraViewport !== undefined ) camera.viewport = currentCameraViewport;\n\n\t\t\t_this.toneMapping = currentToneMapping;\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tmaterial.onBeforeRender( _this, scene, camera, geometry, object, group );\n\n\t\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\t\tmaterial.side = BackSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t\t}\n\n\t\tfunction getProgram( material, scene, object ) {\n\n\t\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tconst materialProperties = properties.get( material );\n\n\t\t\tconst lights = currentRenderState.state.lights;\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tconst lightsStateVersion = lights.state.version;\n\n\t\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tlet programs = materialProperties.programs;\n\n\t\t\t// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\n\t\t\tmaterialProperties.envMapRotation = ( materialProperties.environment !== null && material.envMap === null ) ? scene.environmentRotation : material.envMapRotation;\n\n\t\t\tif ( programs === undefined ) {\n\n\t\t\t\t// new material\n\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t\tprograms = new Map();\n\t\t\t\tmaterialProperties.programs = programs;\n\n\t\t\t}\n\n\t\t\tlet program = programs.get( programCacheKey );\n\n\t\t\tif ( program !== undefined ) {\n\n\t\t\t\t// early out if program and light state is identical\n\n\t\t\t\tif ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\n\n\t\t\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t\t\treturn program;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\t\t\t\tprograms.set( programCacheKey, program );\n\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\n\t\t\t}\n\n\t\t\tconst uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\n\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t\t}\n\n\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotLightMatrix.value = lights.state.spotLightMatrix;\n\t\t\t\tuniforms.spotLightMap.value = lights.state.spotLightMap;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tmaterialProperties.currentProgram = program;\n\t\t\tmaterialProperties.uniformsList = null;\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction getUniformList( materialProperties ) {\n\n\t\t\tif ( materialProperties.uniformsList === null ) {\n\n\t\t\t\tconst progUniforms = materialProperties.currentProgram.getUniforms();\n\t\t\t\tmaterialProperties.uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, materialProperties.uniforms );\n\n\t\t\t}\n\n\t\t\treturn materialProperties.uniformsList;\n\n\t\t}\n\n\t\tfunction updateCommonMaterialProperties( material, parameters ) {\n\n\t\t\tconst materialProperties = properties.get( material );\n\n\t\t\tmaterialProperties.outputColorSpace = parameters.outputColorSpace;\n\t\t\tmaterialProperties.batching = parameters.batching;\n\t\t\tmaterialProperties.batchingColor = parameters.batchingColor;\n\t\t\tmaterialProperties.instancing = parameters.instancing;\n\t\t\tmaterialProperties.instancingColor = parameters.instancingColor;\n\t\t\tmaterialProperties.instancingMorph = parameters.instancingMorph;\n\t\t\tmaterialProperties.skinning = parameters.skinning;\n\t\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\t\tmaterialProperties.morphColors = parameters.morphColors;\n\t\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\t\t\tmaterialProperties.toneMapping = parameters.toneMapping;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, geometry, material, object ) {\n\n\t\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst colorSpace = ( _currentRenderTarget === null ) ? _this.outputColorSpace : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace );\n\t\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\t\tconst vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n\t\t\tconst vertexTangents = !! geometry.attributes.tangent && ( !! material.normalMap || material.anisotropy > 0 );\n\t\t\tconst morphTargets = !! geometry.morphAttributes.position;\n\t\t\tconst morphNormals = !! geometry.morphAttributes.normal;\n\t\t\tconst morphColors = !! geometry.morphAttributes.color;\n\n\t\t\tlet toneMapping = NoToneMapping;\n\n\t\t\tif ( material.toneMapped ) {\n\n\t\t\t\tif ( _currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true ) {\n\n\t\t\t\t\ttoneMapping = _this.toneMapping;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\t\tconst materialProperties = properties.get( material );\n\t\t\tconst lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled === true ) {\n\n\t\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\t\tconst useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet needsProgramChange = false;\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.outputColorSpace !== colorSpace ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isBatchedMesh && materialProperties.batching === false ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( ! object.isBatchedMesh && materialProperties.batching === true ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isBatchedMesh && materialProperties.batchingColor === true && object.colorTexture === null ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isBatchedMesh && materialProperties.batchingColor === false && object.colorTexture !== null ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancingMorph === true && object.morphTexture === null ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancingMorph === false && object.morphTexture !== null ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( material.fog === true && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.vertexTangents !== vertexTangents ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.morphTargets !== morphTargets ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.morphNormals !== morphNormals ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.morphColors !== morphColors ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.toneMapping !== toneMapping ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.morphTargetsCount !== morphTargetsCount ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tneedsProgramChange = true;\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet program = materialProperties.currentProgram;\n\n\t\t\tif ( needsProgramChange === true ) {\n\n\t\t\t\tprogram = getProgram( material, scene, object );\n\n\t\t\t}\n\n\t\t\tlet refreshProgram = false;\n\t\t\tlet refreshMaterial = false;\n\t\t\tlet refreshLights = false;\n\n\t\t\tconst p_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\t// common camera uniforms\n\n\t\t\t\tconst reverseDepthBuffer = state.buffers.depth.getReversed();\n\n\t\t\t\tif ( reverseDepthBuffer ) {\n\n\t\t\t\t\t_currentProjectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\t\t\ttoNormalizedProjectionMatrix( _currentProjectionMatrix );\n\t\t\t\t\ttoReversedProjectionMatrix( _currentProjectionMatrix );\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', _currentProjectionMatrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl, _vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// consider moving isOrthographic to UniformLib and WebGLMaterials, see https://github.com/mrdoob/three.js/pull/26467#issuecomment-1645185067\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning and morph target uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone and morph texture must go before other textures\n\t\t\t// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tconst skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( object.isBatchedMesh ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'batchingTexture' );\n\t\t\t\tp_uniforms.setValue( _gl, 'batchingTexture', object._matricesTexture, textures );\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'batchingIdTexture' );\n\t\t\t\tp_uniforms.setValue( _gl, 'batchingIdTexture', object._indirectTexture, textures );\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'batchingColorTexture' );\n\t\t\t\tif ( object._colorsTexture !== null ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'batchingColorTexture', object._colorsTexture, textures );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\t\tif ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined ) ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, program );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\t// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512\n\n\t\t\tif ( material.isMeshGouraudMaterial && material.envMap !== null ) {\n\n\t\t\t\tm_uniforms.envMap.value = envMap;\n\n\t\t\t\tm_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? -1 : 1;\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshStandardMaterial && material.envMap === null && scene.environment !== null ) {\n\n\t\t\t\tm_uniforms.envMapIntensity.value = scene.environmentIntensity;\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog === true ) {\n\n\t\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, currentRenderState.state.transmissionRenderTarget[ camera.id ] );\n\n\t\t\t\tWebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\t// UBOs\n\n\t\t\tif ( material.isShaderMaterial || material.isRawShaderMaterial ) {\n\n\t\t\t\tconst groups = material.uniformsGroups;\n\n\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\t\tuniformsGroups.update( group, program );\n\t\t\t\t\tuniformsGroups.bind( group, program );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {\n\n\t\t\tproperties.get( renderTarget.texture ).__webglTexture = colorTexture;\n\t\t\tproperties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\trenderTargetProperties.__hasExternalTextures = true;\n\n\t\t\trenderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;\n\n\t\t\tif ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\t\t// The multisample_render_to_texture extension doesn't work properly if there\n\t\t\t\t// are midframe flushes and an external depth buffer. Disable use of the extension.\n\t\t\t\tif ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );\n\t\t\t\t\trenderTargetProperties.__useRenderToTexture = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\trenderTargetProperties.__webglFramebuffer = defaultFramebuffer;\n\t\t\trenderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;\n\n\t\t};\n\n\t\tconst _scratchFrameBuffer = _gl.createFramebuffer();\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tlet useDefaultFramebuffer = true;\n\t\t\tlet framebuffer = null;\n\t\t\tlet isCube = false;\n\t\t\tlet isRenderTarget3D = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\tif ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {\n\n\t\t\t\t\t// We need to make sure to rebind the framebuffer.\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\t\t\t\tuseDefaultFramebuffer = false;\n\n\t\t\t\t} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {\n\n\t\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t\t} else if ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\t\t\t// Color and depth texture must be rebound in order for the swapchain to update.\n\t\t\t\t\ttextures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );\n\n\t\t\t\t} else if ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t// check if the depth texture is already bound to the frame buffer and that it's been initialized\n\t\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\t\t\t\t\tif ( renderTargetProperties.__boundDepthTexture !== depthTexture ) {\n\n\t\t\t\t\t\t// check if the depth texture is compatible\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tdepthTexture !== null &&\n\t\t\t\t\t\t\tproperties.has( depthTexture ) &&\n\t\t\t\t\t\t\t( renderTarget.width !== depthTexture.image.width || renderTarget.height !== depthTexture.image.height )\n\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\tthrow new Error( 'WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Swap the depth buffer to the currently attached one\n\t\t\t\t\t\ttextures.setupDepthRenderbuffer( renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst texture = renderTarget.texture;\n\n\t\t\t\tif ( texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tisRenderTarget3D = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tif ( Array.isArray( __webglFramebuffer[ activeCubeFace ] ) ) {\n\n\t\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ][ activeMipmapLevel ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( ( renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( Array.isArray( __webglFramebuffer ) ) {\n\n\t\t\t\t\t\tframebuffer = __webglFramebuffer[ activeMipmapLevel ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\t// Use a scratch frame buffer if rendering to a mip level to avoid depth buffers\n\t\t\t// being bound that are different sizes.\n\t\t\tif ( activeMipmapLevel !== 0 ) {\n\n\t\t\t\tframebuffer = _scratchFrameBuffer;\n\n\t\t\t}\n\n\t\t\tconst framebufferBound = state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\tif ( framebufferBound && useDefaultFramebuffer ) {\n\n\t\t\t\tstate.drawBuffers( renderTarget, framebuffer );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t\t} else if ( isRenderTarget3D ) {\n\n\t\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t\tconst layer = activeCubeFace;\n\t\t\t\t_gl.framebufferTextureLayer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel, layer );\n\n\t\t\t} else if ( renderTarget !== null && activeMipmapLevel !== 0 ) {\n\n\t\t\t\t// Only bind the frame buffer if we are using a scratch frame buffer to render to a mipmap.\n\t\t\t\t// If we rebind the texture when using a multi sample buffer then an error about inconsistent samples will be thrown.\n\t\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t\t}\n\n\t\t\t_currentMaterialId = -1; // reset current material to ensure correct uniform bindings\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\t\tif ( ! capabilities.textureFormatReadable( textureFormat ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! capabilities.textureTypeReadable( textureType ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\t// restore framebuffer of current render target if necessary\n\n\t\t\t\t\tconst framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixelsAsync = async function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\tif ( ! capabilities.textureFormatReadable( textureFormat ) ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! capabilities.textureTypeReadable( textureType ) ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\n\t\t\t\t}\n\n\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t// set the active frame buffer to the one we want to read\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t\tconst glBuffer = _gl.createBuffer();\n\t\t\t\t\t_gl.bindBuffer( _gl.PIXEL_PACK_BUFFER, glBuffer );\n\t\t\t\t\t_gl.bufferData( _gl.PIXEL_PACK_BUFFER, buffer.byteLength, _gl.STREAM_READ );\n\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), 0 );\n\n\t\t\t\t\t// reset the frame buffer to the currently set buffer before waiting\n\t\t\t\t\tconst currFramebuffer = _currentRenderTarget !== null ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, currFramebuffer );\n\n\t\t\t\t\t// check if the commands have finished every 8 ms\n\t\t\t\t\tconst sync = _gl.fenceSync( _gl.SYNC_GPU_COMMANDS_COMPLETE, 0 );\n\n\t\t\t\t\t_gl.flush();\n\n\t\t\t\t\tawait probeAsync( _gl, sync, 4 );\n\n\t\t\t\t\t// read the data and delete the buffer\n\t\t\t\t\t_gl.bindBuffer( _gl.PIXEL_PACK_BUFFER, glBuffer );\n\t\t\t\t\t_gl.getBufferSubData( _gl.PIXEL_PACK_BUFFER, 0, buffer );\n\t\t\t\t\t_gl.deleteBuffer( glBuffer );\n\t\t\t\t\t_gl.deleteSync( sync );\n\n\t\t\t\t\treturn buffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( texture, position = null, level = 0 ) {\n\n\t\t\t// support previous signature with position first\n\t\t\tif ( texture.isTexture !== true ) {\n\n\t\t\t\t// @deprecated, r165\n\t\t\t\twarnOnce( 'WebGLRenderer: copyFramebufferToTexture function signature has changed.' );\n\n\t\t\t\tposition = arguments[ 0 ] || null;\n\t\t\t\ttexture = arguments[ 1 ];\n\n\t\t\t}\n\n\t\t\tconst levelScale = Math.pow( 2, - level );\n\t\t\tconst width = Math.floor( texture.image.width * levelScale );\n\t\t\tconst height = Math.floor( texture.image.height * levelScale );\n\n\t\t\tconst x = position !== null ? position.x : 0;\n\t\t\tconst y = position !== null ? position.y : 0;\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexSubImage2D( _gl.TEXTURE_2D, level, 0, 0, x, y, width, height );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tconst _srcFramebuffer = _gl.createFramebuffer();\n\t\tconst _dstFramebuffer = _gl.createFramebuffer();\n\t\tthis.copyTextureToTexture = function ( srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = null ) {\n\n\t\t\t// support previous signature with dstPosition first\n\t\t\tif ( srcTexture.isTexture !== true ) {\n\n\t\t\t\t// @deprecated, r165\n\t\t\t\twarnOnce( 'WebGLRenderer: copyTextureToTexture function signature has changed.' );\n\n\t\t\t\tdstPosition = arguments[ 0 ] || null;\n\t\t\t\tsrcTexture = arguments[ 1 ];\n\t\t\t\tdstTexture = arguments[ 2 ];\n\t\t\t\tdstLevel = arguments[ 3 ] || 0;\n\t\t\t\tsrcRegion = null;\n\n\t\t\t}\n\n\t\t\t// support the previous signature with just a single dst mipmap level\n\t\t\tif ( dstLevel === null ) {\n\n\t\t\t\tif ( srcLevel !== 0 ) {\n\n\t\t\t\t\t// @deprecated, r171\n\t\t\t\t\twarnOnce( 'WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels.' );\n\t\t\t\t\tdstLevel = srcLevel;\n\t\t\t\t\tsrcLevel = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdstLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// gather the necessary dimensions to copy\n\t\t\tlet width, height, depth, minX, minY, minZ;\n\t\t\tlet dstX, dstY, dstZ;\n\t\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ dstLevel ] : srcTexture.image;\n\t\t\tif ( srcRegion !== null ) {\n\n\t\t\t\twidth = srcRegion.max.x - srcRegion.min.x;\n\t\t\t\theight = srcRegion.max.y - srcRegion.min.y;\n\t\t\t\tdepth = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;\n\t\t\t\tminX = srcRegion.min.x;\n\t\t\t\tminY = srcRegion.min.y;\n\t\t\t\tminZ = srcRegion.isBox3 ? srcRegion.min.z : 0;\n\n\t\t\t} else {\n\n\t\t\t\tconst levelScale = Math.pow( 2, - srcLevel );\n\t\t\t\twidth = Math.floor( image.width * levelScale );\n\t\t\t\theight = Math.floor( image.height * levelScale );\n\t\t\t\tif ( srcTexture.isDataArrayTexture ) {\n\n\t\t\t\t\tdepth = image.depth;\n\n\t\t\t\t} else if ( srcTexture.isData3DTexture ) {\n\n\t\t\t\t\tdepth = Math.floor( image.depth * levelScale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdepth = 1;\n\n\t\t\t\t}\n\n\t\t\t\tminX = 0;\n\t\t\t\tminY = 0;\n\t\t\t\tminZ = 0;\n\n\t\t\t}\n\n\t\t\tif ( dstPosition !== null ) {\n\n\t\t\t\tdstX = dstPosition.x;\n\t\t\t\tdstY = dstPosition.y;\n\t\t\t\tdstZ = dstPosition.z;\n\n\t\t\t} else {\n\n\t\t\t\tdstX = 0;\n\t\t\t\tdstY = 0;\n\t\t\t\tdstZ = 0;\n\n\t\t\t}\n\n\t\t\t// Set up the destination target\n\t\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\t\tconst glType = utils.convert( dstTexture.type );\n\t\t\tlet glTarget;\n\n\t\t\tif ( dstTexture.isData3DTexture ) {\n\n\t\t\t\ttextures.setTexture3D( dstTexture, 0 );\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\n\n\t\t\t} else if ( dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture ) {\n\n\t\t\t\ttextures.setTexture2DArray( dstTexture, 0 );\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\n\n\t\t\t} else {\n\n\t\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\t\t\t\tglTarget = _gl.TEXTURE_2D;\n\n\t\t\t}\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\n\n\t\t\t// used for copying data from cpu\n\t\t\tconst currentUnpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );\n\t\t\tconst currentUnpackImageHeight = _gl.getParameter( _gl.UNPACK_IMAGE_HEIGHT );\n\t\t\tconst currentUnpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );\n\t\t\tconst currentUnpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );\n\t\t\tconst currentUnpackSkipImages = _gl.getParameter( _gl.UNPACK_SKIP_IMAGES );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, image.height );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, minX );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, minY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, minZ );\n\n\t\t\t// set up the src texture\n\t\t\tconst isSrc3D = srcTexture.isDataArrayTexture || srcTexture.isData3DTexture;\n\t\t\tconst isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture;\n\t\t\tif ( srcTexture.isDepthTexture ) {\n\n\t\t\t\tconst srcTextureProperties = properties.get( srcTexture );\n\t\t\t\tconst dstTextureProperties = properties.get( dstTexture );\n\t\t\t\tconst srcRenderTargetProperties = properties.get( srcTextureProperties.__renderTarget );\n\t\t\t\tconst dstRenderTargetProperties = properties.get( dstTextureProperties.__renderTarget );\n\t\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, srcRenderTargetProperties.__webglFramebuffer );\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, dstRenderTargetProperties.__webglFramebuffer );\n\n\t\t\t\tfor ( let i = 0; i < depth; i ++ ) {\n\n\t\t\t\t\t// if the source or destination are a 3d target then a layer needs to be bound\n\t\t\t\t\tif ( isSrc3D ) {\n\n\t\t\t\t\t\t_gl.framebufferTextureLayer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get( srcTexture ).__webglTexture, srcLevel, minZ + i );\n\t\t\t\t\t\t_gl.framebufferTextureLayer( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get( dstTexture ).__webglTexture, dstLevel, dstZ + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.blitFramebuffer( minX, minY, width, height, dstX, dstY, width, height, _gl.DEPTH_BUFFER_BIT, _gl.NEAREST );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );\n\n\t\t\t} else if ( srcLevel !== 0 || srcTexture.isRenderTargetTexture || properties.has( srcTexture ) ) {\n\n\t\t\t\t// get the appropriate frame buffers\n\t\t\t\tconst srcTextureProperties = properties.get( srcTexture );\n\t\t\t\tconst dstTextureProperties = properties.get( dstTexture );\n\n\t\t\t\t// bind the frame buffer targets\n\t\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, _srcFramebuffer );\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, _dstFramebuffer );\n\n\t\t\t\tfor ( let i = 0; i < depth; i ++ ) {\n\n\t\t\t\t\t// assign the correct layers and mip maps to the frame buffers\n\t\t\t\t\tif ( isSrc3D ) {\n\n\t\t\t\t\t\t_gl.framebufferTextureLayer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, srcTextureProperties.__webglTexture, srcLevel, minZ + i );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, srcTextureProperties.__webglTexture, srcLevel );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isDst3D ) {\n\n\t\t\t\t\t\t_gl.framebufferTextureLayer( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, dstTextureProperties.__webglTexture, dstLevel, dstZ + i );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, dstTextureProperties.__webglTexture, dstLevel );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// copy the data using the fastest function that can achieve the copy\n\t\t\t\t\tif ( srcLevel !== 0 ) {\n\n\t\t\t\t\t\t_gl.blitFramebuffer( minX, minY, width, height, dstX, dstY, width, height, _gl.COLOR_BUFFER_BIT, _gl.NEAREST );\n\n\t\t\t\t\t} else if ( isDst3D ) {\n\n\t\t\t\t\t\t_gl.copyTexSubImage3D( glTarget, dstLevel, dstX, dstY, dstZ + i, minX, minY, width, height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_gl.copyTexSubImage2D( glTarget, dstLevel, dstX, dstY, minX, minY, width, height );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// unbind read, draw buffers\n\t\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isDst3D ) {\n\n\t\t\t\t\t// copy data into the 3d texture\n\t\t\t\t\tif ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {\n\n\t\t\t\t\t\t_gl.texSubImage3D( glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image.data );\n\n\t\t\t\t\t} else if ( dstTexture.isCompressedArrayTexture ) {\n\n\t\t\t\t\t\t_gl.compressedTexSubImage3D( glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, image.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_gl.texSubImage3D( glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// copy data into the 2d texture\n\t\t\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image.data );\n\n\t\t\t\t\t} else if ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t\t\t_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, dstLevel, dstX, dstY, image.width, image.height, glFormat, image.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// reset values\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages );\n\n\t\t\t// Generate mipmaps only when copying level 0\n\t\t\tif ( dstLevel === 0 && dstTexture.generateMipmaps ) {\n\n\t\t\t\t_gl.generateMipmap( glTarget );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function ( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {\n\n\t\t\t// support previous signature with source box first\n\t\t\tif ( srcTexture.isTexture !== true ) {\n\n\t\t\t\t// @deprecated, r165\n\t\t\t\twarnOnce( 'WebGLRenderer: copyTextureToTexture3D function signature has changed.' );\n\n\t\t\t\tsrcRegion = arguments[ 0 ] || null;\n\t\t\t\tdstPosition = arguments[ 1 ] || null;\n\t\t\t\tsrcTexture = arguments[ 2 ];\n\t\t\t\tdstTexture = arguments[ 3 ];\n\t\t\t\tlevel = arguments[ 4 ] || 0;\n\n\t\t\t}\n\n\t\t\t// @deprecated, r170\n\t\t\twarnOnce( 'WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use \"copyTextureToTexture\" instead.' );\n\n\t\t\treturn this.copyTextureToTexture( srcTexture, dstTexture, srcRegion, dstPosition, level );\n\n\t\t};\n\n\t\tthis.initRenderTarget = function ( target ) {\n\n\t\t\tif ( properties.get( target ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( target );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\tif ( texture.isCubeTexture ) {\n\n\t\t\t\ttextures.setTextureCube( texture, 0 );\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\ttextures.setTexture3D( texture, 0 );\n\n\t\t\t} else if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\t\ttextures.setTexture2DArray( texture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.resetState = function () {\n\n\t\t\t_currentActiveCubeFace = 0;\n\t\t\t_currentActiveMipmapLevel = 0;\n\t\t\t_currentRenderTarget = null;\n\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tget coordinateSystem() {\n\n\t\treturn WebGLCoordinateSystem;\n\n\t}\n\n\tget outputColorSpace() {\n\n\t\treturn this._outputColorSpace;\n\n\t}\n\n\tset outputColorSpace( colorSpace ) {\n\n\t\tthis._outputColorSpace = colorSpace;\n\n\t\tconst gl = this.getContext();\n\t\tgl.drawingBufferColorspace = ColorManagement._getDrawingBufferColorSpace( colorSpace );\n\t\tgl.unpackColorSpace = ColorManagement._getUnpackColorSpace();\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveBlending, AgXToneMapping, AlphaFormat, AlwaysCompare, AlwaysDepth, ArrayCamera, BackSide, BoxGeometry, BufferAttribute, BufferGeometry, ByteType, CineonToneMapping, ClampToEdgeWrapping, Color, ColorManagement, ConstantAlphaFactor, ConstantColorFactor, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeUVReflectionMapping, CullFaceBack, CullFaceFront, CullFaceNone, CustomBlending, CustomToneMapping, Data3DTexture, DataArrayTexture, DepthFormat, DepthStencilFormat, DepthTexture, DoubleSide, DstAlphaFactor, DstColorFactor, EqualCompare, EqualDepth, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, FloatType, FrontSide, Frustum, GLSL3, GreaterCompare, GreaterDepth, GreaterEqualCompare, GreaterEqualDepth, HalfFloatType, IntType, Layers, LessCompare, LessDepth, LessEqualCompare, LessEqualDepth, LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, LinearTransfer, LuminanceAlphaFormat, LuminanceFormat, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeutralToneMapping, NeverCompare, NeverDepth, NoBlending, NoColorSpace, NoToneMapping, NormalBlending, NotEqualCompare, NotEqualDepth, ObjectSpaceNormalMap, OneFactor, OneMinusConstantAlphaFactor, OneMinusConstantColorFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, PMREMGenerator, PerspectiveCamera, Plane, PlaneGeometry, RED_GREEN_RGTC2_Format, RED_RGTC1_Format, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBFormat, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RedFormat, RedIntegerFormat, ReinhardToneMapping, RepeatWrapping, ReverseSubtractEquation, SIGNED_RED_GREEN_RGTC2_Format, SIGNED_RED_RGTC1_Format, SRGBColorSpace, SRGBTransfer, ShaderChunk, ShaderLib, ShaderMaterial, ShortType, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, SubtractEquation, SubtractiveBlending, TangentSpaceNormalMap, Texture, Uint16BufferAttribute, Uint32BufferAttribute, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedInt5999Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, WebGLCoordinateSystem, WebGLCubeRenderTarget, WebGLRenderTarget, WebGLRenderer, WebGLUtils, WebXRController, ZeroFactor, createCanvasElement };\n","// webroot/src/blockFactory.ts\r\n// Copied from your original src/blockFactory.ts and simplified\r\n\r\nimport * as THREE from \"three\";\r\n// Make sure the path to types is correct relative to this file\r\nimport { Block, BlockDefinition, Vector3 } from \"./types\";\r\n\r\nexport class BlockFactory {\r\n  private blockDefinitions: Record<string, BlockDefinition> = {};\r\n\r\n  constructor() {\r\n    this.registerBlockTypes();\r\n  }\r\n\r\n  private registerBlockTypes() {\r\n    // Register Floor (Example - keep all your definitions)\r\n    this.registerBlockType({\r\n      type: \"floor\",\r\n      dimensions: { x: 5, y: 0.2, z: 5 },\r\n      color: \"#8B8B8B\",\r\n      // previewColor REMOVED\r\n      createMesh: (position, rotation) => {\r\n        const geometry = new THREE.BoxGeometry(5, 0.2, 5);\r\n        const material = new THREE.MeshLambertMaterial({ color: \"#8B8B8B\" });\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.position.set(position.x, position.y, position.z);\r\n        mesh.rotation.set(\r\n          THREE.MathUtils.degToRad(rotation.x),\r\n          THREE.MathUtils.degToRad(rotation.y),\r\n          THREE.MathUtils.degToRad(rotation.z)\r\n        );\r\n        return mesh;\r\n      },\r\n      // createPlaceholder REMOVED\r\n      // highlightPlaceholder REMOVED\r\n    });\r\n\r\n     // Register Small Platform\r\n     this.registerBlockType({\r\n        type: \"smallPlatform\",\r\n        dimensions: { x: 2, y: 0.5, z: 2 },\r\n        color: \"#C4C4C4\",\r\n        createMesh: (position, rotation) => {\r\n          const geometry = new THREE.BoxGeometry(2, 0.5, 2);\r\n          const material = new THREE.MeshLambertMaterial({ color: \"#C4C4C4\" });\r\n          const mesh = new THREE.Mesh(geometry, material);\r\n          mesh.position.set(position.x, position.y, position.z);\r\n          mesh.rotation.set(\r\n            THREE.MathUtils.degToRad(rotation.x),\r\n            THREE.MathUtils.degToRad(rotation.y),\r\n            THREE.MathUtils.degToRad(rotation.z)\r\n          );\r\n          return mesh;\r\n        },\r\n      });\r\n\r\n      // Register Large Platform\r\n      this.registerBlockType({\r\n        type: \"largePlatform\",\r\n        dimensions: { x: 4, y: 0.5, z: 4 },\r\n        color: \"#C4C4C4\",\r\n        createMesh: (position, rotation) => {\r\n            const geometry = new THREE.BoxGeometry(4, 0.5, 4);\r\n            const material = new THREE.MeshLambertMaterial({ color: \"#C4C4C4\" });\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            mesh.position.set(position.x, position.y, position.z);\r\n            mesh.rotation.set(\r\n              THREE.MathUtils.degToRad(rotation.x),\r\n              THREE.MathUtils.degToRad(rotation.y),\r\n              THREE.MathUtils.degToRad(rotation.z)\r\n            );\r\n            return mesh;\r\n          },\r\n      });\r\n\r\n       // Register Garbage Bag\r\n      this.registerBlockType({\r\n        type: \"garbageBag\",\r\n        dimensions: { x: 2, y: 1.5, z: 2 }, // Use dimensions for collision approx if needed\r\n        color: \"#4D4D4D\",\r\n        createMesh: (position, rotation) => {\r\n            const garbageBagGroup = new THREE.Group();\r\n            const bagGeometry = new THREE.SphereGeometry(1, 8, 8);\r\n            for (let i = 0; i < bagGeometry.attributes.position.count; i++) {\r\n              const y = bagGeometry.attributes.position.getY(i);\r\n              if (y < 0) bagGeometry.attributes.position.setY(i, y * 0.5);\r\n            }\r\n            bagGeometry.computeVertexNormals();\r\n            bagGeometry.scale(1, 1.2, 1);\r\n            const bagMaterial = new THREE.MeshLambertMaterial({ color: \"#2C2C2C\", flatShading: true });\r\n            const bag = new THREE.Mesh(bagGeometry, bagMaterial);\r\n\r\n            const tieGeometry = new THREE.CylinderGeometry(0.3, 0.2, 0.3, 8);\r\n            const tieMaterial = new THREE.MeshLambertMaterial({ color: \"#1A1A1A\" });\r\n            const tie = new THREE.Mesh(tieGeometry, tieMaterial);\r\n            tie.position.y = 1.2;\r\n\r\n            const createBulge = (x: number, y: number, z: number, scale: THREE.Vector3) => {\r\n              const bulgeGeometry = new THREE.SphereGeometry(0.4, 6, 6);\r\n              const bulgeMaterial = new THREE.MeshLambertMaterial({ color: \"#3A3A3A\", flatShading: true });\r\n              const bulge = new THREE.Mesh(bulgeGeometry, bulgeMaterial);\r\n              bulge.position.set(x, y, z);\r\n              bulge.scale.copy(scale);\r\n              garbageBagGroup.add(bulge);\r\n            };\r\n            createBulge(0.6, 0.2, 0.5, new THREE.Vector3(1.2, 1, 1.3));\r\n            createBulge(-0.5, 0.4, 0.4, new THREE.Vector3(1.0, 0.8, 1.1));\r\n            createBulge(0.2, -0.2, -0.6, new THREE.Vector3(1.1, 0.9, 1.0));\r\n\r\n            garbageBagGroup.add(bag);\r\n            garbageBagGroup.add(tie);\r\n            garbageBagGroup.position.set(position.x, position.y, position.z);\r\n            garbageBagGroup.rotation.set(\r\n              THREE.MathUtils.degToRad(rotation.x),\r\n              THREE.MathUtils.degToRad(rotation.y),\r\n              THREE.MathUtils.degToRad(rotation.z)\r\n            );\r\n            return garbageBagGroup;\r\n        },\r\n      });\r\n\r\n      // Register Rooftop\r\n      this.registerBlockType({\r\n        type: \"rooftop\",\r\n        dimensions: { x: 3, y: 0.3, z: 3 },\r\n        color: \"#6D6D6D\",\r\n         createMesh: (position, rotation) => {\r\n            const geometry = new THREE.BoxGeometry(3, 0.3, 3);\r\n            const material = new THREE.MeshLambertMaterial({ color: \"#6D6D6D\" });\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            mesh.position.set(position.x, position.y, position.z);\r\n            mesh.rotation.set(\r\n              THREE.MathUtils.degToRad(rotation.x),\r\n              THREE.MathUtils.degToRad(rotation.y),\r\n              THREE.MathUtils.degToRad(rotation.z)\r\n            );\r\n            return mesh;\r\n          },\r\n      });\r\n\r\n       // Register Building\r\n      this.registerBlockType({\r\n        type: \"building\",\r\n        dimensions: { x: 2, y: 5, z: 2 },\r\n        color: \"#9E9E9E\",\r\n        createMesh: (position, rotation) => {\r\n            const geometry = new THREE.BoxGeometry(2, 5, 2);\r\n            const material = new THREE.MeshLambertMaterial({ color: \"#9E9E9E\" });\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            mesh.position.set(position.x, position.y, position.z);\r\n            mesh.rotation.set(\r\n              THREE.MathUtils.degToRad(rotation.x),\r\n              THREE.MathUtils.degToRad(rotation.y),\r\n              THREE.MathUtils.degToRad(rotation.z)\r\n            );\r\n            return mesh;\r\n          },\r\n      });\r\n\r\n       // Register Bridge\r\n      this.registerBlockType({\r\n        type: \"bridge\",\r\n        dimensions: { x: 2, y: 0.3, z: 6 }, // Overall dimensions approx\r\n        color: \"#A0522D\",\r\n         createMesh: (position, rotation) => {\r\n            const bridgeGroup = new THREE.Group();\r\n            const deckGeometry = new THREE.BoxGeometry(2, 0.3, 6);\r\n            const deckMaterial = new THREE.MeshLambertMaterial({ color: \"#A0522D\" });\r\n            const deck = new THREE.Mesh(deckGeometry, deckMaterial);\r\n            bridgeGroup.add(deck);\r\n\r\n            const railingMaterial = new THREE.MeshLambertMaterial({ color: \"#8B4513\" });\r\n            const leftRailingGeometry = new THREE.BoxGeometry(0.1, 0.3, 6);\r\n            const leftRailing = new THREE.Mesh(leftRailingGeometry, railingMaterial);\r\n            leftRailing.position.set(-0.95, 0.3, 0);\r\n            bridgeGroup.add(leftRailing);\r\n\r\n            const rightRailingGeometry = new THREE.BoxGeometry(0.1, 0.3, 6);\r\n            const rightRailing = new THREE.Mesh(rightRailingGeometry, railingMaterial);\r\n            rightRailing.position.set(0.95, 0.3, 0);\r\n            bridgeGroup.add(rightRailing);\r\n\r\n            const postMaterial = new THREE.MeshLambertMaterial({ color: \"#6D4C41\" });\r\n            for (let z = -2.5; z <= 2.5; z += 1.5) {\r\n              const leftPostGeometry = new THREE.BoxGeometry(0.15, 0.5, 0.15);\r\n              const leftPost = new THREE.Mesh(leftPostGeometry, postMaterial);\r\n              leftPost.position.set(-0.95, 0.4, z);\r\n              bridgeGroup.add(leftPost);\r\n\r\n              const rightPostGeometry = new THREE.BoxGeometry(0.15, 0.5, 0.15);\r\n              const rightPost = new THREE.Mesh(rightPostGeometry, postMaterial);\r\n              rightPost.position.set(0.95, 0.4, z);\r\n              bridgeGroup.add(rightPost);\r\n            }\r\n            bridgeGroup.position.set(position.x, position.y, position.z);\r\n            bridgeGroup.rotation.set(\r\n              THREE.MathUtils.degToRad(rotation.x),\r\n              THREE.MathUtils.degToRad(rotation.y),\r\n              THREE.MathUtils.degToRad(rotation.z)\r\n            );\r\n            return bridgeGroup;\r\n          },\r\n      });\r\n\r\n      // Register Kill Zone\r\n      this.registerBlockType({\r\n        type: \"killZone\",\r\n        dimensions: { x: 3, y: 0.2, z: 3 },\r\n        color: \"#FF0000\",\r\n        createMesh: (position, rotation) => {\r\n            const killZoneGroup = new THREE.Group();\r\n            const geometry = new THREE.BoxGeometry(3, 0.2, 3);\r\n            const material = new THREE.MeshLambertMaterial({ color: \"#FF0000\", transparent: true, opacity: 0.6 });\r\n            const baseMesh = new THREE.Mesh(geometry, material);\r\n            killZoneGroup.add(baseMesh);\r\n\r\n            const particleMaterial = new THREE.MeshBasicMaterial({ color: \"#FF0000\" });\r\n            for (let i = 0; i < 8; i++) {\r\n              const triangleGeometry = new THREE.ConeGeometry(0.1, 0.2, 3);\r\n              const triangle = new THREE.Mesh(triangleGeometry, particleMaterial);\r\n              const angle = (i / 8) * Math.PI * 2;\r\n              const radius = 1.2;\r\n              triangle.position.set(Math.sin(angle) * radius, 0.3, Math.cos(angle) * radius);\r\n              triangle.rotation.x = Math.PI;\r\n              (triangle as any).originalY = triangle.position.y;\r\n              (triangle as any).randomPhase = Math.random() * Math.PI * 2;\r\n              killZoneGroup.add(triangle);\r\n            }\r\n            killZoneGroup.position.set(position.x, position.y, position.z);\r\n            killZoneGroup.rotation.set(\r\n              THREE.MathUtils.degToRad(rotation.x),\r\n              THREE.MathUtils.degToRad(rotation.y),\r\n              THREE.MathUtils.degToRad(rotation.z)\r\n            );\r\n            return killZoneGroup;\r\n        },\r\n      });\r\n\r\n      // Register Large Kill Zone\r\n      this.registerBlockType({\r\n        type: \"killZoneLarge\",\r\n        dimensions: { x: 6, y: 0.2, z: 6 },\r\n        color: \"#FF0000\",\r\n        createMesh: (position, rotation) => {\r\n            const killZoneGroup = new THREE.Group();\r\n            const geometry = new THREE.BoxGeometry(6, 0.2, 6);\r\n            const material = new THREE.MeshLambertMaterial({ color: \"#FF0000\", transparent: true, opacity: 0.6 });\r\n            const baseMesh = new THREE.Mesh(geometry, material);\r\n            killZoneGroup.add(baseMesh);\r\n\r\n            const particleMaterial = new THREE.MeshBasicMaterial({ color: \"#FF0000\" });\r\n            for (let i = 0; i < 16; i++) { /* ... triangle creation ... */\r\n                const triangleGeometry = new THREE.ConeGeometry(0.15, 0.3, 3);\r\n                const triangle = new THREE.Mesh(triangleGeometry, particleMaterial);\r\n                const angle = (i / 16) * Math.PI * 2;\r\n                const radius = 2.5;\r\n                triangle.position.set(Math.sin(angle) * radius, 0.3, Math.cos(angle) * radius);\r\n                triangle.rotation.x = Math.PI;\r\n                (triangle as any).originalY = triangle.position.y;\r\n                (triangle as any).randomPhase = Math.random() * Math.PI * 2;\r\n                killZoneGroup.add(triangle);\r\n            }\r\n            const centerTriangleGeometry = new THREE.ConeGeometry(0.3, 0.5, 3);\r\n            const centerTriangle = new THREE.Mesh(centerTriangleGeometry, particleMaterial);\r\n            centerTriangle.position.set(0, 0.4, 0);\r\n            centerTriangle.rotation.x = Math.PI;\r\n            (centerTriangle as any).originalY = centerTriangle.position.y;\r\n            (centerTriangle as any).randomPhase = 0;\r\n            killZoneGroup.add(centerTriangle);\r\n\r\n            killZoneGroup.position.set(position.x, position.y, position.z);\r\n            killZoneGroup.rotation.set(\r\n              THREE.MathUtils.degToRad(rotation.x),\r\n              THREE.MathUtils.degToRad(rotation.y),\r\n              THREE.MathUtils.degToRad(rotation.z)\r\n            );\r\n            return killZoneGroup;\r\n        },\r\n      });\r\n\r\n     // Register Start\r\n     this.registerBlockType({\r\n        type: \"start\",\r\n        dimensions: { x: 1, y: 0.5, z: 1 },\r\n        color: \"#4CAF50\",\r\n        limit: 1, // Keep limit for reference\r\n        createMesh: (position, rotation) => {\r\n            const geometry = new THREE.BoxGeometry(1, 0.5, 1);\r\n            const material = new THREE.MeshLambertMaterial({ color: \"#4CAF50\" });\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            mesh.position.set(position.x, position.y, position.z);\r\n            mesh.rotation.set(\r\n              THREE.MathUtils.degToRad(rotation.x),\r\n              THREE.MathUtils.degToRad(rotation.y),\r\n              THREE.MathUtils.degToRad(rotation.z)\r\n            );\r\n            return mesh;\r\n          },\r\n      });\r\n\r\n      // Register Finish\r\n      this.registerBlockType({\r\n        type: \"finish\",\r\n        dimensions: { x: 1, y: 0.5, z: 1 },\r\n        color: \"#f44336\",\r\n        limit: 1, // Keep limit for reference\r\n        createMesh: (position, rotation) => {\r\n            const geometry = new THREE.BoxGeometry(1, 0.5, 1);\r\n            const material = new THREE.MeshLambertMaterial({ color: \"#f44336\" });\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            mesh.position.set(position.x, position.y, position.z);\r\n            mesh.rotation.set(\r\n              THREE.MathUtils.degToRad(rotation.x),\r\n              THREE.MathUtils.degToRad(rotation.y),\r\n              THREE.MathUtils.degToRad(rotation.z)\r\n            );\r\n            return mesh;\r\n          },\r\n      });\r\n\r\n    // Add ALL your other block type registrations here, removing only\r\n    // previewColor, createPlaceholder, and highlightPlaceholder\r\n    // ...\r\n  }\r\n\r\n  // registerBlockType remains the same\r\n  private registerBlockType(definition: BlockDefinition) {\r\n    this.blockDefinitions[definition.type] = definition;\r\n  }\r\n\r\n  createBlock(type: string, position: Vector3, rotation: Vector3): Block {\r\n    const definition = this.blockDefinitions[type];\r\n    if (!definition) {\r\n      throw new Error(`Unknown block type: ${type}`);\r\n    }\r\n\r\n    const mesh = definition.createMesh(position, rotation);\r\n\r\n    // Simplified block - remove highlight/unhighlight if not needed for player effects\r\n    const block: Block = {\r\n      type,\r\n      position,\r\n      rotation,\r\n      mesh,\r\n      originalMaterials: [], // Keep if highlight/unhighlight used\r\n\r\n      // Method to highlight the block (keep if needed, e.g., for interaction effects)\r\n      highlight(material: THREE.Material): void {\r\n        this.originalMaterials = [];\r\n        if (this.mesh instanceof THREE.Mesh) {\r\n          this.originalMaterials.push(this.mesh.material as THREE.Material);\r\n          this.mesh.material = material;\r\n        } else if (this.mesh instanceof THREE.Group) {\r\n          this.mesh.traverse((child) => {\r\n            if (child instanceof THREE.Mesh) {\r\n              this.originalMaterials?.push(child.material as THREE.Material);\r\n              child.material = material;\r\n            }\r\n          });\r\n        }\r\n      },\r\n\r\n      // Method to unhighlight the block\r\n      unhighlight(): void {\r\n         if (!this.originalMaterials || this.originalMaterials.length === 0) return;\r\n         if (this.mesh instanceof THREE.Mesh) {\r\n           this.mesh.material = this.originalMaterials[0];\r\n         } else if (this.mesh instanceof THREE.Group) {\r\n           let i = 0;\r\n           this.mesh.traverse((child) => {\r\n             if (child instanceof THREE.Mesh && i < this.originalMaterials!.length) {\r\n               child.material = this.originalMaterials![i++];\r\n             }\r\n           });\r\n         }\r\n         this.originalMaterials = [];\r\n      },\r\n\r\n      // Keep getMeshChildren if player collision needs it\r\n       getMeshChildren(): THREE.Object3D[] {\r\n        if (this.mesh instanceof THREE.Mesh) {\r\n          return [this.mesh];\r\n        } else if (this.mesh instanceof THREE.Group) {\r\n          const children: THREE.Object3D[] = [];\r\n          this.mesh.traverse((child) => {\r\n            if (child instanceof THREE.Mesh) children.push(child);\r\n          });\r\n          return children;\r\n        }\r\n        return [];\r\n      },\r\n    };\r\n    return block;\r\n  }\r\n\r\n  // createPlaceholder REMOVED\r\n  // highlightPlaceholder REMOVED\r\n\r\n  // Keep getBlockDefinition if needed internally by player/game logic\r\n  getBlockDefinition(type: string): BlockDefinition {\r\n     const definition = this.blockDefinitions[type];\r\n     if (!definition) {\r\n         throw new Error(`Unknown block type definition requested: ${type}`);\r\n     }\r\n    return definition;\r\n  }\r\n\r\n  // getAllBlockTypes REMOVED (not needed for player)\r\n}\r\n","// webroot/src/player.ts\r\n// Copied from your original src/player.ts\r\n// Adapted callbacks and removed localStorage control saving/loading\r\n\r\nimport * as THREE from \"three\";\r\n// Make sure the path to types is correct relative to this file\r\nimport { Block, Vector3, AtmosphereSettings /* Removed PlayerControls, DEFAULT_CONTROLS */ } from \"./types.js\";\r\n// Import message types to communicate with Devvit\r\nimport type { WebViewMessage } from './message.js'; // Adjust path as needed\r\n\r\n/**\r\n * Helper function to send messages to the parent Devvit frame.\r\n * @param msg The message payload conforming to WebViewMessage.\r\n */\r\nfunction postDevvitMessage(msg: WebViewMessage): void {\r\n  if (window.parent) {\r\n    window.parent.postMessage(msg, '*');\r\n  } else {\r\n    console.error(\"Cannot post message: not running inside an iframe (window.parent is null)\");\r\n  }\r\n}\r\n\r\n\r\nexport class Player {\r\n  mesh: THREE.Group;\r\n  body: THREE.Mesh;\r\n  head: THREE.Mesh;\r\n  leftLeg: THREE.Mesh;\r\n  rightLeg: THREE.Mesh;\r\n  leftArm: THREE.Mesh;\r\n  rightArm: THREE.Mesh;\r\n  gravity: number = 15;\r\n\r\n  // Movement control properties - Hardcoded defaults for simplicity in webview\r\n  // Could add internal customization later if needed\r\n  private controls = {\r\n    forward: \"w\",\r\n    backward: \"s\",\r\n    left: \"a\",\r\n    right: \"d\",\r\n    jump: \" \", // Space\r\n  };\r\n  private keys: { [key: string]: boolean } = {};\r\n  private isMoving: boolean = false;\r\n  private camera: THREE.PerspectiveCamera;\r\n  private speed: number = 5; // Units per second\r\n\r\n  // Rotation and camera properties\r\n  private cameraRotationSpeed: number = 2; // Radians per second\r\n  private cameraOffset: THREE.Vector3 = new THREE.Vector3(0, 2, 5);\r\n  private cameraTargetOffset: THREE.Vector3 = new THREE.Vector3(0, 0.5, 0);\r\n  private playerDirection: THREE.Vector3 = new THREE.Vector3(0, 0, -1);\r\n  private rotationAngle: number = 0;\r\n\r\n  // Physics properties\r\n  private isGrounded: boolean = false;\r\n  private playerHeight: number = 1.5; // Total height of player\r\n  private playerWidth: number = 0.5; // Width of player for collision\r\n  private collisionBlocks: Block[] = [];\r\n  private verticalVelocity: number = 0;\r\n  private jumpForce: number = 8;\r\n  private terminalVelocity: number = 20;\r\n\r\n  // Kill zone properties\r\n  private respawnPosition: Vector3;\r\n  private isDead: boolean = false;\r\n  private deathTimeout: number | null = null;\r\n  private onDeath: (() => void) | null = null; // Keep internal callback for effects\r\n\r\n  // Box for collision\r\n  private collisionBox: THREE.Box3;\r\n  private collisionOffsetY: number = 0.75; // Offset from center for the collision box\r\n  private onLevelComplete: (() => void) | null = null; // Keep internal callback for effects\r\n  private isLevelCompleted: boolean = false;\r\n\r\n  constructor(position: Vector3, camera: THREE.PerspectiveCamera) {\r\n    this.mesh = new THREE.Group();\r\n    this.camera = camera;\r\n\r\n    // Store initial position as respawn point\r\n    this.respawnPosition = { ...position };\r\n\r\n    // --- Player Model Creation (copied directly, assumed correct) ---\r\n    // Body\r\n    const bodyGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.3);\r\n    const bodyMaterial = new THREE.MeshBasicMaterial({ color: 0x4d3b21 });\r\n    this.body = new THREE.Mesh(bodyGeometry, bodyMaterial);\r\n    this.body.position.y = 0.35;\r\n    this.mesh.add(this.body);\r\n    const addPatch = (x: number, y: number, z: number, width: number, height: number, depth: number) => { /* ... patch code ... */\r\n        const patchGeometry = new THREE.BoxGeometry(width, height, depth);\r\n        const patchMaterial = new THREE.MeshBasicMaterial({ color: 0x5d4037 });\r\n        const patch = new THREE.Mesh(patchGeometry, patchMaterial);\r\n        patch.position.set(x, y, z);\r\n        this.body.add(patch);\r\n    };\r\n    addPatch(0.1, 0.1, 0.16, 0.2, 0.2, 0.01);\r\n    addPatch(-0.15, -0.2, 0.16, 0.15, 0.15, 0.01);\r\n    addPatch(0.18, -0.1, 0.16, 0.1, 0.25, 0.01);\r\n\r\n    // Head\r\n    const headGeometry = new THREE.BoxGeometry(0.4, 0.4, 0.4);\r\n    const headMaterial = new THREE.MeshBasicMaterial({ color: 0xc8a080 });\r\n    this.head = new THREE.Mesh(headGeometry, headMaterial);\r\n    this.head.position.y = 0.95;\r\n    this.mesh.add(this.head);\r\n    const beanieGeometry = new THREE.BoxGeometry(0.44, 0.15, 0.44);\r\n    const beanieMaterial = new THREE.MeshBasicMaterial({ color: 0x8b4513 });\r\n    const beanie = new THREE.Mesh(beanieGeometry, beanieMaterial);\r\n    beanie.position.y = 0.25;\r\n    this.head.add(beanie);\r\n    const beanieRimGeometry = new THREE.BoxGeometry(0.45, 0.08, 0.45);\r\n    const beanieRimMaterial = new THREE.MeshBasicMaterial({ color: 0x654321 });\r\n    const beanieRim = new THREE.Mesh(beanieRimGeometry, beanieRimMaterial);\r\n    beanieRim.position.y = 0.11;\r\n    beanie.add(beanieRim);\r\n    const stubbleGeometry = new THREE.BoxGeometry(0.35, 0.1, 0.35);\r\n    const stubbleMaterial = new THREE.MeshBasicMaterial({ color: 0x3d3d3d });\r\n    const stubble = new THREE.Mesh(stubbleGeometry, stubbleMaterial);\r\n    stubble.position.y = -0.25;\r\n    stubble.position.z = 0.03;\r\n    this.head.add(stubble);\r\n\r\n    // Legs\r\n    const legGeometry = new THREE.BoxGeometry(0.15, 0.5, 0.15);\r\n    const legMaterial = new THREE.MeshBasicMaterial({ color: 0x1b2631 });\r\n    this.leftLeg = new THREE.Mesh(legGeometry, legMaterial);\r\n    this.leftLeg.position.set(0.15, -0.25, 0);\r\n    this.mesh.add(this.leftLeg);\r\n    this.rightLeg = new THREE.Mesh(legGeometry, legMaterial);\r\n    this.rightLeg.position.set(-0.15, -0.25, 0);\r\n    this.mesh.add(this.rightLeg);\r\n    const leftLegTatterGeometry = new THREE.BoxGeometry(0.18, 0.07, 0.18);\r\n    const leftLegTatterMaterial = new THREE.MeshBasicMaterial({ color: 0x17202a });\r\n    const leftLegTatter = new THREE.Mesh(leftLegTatterGeometry, leftLegTatterMaterial);\r\n    leftLegTatter.position.y = -0.25;\r\n    this.leftLeg.add(leftLegTatter);\r\n    const rightLegTatterGeometry = new THREE.BoxGeometry(0.18, 0.07, 0.18);\r\n    const rightLegTatterMaterial = new THREE.MeshBasicMaterial({ color: 0x17202a });\r\n    const rightLegTatter = new THREE.Mesh(rightLegTatterGeometry, rightLegTatterMaterial);\r\n    rightLegTatter.position.y = -0.25;\r\n    this.rightLeg.add(rightLegTatter);\r\n\r\n    // Arms\r\n    const armGeometry = new THREE.BoxGeometry(0.15, 0.5, 0.15);\r\n    const armMaterial = new THREE.MeshBasicMaterial({ color: 0x4d3b21 });\r\n    this.leftArm = new THREE.Mesh(armGeometry, armMaterial);\r\n    this.leftArm.position.set(0.325, 0.35, 0);\r\n    this.mesh.add(this.leftArm);\r\n    this.rightArm = new THREE.Mesh(armGeometry, armMaterial);\r\n    this.rightArm.position.set(-0.325, 0.35, 0);\r\n    this.mesh.add(this.rightArm);\r\n    const leftArmTatterGeometry = new THREE.BoxGeometry(0.08, 0.1, 0.18);\r\n    const leftArmTatterMaterial = new THREE.MeshBasicMaterial({ color: 0x5d4037 });\r\n    const leftArmTatter = new THREE.Mesh(leftArmTatterGeometry, leftArmTatterMaterial);\r\n    leftArmTatter.position.set(0.04, -0.22, 0);\r\n    this.leftArm.add(leftArmTatter);\r\n    const rightArmTatterGeometry = new THREE.BoxGeometry(0.08, 0.1, 0.18);\r\n    const rightArmTatterMaterial = new THREE.MeshBasicMaterial({ color: 0x5d4037 });\r\n    const rightArmTatter = new THREE.Mesh(rightArmTatterGeometry, rightArmTatterMaterial);\r\n    rightArmTatter.position.set(-0.04, -0.22, 0);\r\n    this.rightArm.add(rightArmTatter);\r\n    const leftGloveGeometry = new THREE.BoxGeometry(0.17, 0.15, 0.17);\r\n    const leftGloveMaterial = new THREE.MeshBasicMaterial({ color: 0x4a4a4a });\r\n    const leftGlove = new THREE.Mesh(leftGloveGeometry, leftGloveMaterial);\r\n    leftGlove.position.y = -0.2;\r\n    this.leftArm.add(leftGlove);\r\n    const rightGloveGeometry = new THREE.BoxGeometry(0.17, 0.15, 0.17);\r\n    const rightGloveMaterial = new THREE.MeshBasicMaterial({ color: 0x4a4a4a });\r\n    const rightGlove = new THREE.Mesh(rightGloveGeometry, rightGloveMaterial);\r\n    rightGlove.position.y = -0.2;\r\n    this.rightArm.add(rightGlove);\r\n    // --- End Player Model Creation ---\r\n\r\n    // Set initial position\r\n    this.mesh.position.set(position.x, position.y, position.z);\r\n\r\n    // Initialize collision box\r\n    this.collisionBox = new THREE.Box3();\r\n    this.updateCollisionBox();\r\n\r\n    // Initialize player direction and update camera position\r\n    this.updateCamera();\r\n\r\n    // Set up control event listeners\r\n    this.setupEventListeners();\r\n\r\n    // Control loading/saving REMOVED\r\n  }\r\n\r\n  private setupEventListeners() {\r\n    // Keyboard events bound directly\r\n    window.addEventListener(\"keydown\", this.keydownHandler);\r\n    window.addEventListener(\"keyup\", this.keyupHandler);\r\n  }\r\n\r\n  update(delta: number, time: number, blocks: Block[]) {\r\n    // Don't update if player is dead or level completed (to prevent further actions)\r\n    if (this.isDead || this.isLevelCompleted) return;\r\n\r\n    // Store blocks for collision detection\r\n    this.collisionBlocks = blocks;\r\n\r\n    // Check if player is moving based on key states\r\n    this.isMoving =\r\n      this.keys[this.controls.forward] ||\r\n      this.keys[this.controls.backward] ||\r\n      this.keys[this.controls.left] ||\r\n      this.keys[this.controls.right];\r\n\r\n    // Handle rotation and movement\r\n    this.handleRotation(delta);\r\n\r\n    // Apply physics (gravity, vertical velocity)\r\n    this.applyPhysics(delta);\r\n\r\n    // Handle movement with collision detection\r\n    this.handleMovement(delta);\r\n\r\n    // Update camera position to follow player\r\n    this.updateCamera();\r\n\r\n    // Check if player fell out of the world (y < -10)\r\n    if (this.mesh.position.y < -10) {\r\n      this.respawn(); // Use the die->respawn flow\r\n      return;\r\n    }\r\n\r\n    // Apply animations based on state\r\n    this.applyAnimations(time);\r\n\r\n\r\n    // Update the collision box AFTER all movement/physics\r\n    this.updateCollisionBox();\r\n  }\r\n\r\n  private applyPhysics(delta: number) {\r\n    // Apply gravity\r\n    this.verticalVelocity -= this.gravity * delta;\r\n\r\n    // Limit fall speed to terminal velocity\r\n    this.verticalVelocity = Math.max(this.verticalVelocity, -this.terminalVelocity);\r\n\r\n    // Tentative vertical movement\r\n    const dy = this.verticalVelocity * delta;\r\n    const tentativeY = this.mesh.position.y + dy;\r\n\r\n    // Check vertical collision BEFORE applying movement\r\n    const verticalCollision = this.checkVerticalCollision(tentativeY);\r\n\r\n    if (verticalCollision.collided) {\r\n        // Adjust position to collision surface\r\n        this.mesh.position.y = verticalCollision.positionY;\r\n        // Stop vertical velocity based on collision type\r\n        if ((dy > 0 && verticalCollision.type === 'bottom') || (dy < 0 && verticalCollision.type === 'top')) {\r\n            this.verticalVelocity = 0;\r\n        }\r\n        this.isGrounded = (dy < 0 && verticalCollision.type === 'top'); // Grounded only if landing\r\n    } else {\r\n        // No vertical collision, apply movement\r\n        this.mesh.position.y = tentativeY;\r\n        this.isGrounded = false; // Not grounded if freely moving vertically\r\n    }\r\n\r\n    // Check for kill zones and finish zones AFTER position update\r\n    this.checkSpecialZones();\r\n  }\r\n\r\n  // Separated vertical collision check\r\n  private checkVerticalCollision(tentativeY: number): { collided: boolean; positionY: number; type: 'top' | 'bottom' | 'none' } {\r\n    // Update collision box for the *tentative* position\r\n    const tentativeCollisionBox = this.collisionBox.clone();\r\n    tentativeCollisionBox.min.y = tentativeY - this.collisionOffsetY;\r\n    tentativeCollisionBox.max.y = tentativeY + this.playerHeight - this.collisionOffsetY;\r\n\r\n    for (const block of this.collisionBlocks) {\r\n        if (!block.mesh || block.type === 'killZone' || block.type === 'killZoneLarge') continue; // Skip non-collidable\r\n\r\n        const blockBox = new THREE.Box3().setFromObject(block.mesh);\r\n\r\n        if (tentativeCollisionBox.intersectsBox(blockBox)) {\r\n            // Check if landing on top\r\n            if (this.verticalVelocity <= 0 && tentativeCollisionBox.min.y < blockBox.max.y && this.mesh.position.y >= blockBox.max.y - 0.01) { // Check previous position was above\r\n                return { collided: true, positionY: blockBox.max.y + this.collisionOffsetY, type: 'top' };\r\n            }\r\n            // Check if hitting bottom\r\n            if (this.verticalVelocity > 0 && tentativeCollisionBox.max.y > blockBox.min.y && this.mesh.position.y + this.playerHeight <= blockBox.min.y + 0.01) { // Check previous pos was below\r\n                return { collided: true, positionY: blockBox.min.y - this.playerHeight + this.collisionOffsetY, type: 'bottom' };\r\n            }\r\n        }\r\n    }\r\n\r\n     // Check ground collision (y=0)\r\n     if (tentativeY - this.collisionOffsetY < 0) {\r\n         return { collided: true, positionY: this.collisionOffsetY, type: 'top' };\r\n     }\r\n\r\n\r\n    return { collided: false, positionY: tentativeY, type: 'none' };\r\n  }\r\n\r\n  // Check for kill zones and finish zone separately after position is finalized for the frame\r\n  private checkSpecialZones() {\r\n      this.updateCollisionBox(); // Ensure collision box is current\r\n\r\n      for (const block of this.collisionBlocks) {\r\n          if (!block.mesh) continue;\r\n\r\n          const blockBox = new THREE.Box3().setFromObject(block.mesh);\r\n\r\n          // Finish Block Check\r\n          if (block.type === 'finish' && this.collisionBox.intersectsBox(blockBox)) {\r\n              if (!this.isLevelCompleted) {\r\n                  this.isLevelCompleted = true;\r\n                  console.log('Finish block reached!');\r\n                  postDevvitMessage({ type: 'levelComplete' });\r\n                  if (this.onLevelComplete) {\r\n                      this.onLevelComplete(); // Trigger internal callback if set\r\n                  }\r\n              }\r\n              // No return, player can stay on finish block\r\n          }\r\n\r\n          // Kill Zone Check\r\n          if ((block.type === 'killZone' || block.type === 'killZoneLarge')) {\r\n              let killZoneBox = blockBox;\r\n              // If it's a group, use the base mesh for collision\r\n              if (block.mesh instanceof THREE.Group && block.mesh.children.length > 0 && block.mesh.children[0] instanceof THREE.Mesh) {\r\n                  killZoneBox = new THREE.Box3().setFromObject(block.mesh.children[0]);\r\n              }\r\n\r\n              if (this.collisionBox.intersectsBox(killZoneBox)) {\r\n                  this.die();\r\n                  return; // Exit early if died\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n\r\n  // Simplified Collision checking (no longer handles vertical, only horizontal)\r\n  private checkHorizontalCollision(tentativeX: number, tentativeZ: number): { collided: boolean; positionX: number; positionZ: number } {\r\n     // Update collision box for the *tentative* position\r\n     const tentativeCollisionBox = this.collisionBox.clone();\r\n     const halfWidth = (this.collisionBox.max.x - this.collisionBox.min.x) / 2;\r\n     tentativeCollisionBox.min.x = tentativeX - halfWidth;\r\n     tentativeCollisionBox.max.x = tentativeX + halfWidth;\r\n     tentativeCollisionBox.min.z = tentativeZ - halfWidth; // Assuming square base for simplicity\r\n     tentativeCollisionBox.max.z = tentativeZ + halfWidth;\r\n\r\n      for (const block of this.collisionBlocks) {\r\n         if (!block.mesh || block.type === 'killZone' || block.type === 'killZoneLarge' || block.type === 'finish') continue; // Skip non-collidable\r\n\r\n         const blockBox = new THREE.Box3().setFromObject(block.mesh);\r\n\r\n          // Check simple intersection first\r\n          if (tentativeCollisionBox.intersectsBox(blockBox)) {\r\n            // Check if player's feet are slightly above the block's top - allow movement if they are\r\n            const playerFeetY = this.mesh.position.y - this.collisionOffsetY;\r\n            const blockTopY = blockBox.max.y;\r\n            const feetClearance = 0.05; // Small threshold to allow walking on surfaces\r\n            \r\n            // If player's feet are above the block's top with a small clearance, allow movement\r\n            if (playerFeetY >= blockTopY - feetClearance) {\r\n                continue; // Skip collision - player is on top of object\r\n            }\r\n\r\n            // Check if the collision is primarily horizontal (and not just landing/hitting head)\r\n            // A simple check: if vertical overlap is less than horizontal overlap\r\n            const yOverlap = Math.max(0, Math.min(tentativeCollisionBox.max.y, blockBox.max.y) - Math.max(tentativeCollisionBox.min.y, blockBox.min.y));\r\n            const xOverlap = Math.max(0, Math.min(tentativeCollisionBox.max.x, blockBox.max.x) - Math.max(tentativeCollisionBox.min.x, blockBox.min.x));\r\n            const zOverlap = Math.max(0, Math.min(tentativeCollisionBox.max.z, blockBox.max.z) - Math.max(tentativeCollisionBox.min.z, blockBox.min.z));\r\n\r\n            // If significant horizontal overlap compared to vertical, treat as horizontal collision\r\n            if (xOverlap > 0.01 || zOverlap > 0.01) {\r\n                // More sophisticated push-back needed here, but for now, just prevent movement\r\n                 // Calculate minimum pushback needed\r\n                const pushX = (tentativeCollisionBox.getCenter(new THREE.Vector3()).x < blockBox.getCenter(new THREE.Vector3()).x) ?\r\n                              -(tentativeCollisionBox.max.x - blockBox.min.x) : (blockBox.max.x - tentativeCollisionBox.min.x);\r\n                const pushZ = (tentativeCollisionBox.getCenter(new THREE.Vector3()).z < blockBox.getCenter(new THREE.Vector3()).z) ?\r\n                              -(tentativeCollisionBox.max.z - blockBox.min.z) : (blockBox.max.z - tentativeCollisionBox.min.z);\r\n\r\n                // Apply smallest pushback\r\n                if (Math.abs(pushX) < Math.abs(pushZ)) {\r\n                     return { collided: true, positionX: this.mesh.position.x, positionZ: tentativeZ }; // Block X movement\r\n                } else {\r\n                     return { collided: true, positionX: tentativeX, positionZ: this.mesh.position.z }; // Block Z movement\r\n                }\r\n                // Simple stop: return { collided: true, positionX: this.mesh.position.x, positionZ: this.mesh.position.z };\r\n            }\r\n         }\r\n      }\r\n\r\n     return { collided: false, positionX: tentativeX, positionZ: tentativeZ };\r\n   }\r\n\r\n\r\n  private updateCollisionBox() {\r\n    // Using playerWidth for X and Z dimensions\r\n    const halfWidth = this.playerWidth * 0.45; // Slightly reduced for better feel\r\n    const bottomY = this.mesh.position.y - this.collisionOffsetY;\r\n    const topY = bottomY + this.playerHeight;\r\n\r\n    this.collisionBox.min.set(\r\n      this.mesh.position.x - halfWidth,\r\n      bottomY,\r\n      this.mesh.position.z - halfWidth\r\n    );\r\n    this.collisionBox.max.set(\r\n      this.mesh.position.x + halfWidth,\r\n      topY,\r\n      this.mesh.position.z + halfWidth\r\n    );\r\n  }\r\n\r\n  private handleRotation(delta: number) {\r\n    const rotationAmount = this.cameraRotationSpeed * delta;\r\n    let didRotate = false;\r\n\r\n    if (this.keys[this.controls.left]) {\r\n      this.rotationAngle += rotationAmount; // Adjust based on how mesh rotation is applied\r\n      didRotate = true;\r\n    }\r\n    if (this.keys[this.controls.right]) {\r\n      this.rotationAngle -= rotationAmount; // Adjust based on how mesh rotation is applied\r\n      didRotate = true;\r\n    }\r\n\r\n    if(didRotate){\r\n        this.mesh.rotation.y = this.rotationAngle; // Apply rotation to mesh\r\n        // Update the player's direction vector based on mesh rotation\r\n        this.mesh.getWorldDirection(this.playerDirection);\r\n        // Ensure direction is horizontal (remove y component if necessary)\r\n        this.playerDirection.y = 0;\r\n        this.playerDirection.normalize();\r\n    }\r\n  }\r\n\r\n  private handleMovement(delta: number) {\r\n    const distance = this.speed * delta;\r\n    let dx = 0;\r\n    let dz = 0;\r\n\r\n    // Calculate desired movement based on input and player direction\r\n    if (this.keys[this.controls.forward]) {\r\n      dx -= this.playerDirection.x * distance;\r\n      dz -= this.playerDirection.z * distance;\r\n    }\r\n    if (this.keys[this.controls.backward]) {\r\n      dx += this.playerDirection.x * distance;\r\n      dz += this.playerDirection.z * distance;\r\n    }\r\n\r\n    if (dx !== 0 || dz !== 0) {\r\n        const tentativeX = this.mesh.position.x + dx;\r\n        const tentativeZ = this.mesh.position.z + dz;\r\n\r\n        // Check for horizontal collisions BEFORE applying movement\r\n        const horizontalCollision = this.checkHorizontalCollision(tentativeX, tentativeZ);\r\n\r\n        if (!horizontalCollision.collided) {\r\n            // No collision, apply full movement\r\n            this.mesh.position.x = tentativeX;\r\n            this.mesh.position.z = tentativeZ;\r\n        } else {\r\n            // Apply corrected position if collision occurred (optional, simple stop might be okay)\r\n             this.mesh.position.x = horizontalCollision.positionX;\r\n             this.mesh.position.z = horizontalCollision.positionZ;\r\n\r\n             // Try sliding: Check collision only on X axis if Z was blocked, and vice-versa\r\n            // const collisionXOnly = this.checkHorizontalCollision(tentativeX, this.mesh.position.z);\r\n            // if (!collisionXOnly.collided) {\r\n            //      this.mesh.position.x = tentativeX;\r\n            // } else {\r\n            //     const collisionZOnly = this.checkHorizontalCollision(this.mesh.position.x, tentativeZ);\r\n            //     if (!collisionZOnly.collided) {\r\n            //          this.mesh.position.z = tentativeZ;\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n  }\r\n\r\n  private updateCamera() {\r\n    // Camera follows player\r\n    // Use the mesh's rotation directly\r\n    const offset = this.cameraOffset.clone();\r\n    offset.applyEuler(this.mesh.rotation); // Apply player's rotation to the offset\r\n\r\n    this.camera.position.copy(this.mesh.position).add(offset);\r\n\r\n    // Look at a point slightly above the player's base\r\n    const lookAtTarget = new THREE.Vector3(\r\n      this.mesh.position.x,\r\n      this.mesh.position.y + this.cameraTargetOffset.y, // Look slightly above feet\r\n      this.mesh.position.z\r\n    );\r\n\r\n    this.camera.lookAt(lookAtTarget);\r\n  }\r\n\r\n  private applyAnimations(time: number) {\r\n     // Idle animation only when grounded and not moving\r\n     if (!this.isMoving && this.isGrounded) {\r\n       // Subtle bobbing\r\n       // this.mesh.position.y += Math.sin(time * 2) * 0.005; // Careful: this fights physics, maybe animate parts?\r\n       this.body.position.y = 0.35 + Math.sin(time * 2) * 0.01;\r\n       // Reset legs/arms if they were animating\r\n       this.leftLeg.rotation.x = 0;\r\n       this.rightLeg.rotation.x = 0;\r\n       this.leftArm.rotation.x = 0;\r\n       this.rightArm.rotation.x = 0;\r\n     }\r\n\r\n     // Running animation only when grounded and moving\r\n     if (this.isMoving && this.isGrounded) {\r\n       const runCycle = time * 10;\r\n       this.leftLeg.rotation.x = Math.sin(runCycle) * 0.7;\r\n       this.rightLeg.rotation.x = Math.sin(runCycle + Math.PI) * 0.7;\r\n       this.leftArm.rotation.x = Math.sin(runCycle + Math.PI) * 0.5;\r\n       this.rightArm.rotation.x = Math.sin(runCycle) * 0.5;\r\n       // Reset body bobbing if applied\r\n       this.body.position.y = 0.35;\r\n     }\r\n\r\n     // Jumping pose when in air\r\n     if (!this.isGrounded) {\r\n       // Tucked legs/arms pose\r\n       this.leftLeg.rotation.x = -0.5;\r\n       this.rightLeg.rotation.x = -0.5;\r\n       this.leftArm.rotation.x = -0.8;\r\n       this.rightArm.rotation.x = -0.8;\r\n       // Reset body bobbing if applied\r\n       this.body.position.y = 0.35;\r\n     }\r\n   }\r\n\r\n\r\n  jump() {\r\n    // Only allow jumping if player is on ground\r\n    if (this.isGrounded) {\r\n      this.isGrounded = false;\r\n      this.verticalVelocity = this.jumpForce;\r\n    }\r\n  }\r\n\r\n  getPosition(): Vector3 {\r\n    return {\r\n      x: this.mesh.position.x,\r\n      y: this.mesh.position.y,\r\n      z: this.mesh.position.z,\r\n    };\r\n  }\r\n\r\n  setPosition(position: Vector3) {\r\n    this.mesh.position.set(position.x, position.y, position.z);\r\n    // Reset physics\r\n    this.verticalVelocity = 0;\r\n    this.isGrounded = false; // Force re-check on next update\r\n\r\n    // Reset rotation when position is explicitly set (e.g., respawn)\r\n    this.rotationAngle = 0;\r\n    this.mesh.rotation.y = 0;\r\n     // Re-calculate direction based on reset rotation\r\n    this.mesh.getWorldDirection(this.playerDirection);\r\n    this.playerDirection.y = 0;\r\n    this.playerDirection.normalize();\r\n\r\n    this.updateCamera(); // Update camera immediately\r\n\r\n    // Update collision box\r\n    this.updateCollisionBox();\r\n\r\n    // Update respawn position\r\n    this.respawnPosition = { ...position };\r\n\r\n    // Reset completion state on explicit setPosition (e.g. reset button)\r\n    this.isLevelCompleted = false;\r\n  }\r\n\r\n  // Control management methods REMOVED (updateControls, saveControls, loadControls, getControls, resetControls)\r\n  // Rely on hardcoded this.controls or implement webview-internal customization if needed.\r\n\r\n  // Kill zone methods\r\n  private die() {\r\n    if (this.isDead) return;\r\n    this.isDead = true;\r\n    console.log('Player died!');\r\n\r\n    // Call the internal death callback if it exists (for effects)\r\n    if (this.onDeath) {\r\n      this.onDeath();\r\n    }\r\n\r\n    // --- Death Effect (Turn Red) ---\r\n    const meshColorMap = new Map<THREE.Mesh, THREE.Color>();\r\n    const collectMeshes = (parent: THREE.Object3D) => {\r\n      parent.traverse((child) => {\r\n        if (child instanceof THREE.Mesh && child.material instanceof THREE.MeshBasicMaterial) {\r\n          if (!meshColorMap.has(child)) {\r\n            meshColorMap.set(child, child.material.color.clone());\r\n          }\r\n        }\r\n      });\r\n    };\r\n    collectMeshes(this.mesh);\r\n    meshColorMap.forEach((_, mesh) => {\r\n      if (mesh.material instanceof THREE.MeshBasicMaterial) {\r\n        mesh.material.color.set(0xff0000);\r\n      }\r\n    });\r\n    // --- End Death Effect ---\r\n\r\n\r\n    // Wait a moment, then respawn\r\n    this.deathTimeout = window.setTimeout(() => {\r\n      // Restore original colors\r\n      meshColorMap.forEach((originalColor, mesh) => {\r\n        if (mesh.material instanceof THREE.MeshBasicMaterial) {\r\n          mesh.material.color.copy(originalColor);\r\n        }\r\n      });\r\n      this.respawn();\r\n    }, 500); // Short delay before respawn\r\n  }\r\n\r\n  private respawn() {\r\n    // Reset isDead flag\r\n    this.isDead = false;\r\n\r\n    console.log('Respawning player at:', this.respawnPosition);\r\n    // Use setPosition to handle resetting physics, rotation, camera etc.\r\n    this.setPosition(this.respawnPosition);\r\n\r\n  }\r\n\r\n  // Update the respawn position (e.g., if checkpoints were added)\r\n  updateRespawnPosition(position: Vector3) {\r\n    this.respawnPosition = { ...position };\r\n  }\r\n\r\n  // Set internal death callback (e.g., for sounds or screen effects within webview)\r\n  setOnDeath(callback: () => void) {\r\n    this.onDeath = callback;\r\n  }\r\n\r\n  // Set internal level complete callback (e.g., for sounds or effects within webview)\r\n  // The primary notification to Devvit happens via postDevvitMessage in checkSpecialZones\r\n  setOnLevelComplete(callback: () => void) {\r\n    this.onLevelComplete = callback;\r\n  }\r\n\r\n  // Reset level completion state externally if needed (e.g., via Devvit message)\r\n  resetLevelCompletion() {\r\n    this.isLevelCompleted = false;\r\n  }\r\n\r\n  // Clean up event listeners on destroy\r\n  destroy() {\r\n    console.log('Destroying Player instance...');\r\n    window.removeEventListener(\"keydown\", this.keydownHandler);\r\n    window.removeEventListener(\"keyup\", this.keyupHandler);\r\n\r\n    // Clear any pending timeouts\r\n    if (this.deathTimeout !== null) {\r\n      window.clearTimeout(this.deathTimeout);\r\n      this.deathTimeout = null;\r\n    }\r\n\r\n    // Reset any callbacks\r\n    this.onDeath = null;\r\n    this.onLevelComplete = null;\r\n  }\r\n\r\n  // Event handlers using arrow functions to maintain 'this' context\r\n  private keydownHandler = (event: KeyboardEvent) => {\r\n    // Prevent default browser actions for spacebar etc. if needed\r\n     if (event.key === ' ') {\r\n       event.preventDefault();\r\n     }\r\n    this.keys[event.key.toLowerCase()] = true;\r\n\r\n    // Trigger jump directly on keydown for responsiveness\r\n    if (event.key.toLowerCase() === this.controls.jump) {\r\n      this.jump();\r\n    }\r\n  };\r\n\r\n  private keyupHandler = (event: KeyboardEvent) => {\r\n    this.keys[event.key.toLowerCase()] = false;\r\n  };\r\n}\r\n","// webroot/src/script.ts\r\nimport * as THREE from 'three';\r\nimport { BlockFactory } from './blockFactory.js';\r\nimport { Player } from './player.js';\r\nimport { Block, CourseData, Vector3, AtmosphereSettings } from './types.js'; // Use simplified CourseData\r\nimport type { WebViewMessage, DevvitMessage, DevvitSystemMessage } from './message.js'; // Adjust path\r\n\r\n/**\r\n * Sends a message TO the Devvit app frame.\r\n * @param {WebViewMessage} msg - The message to send.\r\n */\r\nfunction postDevvitMessage(msg: WebViewMessage): void {\r\n  if (window.parent) {\r\n    window.parent.postMessage(msg, '*');\r\n  } else {\r\n    console.error(\"Cannot post message: not running inside an iframe (window.parent is null)\");\r\n  }\r\n}\r\n\r\nclass ParkourPlayerGame {\r\n  // Three.js components\r\n  private scene: THREE.Scene;\r\n  private camera: THREE.PerspectiveCamera;\r\n  private renderer: THREE.WebGLRenderer;\r\n  private clock: THREE.Clock;\r\n\r\n  // Game components\r\n  private blockFactory: BlockFactory;\r\n  private player: Player | null = null;\r\n  private currentCourseBlocks: Block[] = [];\r\n\r\n  // Atmosphere\r\n  private skyBox: THREE.Mesh | null = null;\r\n  private clouds: THREE.Group | null = null;\r\n  private sunMoon: THREE.Mesh | null = null;\r\n  private ambientLight: THREE.AmbientLight;\r\n  private directionalLight: THREE.DirectionalLight;\r\n\r\n  private gameLoopId: number | null = null; // To control the animation loop\r\n  private loadingIndicator: HTMLElement | null;\r\n\r\n  constructor() {\r\n    this.blockFactory = new BlockFactory();\r\n    this.clock = new THREE.Clock();\r\n    this.loadingIndicator = document.getElementById('loading-indicator');\r\n\r\n    // --- Basic Three.js Setup ---\r\n    this.scene = new THREE.Scene();\r\n    this.scene.background = new THREE.Color(0x87ceeb); // Default day sky\r\n\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    // Camera position will be controlled by the Player\r\n\r\n    const canvas = document.getElementById(\"threejs-canvas\") as HTMLCanvasElement;\r\n    if (!canvas) {\r\n        throw new Error(\"Canvas element #threejs-canvas not found!\");\r\n    }\r\n    this.renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });\r\n    this.renderer.setPixelRatio(window.devicePixelRatio);\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    // --- Lighting ---\r\n    this.ambientLight = new THREE.AmbientLight(0xffffff, 0.5); // Slightly dimmer ambient\r\n    this.scene.add(this.ambientLight);\r\n    this.directionalLight = new THREE.DirectionalLight(0xffffff, 0.7); // Slightly dimmer directional\r\n    this.directionalLight.position.set(10, 20, 10);\r\n    // Add shadow capabilities if desired\r\n    // this.directionalLight.castShadow = true;\r\n    // this.renderer.shadowMap.enabled = true;\r\n    this.scene.add(this.directionalLight);\r\n\r\n\r\n    // --- Event Listeners ---\r\n    window.addEventListener('resize', this.onWindowResize);\r\n    window.addEventListener('message', this.handleDevvitMessage);\r\n\r\n    // --- Signal Devvit that the web view is ready ---\r\n    // Wait a tiny moment for scripts to fully load before signaling ready\r\n    requestAnimationFrame(() => {\r\n        postDevvitMessage({ type: 'webViewReady' });\r\n        console.log('Web View Ready message sent.');\r\n         if (this.loadingIndicator) this.loadingIndicator.textContent = 'Waiting for course data...';\r\n    });\r\n  }\r\n\r\n  private onWindowResize = () => {\r\n    if (!this.renderer || !this.camera) return;\r\n    this.camera.aspect = window.innerWidth / window.innerHeight;\r\n    this.camera.updateProjectionMatrix();\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n  }\r\n\r\n  // --- Message Handling from Devvit ---\r\n  private handleDevvitMessage = (event: MessageEvent) => {\r\n     // More robust check for Devvit messages\r\n     if (!event.data || event.data.type !== 'devvit-message' || !event.data.data || !event.data.data.message) {\r\n         // console.log(\"Ignoring non-Devvit message or invalid format:\", event.data);\r\n         return;\r\n     }\r\n\r\n    const message = event.data.data.message as DevvitMessage; // Extract the actual message\r\n    console.log('Received message from Devvit:', message);\r\n\r\n    switch (message.type) {\r\n      case 'loadCourse':\r\n        this.loadCourse(message.courseJson);\r\n        break;\r\n      case 'resetPlayer':\r\n        if (this.player) {\r\n           const startBlock = this.currentCourseBlocks.find(b => b.type === 'start');\r\n           const startPos = startBlock\r\n              ? { x: startBlock.position.x, y: startBlock.position.y + 1.0, z: startBlock.position.z }\r\n              : { x: 0, y: 1, z: 0 };\r\n           this.player.setPosition(startPos);\r\n           this.player.resetLevelCompletion(); // Ensure level complete flag is reset\r\n        }\r\n        break;\r\n      default:\r\n        console.warn('Unknown message type received from Devvit:', message);\r\n    }\r\n  };\r\n\r\n  // --- Course Loading ---\r\n  private loadCourse(courseJson: string) {\r\n    if (this.loadingIndicator) {\r\n        this.loadingIndicator.style.display = 'block';\r\n        this.loadingIndicator.textContent = 'Loading Course...';\r\n    }\r\n\r\n    try {\r\n      // Use the simplified CourseData type for parsing\r\n      const courseData: CourseData = JSON.parse(courseJson);\r\n      console.log('Successfully parsed course JSON:', courseData.name);\r\n\r\n      // Clear existing scene elements\r\n      this.clearScene();\r\n\r\n      // --- Deserialize and Add Blocks ---\r\n      if (!courseData.blocks || !Array.isArray(courseData.blocks)) {\r\n          throw new Error(\"Course data is missing or has invalid 'blocks' array.\");\r\n      }\r\n      this.currentCourseBlocks = courseData.blocks.map((blockData) => {\r\n        if (!blockData || !blockData.type || !blockData.position || !blockData.rotation) {\r\n             console.warn(\"Skipping invalid block data:\", blockData);\r\n             return null; // Skip invalid block data\r\n        }\r\n        try {\r\n            return this.blockFactory.createBlock(\r\n              blockData.type,\r\n              blockData.position,\r\n              blockData.rotation\r\n            );\r\n        } catch(blockError: any) {\r\n             console.error(`Failed to create block of type ${blockData.type}:`, blockError.message);\r\n             return null; // Skip blocks that fail creation\r\n        }\r\n      }).filter(block => block !== null) as Block[]; // Filter out nulls\r\n\r\n\r\n      this.currentCourseBlocks.forEach(block => {\r\n        if (block.mesh) {\r\n          this.scene.add(block.mesh);\r\n          // Enable shadows if needed\r\n          // block.mesh.castShadow = true;\r\n          // block.mesh.receiveShadow = true;\r\n        }\r\n      });\r\n      console.log(`Added ${this.currentCourseBlocks.length} blocks to the scene.`);\r\n\r\n      // --- Setup Atmosphere ---\r\n      const atmosphereSettings = courseData.atmosphere || { isDayMode: true };\r\n      this.setupAtmosphere(atmosphereSettings);\r\n\r\n      // --- Determine Start Position ---\r\n      // Use startPosition from JSON if available, otherwise find 'start' block\r\n       let startPosition: Vector3;\r\n       if (courseData.startPosition && courseData.startPosition.x !== undefined) {\r\n            // Use provided start position, maybe raise Y slightly\r\n            startPosition = { ...courseData.startPosition, y: courseData.startPosition.y + 0.1 };\r\n            console.log('Using startPosition from JSON:', startPosition);\r\n       } else {\r\n            const startBlock = this.currentCourseBlocks.find(b => b.type === 'start');\r\n            startPosition = startBlock\r\n            ? { x: startBlock.position.x, y: startBlock.position.y + 1.0, z: startBlock.position.z } // Start slightly above the block\r\n            : { x: 0, y: 1, z: 0 }; // Default start position if none found\r\n            console.log('Using detected start block or default:', startPosition);\r\n       }\r\n\r\n\r\n      console.log('Creating player at:', startPosition);\r\n      // --- Create Player ---\r\n      this.player = new Player(startPosition, this.camera);\r\n      this.scene.add(this.player.mesh);\r\n      // Enable shadows if needed\r\n      // this.player.mesh.castShadow = true;\r\n\r\n      // --- Set Player Callbacks ---\r\n      // Player death is handled internally (respawn), no message needed unless desired\r\n      this.player.setOnDeath(() => {\r\n        console.log('Player died (internal callback).');\r\n        // Could send message: postDevvitMessage({ type: 'playerDied' });\r\n      });\r\n\r\n      // Level completion sends message back to Devvit\r\n      this.player.setOnLevelComplete(() => {\r\n        console.log('Level Complete! (internal callback)');\r\n        // Message is sent from within Player.checkSpecialZones now\r\n      });\r\n\r\n      // --- Start Game Loop ---\r\n      this.startGameLoop();\r\n\r\n      if (this.loadingIndicator) this.loadingIndicator.style.display = 'none';\r\n\r\n    } catch (error: any) {\r\n      console.error(\"Failed to load course:\", error.message);\r\n      if (this.loadingIndicator) {\r\n          this.loadingIndicator.textContent = `Error loading course: ${error.message}`;\r\n          this.loadingIndicator.style.color = 'red';\r\n      }\r\n      // Optional: Send error message back to Devvit\r\n      // postDevvitMessage({ type: 'loadError', error: `Invalid course data: ${error.message}` });\r\n    }\r\n  }\r\n\r\n  private clearScene() {\r\n    // Stop loop first\r\n    if (this.gameLoopId !== null) {\r\n      cancelAnimationFrame(this.gameLoopId);\r\n      this.gameLoopId = null;\r\n    }\r\n\r\n    // Remove blocks\r\n    this.currentCourseBlocks.forEach(block => {\r\n      if (block.mesh) {\r\n        this.scene.remove(block.mesh);\r\n        // Proper disposal (important for WebGL memory)\r\n        if (block.mesh instanceof THREE.Group) {\r\n            block.mesh.traverse(child => {\r\n                if (child instanceof THREE.Mesh) {\r\n                    child.geometry?.dispose();\r\n                    if (Array.isArray(child.material)) {\r\n                        child.material.forEach(mat => mat.dispose());\r\n                    } else {\r\n                        child.material?.dispose();\r\n                    }\r\n                }\r\n            });\r\n        } else if (block.mesh instanceof THREE.Mesh) {\r\n             block.mesh.geometry?.dispose();\r\n             if (Array.isArray(block.mesh.material)) {\r\n                 block.mesh.material.forEach(mat => mat.dispose());\r\n             } else {\r\n                 block.mesh.material?.dispose();\r\n             }\r\n        }\r\n      }\r\n    });\r\n    this.currentCourseBlocks = [];\r\n\r\n    // Remove player\r\n    if (this.player) {\r\n      this.scene.remove(this.player.mesh);\r\n      this.player.destroy(); // Clean up player listeners\r\n      this.player = null;\r\n    }\r\n     // Remove atmosphere elements\r\n    if (this.skyBox) this.scene.remove(this.skyBox);\r\n    if (this.clouds) this.scene.remove(this.clouds);\r\n    if (this.sunMoon) this.scene.remove(this.sunMoon);\r\n    // Add disposal for atmosphere geometries/materials if needed\r\n    this.skyBox = null;\r\n    this.clouds = null;\r\n    this.sunMoon = null;\r\n  }\r\n\r\n  // --- Game Loop ---\r\n  private startGameLoop() {\r\n    if (this.gameLoopId === null) { // Prevent multiple loops\r\n        console.log(\"Starting game loop...\");\r\n        this.animate();\r\n    } else {\r\n        console.log(\"Game loop already running.\");\r\n    }\r\n  }\r\n\r\n  private animate = () => { // Use arrow function to bind 'this'\r\n    this.gameLoopId = requestAnimationFrame(this.animate); // Request next frame\r\n\r\n    const delta = this.clock.getDelta();\r\n    const time = this.clock.getElapsedTime();\r\n\r\n    // Animate kill zones\r\n    this.animateKillZones(time);\r\n\r\n    // Update Player\r\n    if (this.player) {\r\n      this.player.update(delta, time, this.currentCourseBlocks);\r\n      // Camera is updated inside player.update()\r\n    } else {\r\n        // If no player, maybe stop the loop? Or just wait.\r\n        // console.log(\"Waiting for player...\");\r\n    }\r\n\r\n    // Render the scene\r\n    if (this.renderer && this.scene && this.camera) {\r\n        this.renderer.render(this.scene, this.camera);\r\n    } else {\r\n         console.error(\"Renderer, Scene, or Camera is missing. Cannot render.\");\r\n         if (this.gameLoopId !== null) cancelAnimationFrame(this.gameLoopId);\r\n         this.gameLoopId = null;\r\n    }\r\n\r\n  }\r\n\r\n  // --- Atmosphere & Killzone Methods (Copied directly from previous example, ensure THREE is accessible) ---\r\n  private setupAtmosphere(settings: AtmosphereSettings) { /* ... code ... */\r\n    // Remove existing atmosphere elements\r\n    if (this.skyBox) this.scene.remove(this.skyBox);\r\n    if (this.clouds) this.scene.remove(this.clouds);\r\n    if (this.sunMoon) this.scene.remove(this.sunMoon);\r\n\r\n    if (settings.isDayMode) {\r\n      this.scene.background = new THREE.Color(0x87ceeb);\r\n      this.createDaytimeAtmosphere();\r\n    } else {\r\n      this.scene.background = new THREE.Color(0x6666ff);\r\n      this.createNighttimeAtmosphere();\r\n    }\r\n    this.updateLighting(settings);\r\n  }\r\n  private createDaytimeAtmosphere() { /* ... code ... */\r\n    const sunGeometry = new THREE.SphereGeometry(5, 32, 32);\r\n    const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00, transparent: true, opacity: 0.8 });\r\n    this.sunMoon = new THREE.Mesh(sunGeometry, sunMaterial);\r\n    this.sunMoon.position.set(50, 100, -100);\r\n    this.scene.add(this.sunMoon);\r\n\r\n    this.clouds = new THREE.Group();\r\n    for (let i = 0; i < 15; i++) {\r\n      const cloud = this.createCloud(0xffffff, 0.3);\r\n      cloud.position.set((Math.random() - 0.5) * 200, 25 + Math.random() * 20, (Math.random() - 0.5) * 200);\r\n      this.clouds.add(cloud);\r\n    }\r\n    this.scene.add(this.clouds);\r\n  }\r\n  private createNighttimeAtmosphere() { /* ... code ... */\r\n    const moonGeometry = new THREE.SphereGeometry(5, 32, 32);\r\n    const moonMaterial = new THREE.MeshBasicMaterial({ color: 0xdddddd, transparent: true, opacity: 0.8 });\r\n    this.sunMoon = new THREE.Mesh(moonGeometry, moonMaterial);\r\n    this.sunMoon.position.set(50, 100, -100);\r\n    this.scene.add(this.sunMoon);\r\n\r\n    this.clouds = new THREE.Group();\r\n    for (let i = 0; i < 10; i++) {\r\n      const cloud = this.createCloud(0x777777, 0.5);\r\n      cloud.position.set((Math.random() - 0.5) * 200, 25 + Math.random() * 20, (Math.random() - 0.5) * 200);\r\n      this.clouds.add(cloud);\r\n    }\r\n    this.scene.add(this.clouds);\r\n  }\r\n  private createCloud(color: number, opacity: number): THREE.Group { /* ... code ... */\r\n    const cloudGroup = new THREE.Group();\r\n    const sphereCount = 5 + Math.floor(Math.random() * 5);\r\n    const baseSize = 3 + Math.random() * 3;\r\n    for (let i = 0; i < sphereCount; i++) {\r\n        const sphereGeometry = new THREE.SphereGeometry(baseSize * (0.6 + Math.random() * 0.4), 8, 8);\r\n        const sphereMaterial = new THREE.MeshLambertMaterial({ color: color, transparent: true, opacity: opacity });\r\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n        const angle = (i / sphereCount) * Math.PI * 2;\r\n        const radius = baseSize * 0.8;\r\n        sphere.position.set(Math.cos(angle) * radius, (Math.random() - 0.5) * baseSize * 0.5, Math.sin(angle) * radius);\r\n        cloudGroup.add(sphere);\r\n    }\r\n    return cloudGroup;\r\n  }\r\n  private updateLighting(settings: AtmosphereSettings) { /* ... code ... */\r\n    if (settings.isDayMode) {\r\n      this.ambientLight.intensity = 0.5;\r\n      this.directionalLight.intensity = 0.7;\r\n      this.directionalLight.color.set(0xffffff);\r\n      this.directionalLight.position.set(10, 20, 10);\r\n    } else {\r\n      this.ambientLight.intensity = 0.3; // Dimmer night ambient\r\n      this.directionalLight.intensity = 0.4; // Dimmer night directional\r\n      this.directionalLight.color.set(0xccddff); // Moonlight color\r\n      this.directionalLight.position.set(-10, 20, -10);\r\n    }\r\n  }\r\n  private animateKillZones(time: number) { /* ... code ... */\r\n    if (!this.currentCourseBlocks) return;\r\n     for (const block of this.currentCourseBlocks) {\r\n       if ((block.type === 'killZone' || block.type === 'killZoneLarge') && block.mesh) {\r\n         const opacity = 0.4 + (Math.sin(time * 4) + 1) * 0.15; // Faster pulse\r\n         if (block.mesh instanceof THREE.Mesh) {\r\n           const material = block.mesh.material as THREE.MeshLambertMaterial;\r\n           if (material.transparent) material.opacity = opacity;\r\n         } else if (block.mesh instanceof THREE.Group) {\r\n           if (block.mesh.children.length > 0) {\r\n             const baseMesh = block.mesh.children[0];\r\n             if (baseMesh instanceof THREE.Mesh) {\r\n               const material = baseMesh.material as THREE.MeshLambertMaterial;\r\n               if (material.transparent) material.opacity = opacity;\r\n             }\r\n           }\r\n           for (let i = 1; i < block.mesh.children.length; i++) {\r\n             const triangle = block.mesh.children[i];\r\n             if (triangle instanceof THREE.Mesh) {\r\n               const originalY = (triangle as any).originalY ?? 0.3;\r\n               const randomPhase = (triangle as any).randomPhase ?? 0;\r\n               triangle.position.y = originalY + Math.sin(time * 2.5 + randomPhase) * 0.12; // Slightly different animation\r\n               triangle.rotation.y = time * 0.6 + randomPhase;\r\n             }\r\n           }\r\n         }\r\n       }\r\n     }\r\n   }\r\n\r\n  // Method to clean up resources\r\n  public destroy() {\r\n    console.log(\"Destroying ParkourPlayerGame instance...\");\r\n    window.removeEventListener('resize', this.onWindowResize);\r\n    window.removeEventListener('message', this.handleDevvitMessage);\r\n    this.clearScene(); // Stops loop and cleans up player/blocks\r\n    // Dispose renderer and its context\r\n    this.renderer?.dispose();\r\n    console.log(\"ParkourPlayerGame destroyed.\");\r\n  }\r\n}\r\n\r\n// --- Global Instance ---\r\n// Ensure only one game instance is created\r\nlet gameInstance: ParkourPlayerGame | null = null;\r\n\r\nif (!gameInstance) {\r\n    try {\r\n        gameInstance = new ParkourPlayerGame();\r\n        console.log(\"ParkourPlayerGame Initialized\");\r\n    } catch (initError) {\r\n         console.error(\"Failed to initialize ParkourPlayerGame:\", initError);\r\n         const indicator = document.getElementById('loading-indicator');\r\n         if(indicator) {\r\n             indicator.textContent = \"Initialization Error!\";\r\n             indicator.style.color = 'red';\r\n         }\r\n    }\r\n\r\n}\r\n\r\n// Optional: Add cleanup listener for when the web view might be abruptly closed\r\n// Note: 'unload' and 'beforeunload' are unreliable, especially in iframes.\r\n// Devvit's onUnmount in useWebView is generally more reliable.\r\n// window.addEventListener('unload', () => {\r\n//   if (gameInstance) {\r\n//     gameInstance.destroy();\r\n//     gameInstance = null;\r\n//   }\r\n// });\r\n"],"names":["REVISION","NoColorSpace","SRGBColorSpace","LinearSRGBColorSpace","LinearTransfer","SRGBTransfer","GLSL3","EventDispatcher","type","listener","listeners","listenerArray","index","event","array","i","l","_lut","_seed","DEG2RAD","RAD2DEG","generateUUID","d0","d1","d2","d3","clamp","value","min","max","euclideanModulo","n","m","mapLinear","x","a1","a2","b1","b2","inverseLerp","y","lerp","damp","lambda","dt","pingpong","length","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","seededRandom","s","t","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","denormalize","normalize","MathUtils","Vector2","scalar","v","e","minVal","maxVal","denominator","theta","dx","dy","alpha","v1","v2","offset","attribute","center","angle","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","me","xAxis","yAxis","zAxis","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","d","f","g","h","t11","t12","t13","det","detInv","tmp","matrix4","r","tx","ty","sx","sy","rotation","cx","cy","_m3","matrix","arrayNeedsUint32","createElementNS","name","createCanvasElement","canvas","_cache","warnOnce","message","probeAsync","gl","sync","interval","resolve","reject","probe","toNormalizedProjectionMatrix","projectionMatrix","toReversedProjectionMatrix","LINEAR_REC709_TO_XYZ","XYZ_TO_LINEAR_REC709","createColorManagement","ColorManagement","color","sourceColorSpace","targetColorSpace","SRGBToLinear","LinearToSRGB","colorSpace","target","colorSpaces","targetMatrix","REC709_PRIMARIES","REC709_LUMINANCE_COEFFICIENTS","D65","_canvas","ImageUtils","image","context","imageData","data","_sourceId","Source","meta","isRootObject","output","url","serializeImage","_textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","source","uv","Vector4","z","w","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","RenderTarget","width","height","options","texture","count","current","depth","il","WebGLRenderTarget","DataArrayTexture","layerIndex","Data3DTexture","Quaternion","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","quaternion","euler","update","c1","c3","s1","s3","axis","halfAngle","trace","vFrom","vTo","step","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","qa","theta1","theta2","r1","r2","callback","Vector3","_quaternion$4","vx","vy","vz","qx","qy","qz","qw","tz","camera","ax","ay","az","bx","by","bz","planeNormal","_vector$c","normal","dz","radius","phi","sinPhiRadius","sz","u","Box3","_vector$b","points","size","halfSize","object","precise","box","point","vector","geometry","positionAttribute","_box$4","children","sphere","plane","triangle","_center","_extents","_v0$2","_v1$7","_v2$4","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","_points","_testAxis","v0","extents","j","p0","p1","p2","_box$3","_v1$6","_v2$3","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","lengthSq","delta","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","Ray","origin","direction","ray","directionDistance","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","tca","radius2","thc","t0","t1","distToPoint","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","backfaceCulling","DdN","sign","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","scaleX","_v1$5","scaleY","scaleZ","af","bf","ce","cf","de","df","ac","ad","bc","bd","_zero","_one","eye","up","_z","_x","_y","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","t14","scaleXSq","scaleYSq","scaleZSq","yx","zx","zy","position","scale","x2","y2","z2","wx","wy","wz","_m1$2","invSX","invSY","invSZ","left","right","top","bottom","near","far","coordinateSystem","p","zInv","_matrix$2","_quaternion$3","Euler","newOrder","Layers","channel","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","_childaddedEvent","_childremovedEvent","Object3D","onRotationChange","onQuaternionChange","distance","parent","id","result","force","updateParents","updateChildren","bound","serialize","library","element","parameters","shapes","shape","uuids","animation","geometries","extractFromCache","materials","textures","images","skeletons","animations","nodes","cache","values","key","recursive","child","_v0$1","_v1$3","_v2$2","_v3$2","_vab","_vac","_vbc","_vap","_vbp","_vcp","_v40","_v41","_v42","Triangle","targetLengthSq","dot00","dot01","dot02","dot11","dot12","denom","invDenom","p3","v3","attr","i1","i2","i3","barycoord","i0","d4","vc","d5","d6","vb","va","_colorKeywords","_hslA","_hslB","hue2rgb","Color","hex","style","handleAlpha","string","components","_color","hue","saturation","lightness","color1","color2","_materialId","Material","newValue","currentValue","srcPlanes","dstPlanes","MeshBasicMaterial","_vector$9","_vector2$1","_id$2","BufferAttribute","itemSize","normalized","start","index1","index2","component","Uint16BufferAttribute","Uint32BufferAttribute","Float32BufferAttribute","_id$1","_m1","_obj","_offset","_box$2","_boxMorphTargets","_vector$8","BufferGeometry","indirect","materialIndex","normalMatrix","tangent","morphAttributesPosition","morphAttribute","morphTargetsRelative","jl","attributes","normalAttribute","uvAttribute","tangentAttribute","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","handleTriangle","groups","group","tmp2","n2","handleVertex","pA","pB","pC","nA","nB","nC","cb","ab","normals","convertBufferAttribute","indices","array2","geometry2","newAttribute","morphAttributes","morphArray","hasMorphAttributes","attributeArray","boundingSphere","boundingBox","_inverseMatrix$3","_ray$3","_sphere$6","_sphereHitAt","_vA$1","_vB$1","_vC$1","_tempA","_morphA","_intersectionPoint","_intersectionPointWorld","Mesh","material","keys","ml","morphPosition","morphInfluences","influence","raycaster","intersects","matrixWorld","rayLocalSpace","intersection","uv1","drawRange","groupMaterial","end","checkGeometryIntersection","checkIntersection$1","intersect","face","BoxGeometry","widthSegments","heightSegments","depthSegments","scope","vertices","uvs","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","cloneUniforms","src","property","mergeUniforms","uniforms","merged","cloneUniformsGroups","getUnlitUniformColorSpace","renderer","currentRenderTarget","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","extensions","Camera","_v3$1","_minTarget","_maxTarget","PerspectiveCamera","fov","aspect","focalLength","vExtentSlope","minTarget","maxTarget","fullWidth","fullHeight","view","skew","CubeCamera","renderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","cameras","scene","activeMipmapLevel","currentActiveCubeFace","currentActiveMipmapLevel","currentXrEnabled","generateMipmaps","CubeTexture","WebGLCubeRenderTarget","shader","mesh","currentMinFilter","stencil","Group","_moveEvent","WebXRController","inputSource","hand","inputjoint","frame","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","jointPose","joint","indexTip","thumbTip","distanceToPinch","threshold","Scene","_vector1","_vector2","_normalMatrix","Plane","constant","inverseNormalLength","line","startSign","endSign","optionalNormalMatrix","referencePoint","_sphere$3","_vector$6","Frustum","p4","p5","planes","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","sprite","negRadius","DepthTexture","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","thetaStart","thetaLength","indexArray","halfHeight","generateTorso","generateCap","vertex","slope","indexRow","sinTheta","cosTheta","centerIndexStart","centerIndexEnd","ConeGeometry","PlaneGeometry","width_half","height_half","segment_width","segment_height","SphereGeometry","phiStart","phiLength","thetaEnd","grid","verticesRow","uOffset","MeshLambertMaterial","MeshDepthMaterial","MeshDistanceMaterial","Light","intensity","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","LightShadow","light","shadowCamera","shadowMatrix","viewportIndex","OrthographicCamera","scaleW","scaleH","DirectionalLightShadow","DirectionalLight","AmbientLight","ArrayCamera","Clock","autoStart","now","diff","newTime","getByteLength","typeByteLength","getTextureTypeByteLength","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","time","WebGLAttributes","buffers","createBuffer","bufferType","usage","buffer","updateBuffer","updateRanges","mergeIndex","previousRange","get","remove","cached","alphahash_fragment","alphahash_pars_fragment","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","alphatest_pars_fragment","aomap_fragment","aomap_pars_fragment","batching_pars_vertex","batching_vertex","begin_vertex","beginnormal_vertex","bsdfs","iridescence_fragment","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","colorspace_fragment","colorspace_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_pars_fragment","lights_lambert_fragment","lights_lambert_pars_fragment","lights_pars_begin","envmap_physical_pars_fragment","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphinstance_vertex","morphcolor_vertex","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normal_pars_fragment","normal_pars_vertex","normal_vertex","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","iridescence_pars_fragment","opaque_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","worldpos_vertex","vertex$h","fragment$h","vertex$g","fragment$g","vertex$f","fragment$f","vertex$e","fragment$e","vertex$d","fragment$d","vertex$c","fragment$c","vertex$b","fragment$b","vertex$a","fragment$a","vertex$9","fragment$9","vertex$8","fragment$8","vertex$7","fragment$7","vertex$6","fragment$6","vertex$5","fragment$5","vertex$4","fragment$4","vertex$3","fragment$3","vertex$2","fragment$2","vertex$1","fragment$1","ShaderChunk","UniformsLib","ShaderLib","_rgb","_e1$1","WebGLBackground","cubemaps","cubeuvmaps","state","objects","premultipliedAlpha","clearColor","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","getBackground","background","render","forceClear","setClear","environmentBlendMode","addToRenderList","renderList","dispose","WebGLBindingStates","maxVertexAttributes","bindingStates","defaultState","createBindingState","currentState","forceUpdate","setup","program","updateBuffers","getBindingState","bindVertexArrayObject","needsUpdate","saveCache","setupVertexAttributes","createVertexArrayObject","vao","deleteVertexArrayObject","wireframe","programMap","stateMap","newAttributes","enabledAttributes","attributeDivisors","cachedAttributes","geometryAttributes","attributesNum","programAttributes","cachedAttribute","geometryAttribute","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","disableUnusedAttributes","vertexAttribPointer","stride","integer","materialDefaultAttributeValues","programAttribute","bytesPerElement","reset","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","resetDefaultState","WebGLBufferRenderer","info","mode","setMode","renderInstances","primcount","renderMultiDraw","starts","counts","drawCount","elementCount","renderMultiDrawInstances","extension","WebGLCapabilities","utils","maxAnisotropy","getMaxAnisotropy","textureFormatReadable","textureFormat","textureTypeReadable","textureType","halfFloatSupportedByExt","getMaxPrecision","precision","maxPrecision","logarithmicDepthBuffer","reverseDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","maxSamples","WebGLClipping","properties","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","enableLocalClipping","enabled","projectPlanes","useCache","clipIntersection","clipShadows","materialProperties","resetGlobalState","nGlobal","lGlobal","dstArray","skipTransform","nPlanes","flatSize","viewMatrix","i4","WebGLCubeMaps","mapTextureMapping","cubemap","onTextureDispose","LOD_MIN","EXTRA_LOD_SIGMA","MAX_SAMPLES","_flatCamera","_clearColor","_oldTarget","_oldActiveCubeFace","_oldActiveMipmapLevel","_oldXrEnabled","PHI","INV_PHI","_axisDirections","_origin","PMREMGenerator","sigma","cubeUVRenderTarget","equirectangular","_getCubemapMaterial","_getEquirectMaterial","cubeSize","outputTarget","_setViewport","params","_createRenderTarget","_lodMax","_createPlanes","_getBlurShader","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","toneMapping","backgroundMaterial","backgroundBox","useSolidColor","col","isCubeTexture","autoClear","poleAxis","lodIn","lodOut","pingPongRenderTarget","targetIn","targetOut","sigmaRadians","blurMaterial","STANDARD_DEVIATIONS","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","samples","weights","sum","weight","outputSize","lodMax","lodPlanes","sizeLods","sigmas","lod","totalLods","sizeLod","texelSize","cubeFaces","positionSize","uvSize","faceIndexSize","faceIndex","coordinates","fill","_getCommonVertexShader","WebGLCubeUVMaps","cubeUVmaps","pmremGenerator","isEquirectMap","isCubeMap","currentPMREMVersion","isCubeTextureComplete","cubemapUV","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","updateWireframeAttribute","geometryIndex","geometryPosition","version","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","setIndex","WebGLInfo","memory","instanceCount","WebGLMorphtargets","capabilities","morphTextures","morph","objectInfluences","morphTargetsCount","entry","disposeTexture","hasMorphPosition","hasMorphNormals","hasMorphColors","morphTargets","morphNormals","morphColors","vertexDataCount","vertexDataStride","morphTarget","morphNormal","morphColor","morphInfluencesSum","morphBaseInfluence","WebGLObjects","updateMap","buffergeometry","onInstancedMeshDispose","skeleton","instancedMesh","emptyTexture","emptyShadowTexture","emptyArrayTexture","empty3dTexture","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","copyArray","allocTexUnits","setValueV1f","setValueV2f","setValueV3f","setValueV4f","setValueM2","elements","setValueM3","setValueM4","setValueV1i","setValueV2i","setValueV3i","setValueV4i","setValueV1ui","setValueV2ui","setValueV3ui","setValueV4ui","setValueT1","unit","emptyTexture2D","setValueT3D1","setValueT6","setValueT2DArray1","getSingularSetter","setValueV1fArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","units","setValueT3DArray","setValueT6Array","setValueT2DArrayArray","getPureArraySetter","SingleUniform","activeInfo","addr","PureArrayUniform","StructuredUniform","seq","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","match","matchEnd","idIsIndex","subscript","next","WebGLUniforms","WebGLShader","COMPLETION_STATUS_KHR","programIdCount","handleSource","errorLine","lines","lines2","from","to","_m0","getEncodingComponents","encodingMatrix","getShaderErrors","status","errors","errorMatches","getTexelEncodingFunction","functionName","getToneMappingFunction","toneMappingName","_v0","getLuminanceFunction","generateVertexExtensions","filterEmptyLine","generateDefines","defines","chunks","fetchAttributeLocations","locationSize","replaceLightNums","numSpotLightCoords","replaceClippingPlaneNums","includePattern","resolveIncludes","includeReplacer","shaderChunkMap","include","newInclude","unrollLoopPattern","unrollLoops","loopReplacer","snippet","generatePrecision","precisionstring","generateShadowMapTypeDefine","shadowMapTypeDefine","generateEnvMapTypeDefine","envMapTypeDefine","generateEnvMapModeDefine","envMapModeDefine","generateEnvMapBlendingDefine","envMapBlendingDefine","generateCubeUVSize","imageHeight","maxMip","texelHeight","WebGLProgram","cacheKey","vertexShader","fragmentShader","envMapCubeUVSize","customVertexExtensions","customDefines","prefixVertex","prefixFragment","versionString","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","onFirstUse","self","programLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","cachedUniforms","programReady","_id","WebGLShaderCache","vertexShaderStage","fragmentShaderStage","materialShaders","shaderStage","set","code","stage","WebGLShaderStage","WebGLPrograms","clipping","_programLayers","_customShaders","_activeChannels","programs","SUPPORTS_VERTEX_TEXTURES","shaderIDs","getChannel","getParameters","lights","shadows","fog","environment","envMap","envMapCubeUVHeight","shaderID","morphTextureStride","customVertexShaderID","customFragmentShaderID","IS_INSTANCEDMESH","IS_BATCHEDMESH","HAS_MAP","HAS_MATCAP","HAS_ENVMAP","HAS_AOMAP","HAS_LIGHTMAP","HAS_BUMPMAP","HAS_NORMALMAP","HAS_DISPLACEMENTMAP","HAS_EMISSIVEMAP","HAS_METALNESSMAP","HAS_ROUGHNESSMAP","HAS_ANISOTROPY","HAS_CLEARCOAT","HAS_DISPERSION","HAS_IRIDESCENCE","HAS_SHEEN","HAS_TRANSMISSION","HAS_ANISOTROPYMAP","HAS_CLEARCOATMAP","HAS_CLEARCOAT_NORMALMAP","HAS_CLEARCOAT_ROUGHNESSMAP","HAS_IRIDESCENCEMAP","HAS_IRIDESCENCE_THICKNESSMAP","HAS_SHEEN_COLORMAP","HAS_SHEEN_ROUGHNESSMAP","HAS_SPECULARMAP","HAS_SPECULAR_COLORMAP","HAS_SPECULAR_INTENSITYMAP","HAS_TRANSMISSIONMAP","HAS_THICKNESSMAP","HAS_GRADIENTMAP","HAS_ALPHAMAP","HAS_ALPHATEST","HAS_ALPHAHASH","HAS_EXTENSIONS","getProgramCacheKey","getProgramCacheKeyParameters","getProgramCacheKeyBooleans","getUniforms","acquireProgram","pl","preexistingProgram","releaseProgram","releaseShaderCache","WebGLProperties","has","map","painterSortStable","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","transmissive","transparent","init","getNextRenderItem","groupOrder","renderItem","push","unshift","sort","customOpaqueSort","customTransparentSort","finish","WebGLRenderLists","lists","renderCallDepth","listArray","list","UniformsCache","ShadowUniformsCache","nextVersion","shadowCastingAndTexturingLightsFirst","lightA","lightB","WebGLLights","shadowCache","vector3","matrix42","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","numSpotMaps","numSpotShadowsWithMaps","numLightProbes","shadowMap","shadow","shadowUniforms","hash","setupView","WebGLRenderState","lightsArray","shadowsArray","pushLight","pushShadow","shadowLight","setupLights","setupLightsView","WebGLRenderStates","renderStates","renderStateArray","renderState","fragment","WebGLShadowMap","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterial","_distanceMaterial","_materialCache","_maxTextureSize","shadowSide","shadowMaterialVertical","shadowMaterialHorizontal","fullScreenTri","fullScreenMesh","_previousType","activeCubeFace","_state","toVSM","fromVSM","shadowFrameExtents","pars","viewportCount","vp","viewport","renderObject","VSMPass","getDepthMaterial","customMaterial","keyA","keyB","materialsForVariant","cachedMaterial","onMaterialDispose","k","kl","depthMaterial","uuid","reversedFuncs","WebGLState","ColorBuffer","locked","currentColorMask","currentColorClear","colorMask","lock","DepthBuffer","reversed","currentDepthMask","currentDepthFunc","currentDepthClear","ext","oldDepth","depthTest","enable","disable","depthMask","depthFunc","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","stencilFunc","stencilRef","stencilFail","stencilZFail","stencilZPass","colorBuffer","depthBuffer","stencilBuffer","uboBindings","uboProgramMap","enabledCapabilities","currentBoundFramebuffers","currentDrawbuffers","defaultDrawbuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentBlendColor","currentBlendAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","scissorParam","viewportParam","currentScissor","currentViewport","createTexture","dimensions","emptyTextures","setFlipSided","setCullFace","setBlending","bindFramebuffer","framebuffer","drawBuffers","useProgram","equationToGL","factorToGL","blending","blendEquation","blendSrc","blendDst","blendEquationAlpha","blendSrcAlpha","blendDstAlpha","blendColor","blendAlpha","setMaterial","frontFaceCW","flipSided","stencilWrite","setPolygonOffset","cullFace","setLineWidth","polygonOffset","factor","setScissorTest","scissorTest","activeTexture","webglSlot","bindTexture","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","error","compressedTexImage3D","texSubImage2D","texSubImage3D","compressedTexSubImage2D","compressedTexSubImage3D","texStorage2D","texStorage3D","texImage2D","texImage3D","scissor","updateUBOMapping","uniformsGroup","blockIndex","uniformBlockBinding","WebGLTextures","_gl","multisampledRTTExt","supportsInvalidateFramebuffer","_imageDimensions","_videoTextures","_sources","useOffscreenCanvas","createCanvas","resizeImage","needsNewCanvas","maxSize","getDimensions","textureNeedsGenerateMipmaps","generateMipmap","getTargetType","getInternalFormat","internalFormatName","glFormat","glType","forceLinearTransfer","internalFormat","transfer","getInternalDepthFormat","useStencil","depthType","glInternalFormat","getMipLevels","deallocateTexture","onRenderTargetDispose","deallocateRenderTarget","textureProperties","webglTextures","deleteTexture","renderTargetProperties","level","attachmentProperties","textureUnits","resetTextureUnits","allocateTextureUnit","textureUnit","getTextureCacheKey","setTexture2D","slot","updateVideoTexture","uploadTexture","setTexture2DArray","setTexture3D","setTextureCube","uploadCubeTexture","wrappingToGL","filterToGL","compareToGL","setTextureParameters","initTexture","forceUpload","textureCacheKey","sourceProperties","workingPrimaries","texturePrimaries","unpackConversion","verifyColorSpace","mipmap","mipmaps","useTexStorage","allocateMemory","dataReady","levels","layerByteLength","layerData","isCompressed","isDataTexture","cubeImage","mipmapImage","setupFrameBufferTexture","attachment","textureTarget","useMultisampledRTT","getRenderTargetSamples","setupRenderBufferStorage","renderbuffer","isMultisample","depthTexture","glAttachmentType","setupDepthTexture","webglDepthTexture","setupDepthRenderbuffer","isCube","disposeEvent","rebindTextures","colorTexture","setupRenderTarget","isMultipleRenderTargets","glTextureType","updateRenderTargetMipmap","targetType","invalidationArrayRead","invalidationArrayDraw","updateMultisampleRenderTarget","mask","depthStyle","WebGLUtils","convert","_occlusion_vertex","_occlusion_fragment","WebXRDepthSensing","depthData","texProps","cameraXR","WebXRManager","session","framebufferScaleFactor","referenceSpaceType","foveation","customReferenceSpace","pose","glBinding","glProjLayer","glBaseLayer","xrFrame","depthSensing","initialRenderTarget","newRenderTarget","controllers","controllerInputSources","currentSize","currentPixelRatio","cameraL","cameraR","_currentDepthNear","_currentDepthFar","controller","onSessionEvent","controllerIndex","onSessionEnd","onInputSourcesChange","space","depthFormat","glDepthFormat","projectionlayerInit","layerInit","cameraLPos","cameraRPos","setProjectionFromUnion","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","updateCamera","depthNear","depthFar","updateUserCamera","onAnimationFrameCallback","views","cameraXRNeedsUpdate","glSubImage","enabledFeatures","_e1","WebGLMaterials","refreshTransformUniform","refreshFogUniforms","refreshMaterialUniforms","pixelRatio","transmissionRenderTarget","refreshUniformsCommon","refreshUniformsToon","refreshUniformsPhong","refreshUniformsStandard","refreshUniformsPhysical","refreshUniformsMatcap","refreshUniformsDistance","refreshUniformsLine","refreshUniformsDash","refreshUniformsPoints","refreshUniformsSprites","envMapRotation","WebGLUniformsGroups","updateList","allocatedBindingPoints","maxBindingPoints","bind","webglProgram","prepareUniformsGroup","onUniformsGroupsDispose","updateBufferData","bindingPointIndex","allocateBindingPointIndex","uniformArray","hasUniformChanged","arrayOffset","getUniformSize","indexString","cachedObject","chunkSize","chunkOffset","chunkPadding","chunkStart","WebGLRenderer","antialias","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","_alpha","uintClearColor","intClearColor","currentRenderList","currentRenderState","renderListStack","renderStateStack","_this","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_currentClearColor","_currentClearAlpha","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_currentProjectionMatrix","_projScreenMatrix","_vector3","_vector4","_emptyScene","_renderBackground","getTargetPixelRatio","getContext","contextName","contextAttributes","onContextLost","onContextRestore","onContextCreationError","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","uniformsGroups","initGLContext","xr","updateStyle","boolean","method","bits","isIntegerFormat","targetFormat","isUnsignedType","onXRSessionStart","onXRSessionEnd","infoAutoReset","shadowMapEnabled","shadowMapAutoUpdate","shadowMapNeedsUpdate","shadowMapType","deallocateMaterial","releaseMaterialProgramReferences","setProgram","rangeFactor","drawStart","drawEnd","lineWidth","maxInstanceCount","prepareMaterial","getProgram","targetScene","material2","checkMaterialsReady","depthSensingMesh","projectObject","opaqueObjects","transmissiveObjects","camera2","renderTransmissionPass","renderScene","sortObjects","transparentObjects","renderObjects","activeViewport","currentToneMapping","currentCameraViewport","renderTargetNeedsUpdate","currentSide","overrideMaterial","lightsStateVersion","programCacheKey","updateCommonMaterialProperties","materialNeedsLights","getUniformList","progUniforms","vertexAlphas","vertexTangents","needsProgramChange","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","markUniformsLightsNeedsUpdate","defaultFramebuffer","_scratchFrameBuffer","useDefaultFramebuffer","isRenderTarget3D","__webglFramebuffer","layer","activeCubeFaceIndex","glBuffer","currFramebuffer","levelScale","_srcFramebuffer","_dstFramebuffer","srcTexture","dstTexture","srcRegion","dstPosition","srcLevel","dstLevel","minX","minY","minZ","dstX","dstY","dstZ","glTarget","currentUnpackRowLen","currentUnpackImageHeight","currentUnpackSkipPixels","currentUnpackSkipRows","currentUnpackSkipImages","isSrc3D","isDst3D","srcTextureProperties","dstTextureProperties","srcRenderTargetProperties","dstRenderTargetProperties","BlockFactory","__publicField","THREE.BoxGeometry","THREE.MeshLambertMaterial","THREE.Mesh","THREE.MathUtils","garbageBagGroup","THREE.Group","bagGeometry","THREE.SphereGeometry","bagMaterial","bag","tieGeometry","THREE.CylinderGeometry","tieMaterial","tie","createBulge","bulgeGeometry","bulgeMaterial","bulge","THREE.Vector3","bridgeGroup","deckGeometry","deckMaterial","deck","railingMaterial","leftRailingGeometry","leftRailing","rightRailingGeometry","rightRailing","postMaterial","leftPostGeometry","leftPost","rightPostGeometry","rightPost","killZoneGroup","baseMesh","particleMaterial","THREE.MeshBasicMaterial","triangleGeometry","THREE.ConeGeometry","centerTriangleGeometry","centerTriangle","definition","_a","postDevvitMessage","msg","Player","bodyGeometry","bodyMaterial","addPatch","patchGeometry","patchMaterial","patch","headGeometry","headMaterial","beanieGeometry","beanieMaterial","beanie","beanieRimGeometry","beanieRimMaterial","beanieRim","stubbleGeometry","stubbleMaterial","stubble","legGeometry","legMaterial","leftLegTatterGeometry","leftLegTatterMaterial","leftLegTatter","rightLegTatterGeometry","rightLegTatterMaterial","rightLegTatter","armGeometry","armMaterial","leftArmTatterGeometry","leftArmTatterMaterial","leftArmTatter","rightArmTatterGeometry","rightArmTatterMaterial","rightArmTatter","leftGloveGeometry","leftGloveMaterial","leftGlove","rightGloveGeometry","rightGloveMaterial","rightGlove","THREE.Box3","blocks","tentativeY","verticalCollision","tentativeCollisionBox","block","blockBox","killZoneBox","tentativeX","tentativeZ","halfWidth","playerFeetY","blockTopY","xOverlap","zOverlap","pushX","pushZ","bottomY","topY","rotationAmount","didRotate","horizontalCollision","lookAtTarget","runCycle","meshColorMap","_","originalColor","ParkourPlayerGame","startBlock","startPos","THREE.Clock","THREE.Scene","THREE.Color","THREE.PerspectiveCamera","THREE.WebGLRenderer","THREE.AmbientLight","THREE.DirectionalLight","courseJson","courseData","blockData","blockError","atmosphereSettings","startPosition","_b","mat","settings","sunGeometry","sunMaterial","cloud","moonGeometry","moonMaterial","opacity","cloudGroup","sphereCount","baseSize","sphereGeometry","sphereMaterial","originalY","randomPhase","gameInstance","initError","indicator"],"mappings":";;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,MAAMA,KAAW;AAkKjB,MAAMC,KAAe,IACfC,KAAiB,QACjBC,KAAuB,eAEvBC,KAAiB,UACjBC,KAAe;AAwCrB,MAAMC,KAAQ;AAgCd,MAAMC,GAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQrB,iBAAkBC,GAAMC,GAAW;AAElC,IAAK,KAAK,eAAe,WAAY,KAAK,aAAa,CAAE;AAEzD,UAAMC,IAAY,KAAK;AAEvB,IAAKA,EAAWF,CAAM,MAAK,WAE1BE,EAAWF,CAAI,IAAK,CAAE,IAIlBE,EAAWF,CAAM,EAAC,QAASC,CAAQ,MAAO,MAE9CC,EAAWF,CAAI,EAAG,KAAMC,CAAU;AAAA,EAIrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASC,iBAAkBD,GAAMC,GAAW;AAElC,UAAMC,IAAY,KAAK;AAEvB,WAAKA,MAAc,SAAmB,KAE/BA,EAAWF,CAAM,MAAK,UAAaE,EAAWF,GAAO,QAASC,CAAQ,MAAO;AAAA,EAEtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQC,oBAAqBD,GAAMC,GAAW;AAErC,UAAMC,IAAY,KAAK;AAEvB,QAAKA,MAAc,OAAY;AAE/B,UAAMC,IAAgBD,EAAWF,CAAM;AAEvC,QAAKG,MAAkB,QAAY;AAElC,YAAMC,IAAQD,EAAc,QAASF,CAAU;AAE/C,MAAKG,MAAU,MAEdD,EAAc,OAAQC,GAAO,CAAG;AAAA,IAIpC;AAAA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOC,cAAeC,GAAQ;AAEtB,UAAMH,IAAY,KAAK;AAEvB,QAAKA,MAAc,OAAY;AAE/B,UAAMC,IAAgBD,EAAWG,EAAM,IAAM;AAE7C,QAAKF,MAAkB,QAAY;AAElC,MAAAE,EAAM,SAAS;AAGf,YAAMC,IAAQH,EAAc,MAAO,CAAG;AAEtC,eAAUI,IAAI,GAAGC,IAAIF,EAAM,QAAQC,IAAIC,GAAGD;AAEzC,QAAAD,EAAOC,CAAG,EAAC,KAAM,MAAMF,CAAO;AAI/B,MAAAA,EAAM,SAAS;AAAA,IAElB;AAAA,EAEA;AAEA;AAEA,MAAMI,KAAO,CAAE,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,M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AA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAabC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEXC,KAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEbC,KAAc;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","x_google_ignoreList":[0,1]}